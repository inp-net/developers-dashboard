schema @transport(subgraph: "Authentik", kind: "rest", location: "/api/v3/") {
  query: Query
  mutation: Mutation
}

directive @resolveRoot(subgraph: String) on FIELD_DEFINITION

directive @statusCodeTypeName(subgraph: String, typeName: String, statusCode: ID) repeatable on UNION

directive @length(subgraph: String, min: Int, max: Int) on SCALAR

directive @enum(subgraph: String, value: String) on ENUM_VALUE

directive @regexp(subgraph: String, pattern: String) on SCALAR

directive @typescript(subgraph: String, type: String) on SCALAR | ENUM

directive @discriminator(subgraph: String, field: String, mapping: ObjMap) on INTERFACE | UNION

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) repeatable on SCHEMA

type Query {
  """Read-only view list all installed apps"""
  admin_apps_list: [admin_apps_list_response] @httpOperation(subgraph: "Authentik", path: "/admin/apps/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Login Metrics per 1h"""
  admin_metrics_retrieve: admin_metrics_retrieve_response @httpOperation(subgraph: "Authentik", path: "/admin/metrics/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Read-only view list all installed models"""
  admin_models_list: [admin_models_list_response] @httpOperation(subgraph: "Authentik", path: "/admin/models/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Settings view"""
  admin_settings_retrieve: admin_settings_retrieve_response @httpOperation(subgraph: "Authentik", path: "/admin/settings/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get system information."""
  admin_system_retrieve: admin_system_retrieve_response @httpOperation(subgraph: "Authentik", path: "/admin/system/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get running and latest version."""
  admin_version_retrieve: admin_version_retrieve_response @httpOperation(subgraph: "Authentik", path: "/admin/version/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get currently connected worker count."""
  admin_workers_retrieve: admin_workers_retrieve_response @httpOperation(subgraph: "Authentik", path: "/admin/workers/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all devices for current user"""
  authenticators_admin_all_list(user: Int): [authenticators_admin_all_list_response] @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/all/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"user\":\"user\"}")
  """Viewset for Duo authenticator devices (for admins)"""
  authenticators_admin_duo_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_admin_duo_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/duo/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for Duo authenticator devices (for admins)"""
  authenticators_admin_duo_retrieve(
    """A unique integer value identifying this Duo Device."""
    id: Int!
  ): authenticators_admin_duo_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/duo/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Viewset for sms authenticator devices (for admins)"""
  authenticators_admin_sms_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_admin_sms_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/sms/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for sms authenticator devices (for admins)"""
  authenticators_admin_sms_retrieve(
    """A unique integer value identifying this SMS Device."""
    id: Int!
  ): authenticators_admin_sms_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/sms/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Viewset for static authenticator devices (for admins)"""
  authenticators_admin_static_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_admin_static_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/static/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for static authenticator devices (for admins)"""
  authenticators_admin_static_retrieve(
    """A unique integer value identifying this Static Device."""
    id: Int!
  ): authenticators_admin_static_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/static/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Viewset for totp authenticator devices (for admins)"""
  authenticators_admin_totp_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_admin_totp_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/totp/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for totp authenticator devices (for admins)"""
  authenticators_admin_totp_retrieve(
    """A unique integer value identifying this TOTP Device."""
    id: Int!
  ): authenticators_admin_totp_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/totp/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Viewset for WebAuthn authenticator devices (for admins)"""
  authenticators_admin_webauthn_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_admin_webauthn_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/webauthn/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for WebAuthn authenticator devices (for admins)"""
  authenticators_admin_webauthn_retrieve(
    """A unique integer value identifying this WebAuthn Device."""
    id: Int!
  ): authenticators_admin_webauthn_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/webauthn/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all devices for current user"""
  authenticators_all_list: [authenticators_all_list_response] @httpOperation(subgraph: "Authentik", path: "/authenticators/all/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Viewset for Duo authenticator devices"""
  authenticators_duo_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_duo_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/duo/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for Duo authenticator devices"""
  authenticators_duo_retrieve(
    """A unique integer value identifying this Duo Device."""
    id: Int!
  ): authenticators_duo_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/duo/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  authenticators_duo_used_by_list(
    """A unique integer value identifying this Duo Device."""
    id: Int!
  ): [authenticators_duo_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/authenticators/duo/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Viewset for sms authenticator devices"""
  authenticators_sms_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_sms_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/sms/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for sms authenticator devices"""
  authenticators_sms_retrieve(
    """A unique integer value identifying this SMS Device."""
    id: Int!
  ): authenticators_sms_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/sms/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  authenticators_sms_used_by_list(
    """A unique integer value identifying this SMS Device."""
    id: Int!
  ): [authenticators_sms_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/authenticators/sms/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Viewset for static authenticator devices"""
  authenticators_static_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_static_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/static/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for static authenticator devices"""
  authenticators_static_retrieve(
    """A unique integer value identifying this Static Device."""
    id: Int!
  ): authenticators_static_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/static/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  authenticators_static_used_by_list(
    """A unique integer value identifying this Static Device."""
    id: Int!
  ): [authenticators_static_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/authenticators/static/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Viewset for totp authenticator devices"""
  authenticators_totp_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_totp_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/totp/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for totp authenticator devices"""
  authenticators_totp_retrieve(
    """A unique integer value identifying this TOTP Device."""
    id: Int!
  ): authenticators_totp_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/totp/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  authenticators_totp_used_by_list(
    """A unique integer value identifying this TOTP Device."""
    id: Int!
  ): [authenticators_totp_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/authenticators/totp/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Viewset for WebAuthn authenticator devices"""
  authenticators_webauthn_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): authenticators_webauthn_list_response @httpOperation(subgraph: "Authentik", path: "/authenticators/webauthn/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Viewset for WebAuthn authenticator devices"""
  authenticators_webauthn_retrieve(
    """A unique integer value identifying this WebAuthn Device."""
    id: Int!
  ): authenticators_webauthn_retrieve_response @httpOperation(subgraph: "Authentik", path: "/authenticators/webauthn/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  authenticators_webauthn_used_by_list(
    """A unique integer value identifying this WebAuthn Device."""
    id: Int!
  ): [authenticators_webauthn_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/authenticators/webauthn/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Custom list method that checks Policy based access instead of guardian"""
  core_applications_list(
    for_user: Int
    group: String
    meta_description: String
    meta_launch_url: String
    meta_publisher: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    slug: String
    superuser_full_list: Boolean
  ): core_applications_list_response @httpOperation(subgraph: "Authentik", path: "/core/applications/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"for_user\":\"for_user\",\"group\":\"group\",\"meta_description\":\"meta_description\",\"meta_launch_url\":\"meta_launch_url\",\"meta_publisher\":\"meta_publisher\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"slug\":\"slug\",\"superuser_full_list\":\"superuser_full_list\"}")
  """Application Viewset"""
  core_applications_retrieve(
    """Internal application name, used in URLs."""
    slug: String!
  ): core_applications_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/applications/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Check access to a single application by slug"""
  core_applications_check_access_retrieve(
    """Internal application name, used in URLs."""
    slug: String!
    for_user: Int
  ): core_applications_check_access_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/applications/{args.slug}/check_access/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"for_user\":\"for_user\"}")
  """Metrics for application logins"""
  core_applications_metrics_list(
    """Internal application name, used in URLs."""
    slug: String!
  ): [core_applications_metrics_list_response] @httpOperation(subgraph: "Authentik", path: "/core/applications/{args.slug}/metrics/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  core_applications_used_by_list(
    """Internal application name, used in URLs."""
    slug: String!
  ): [core_applications_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/core/applications/{args.slug}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """AuthenticatedSession Viewset"""
  core_authenticated_sessions_list(
    last_ip: String
    last_user_agent: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    user__username: String
  ): core_authenticated_sessions_list_response @httpOperation(subgraph: "Authentik", path: "/core/authenticated_sessions/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"last_ip\":\"last_ip\",\"last_user_agent\":\"last_user_agent\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"user__username\":\"user__username\"}")
  """AuthenticatedSession Viewset"""
  core_authenticated_sessions_retrieve(
    """A UUID string identifying this Authenticated Session."""
    uuid: UUID!
  ): core_authenticated_sessions_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/authenticated_sessions/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  core_authenticated_sessions_used_by_list(
    """A UUID string identifying this Authenticated Session."""
    uuid: UUID!
  ): [core_authenticated_sessions_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/core/authenticated_sessions/{args.uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Brand Viewset"""
  core_brands_list(
    brand_uuid: UUID
    branding_favicon: String
    branding_logo: String
    branding_title: String
    default: Boolean
    domain: String
    flow_authentication: UUID
    flow_device_code: UUID
    flow_invalidation: UUID
    flow_recovery: UUID
    flow_unenrollment: UUID
    flow_user_settings: UUID
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    web_certificate: UUID
  ): core_brands_list_response @httpOperation(subgraph: "Authentik", path: "/core/brands/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"brand_uuid\":\"brand_uuid\",\"branding_favicon\":\"branding_favicon\",\"branding_logo\":\"branding_logo\",\"branding_title\":\"branding_title\",\"default\":\"default\",\"domain\":\"domain\",\"flow_authentication\":\"flow_authentication\",\"flow_device_code\":\"flow_device_code\",\"flow_invalidation\":\"flow_invalidation\",\"flow_recovery\":\"flow_recovery\",\"flow_unenrollment\":\"flow_unenrollment\",\"flow_user_settings\":\"flow_user_settings\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"web_certificate\":\"web_certificate\"}")
  """Brand Viewset"""
  core_brands_retrieve(
    """A UUID string identifying this Brand."""
    brand_uuid: UUID!
  ): core_brands_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/brands/{args.brand_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  core_brands_used_by_list(
    """A UUID string identifying this Brand."""
    brand_uuid: UUID!
  ): [core_brands_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/core/brands/{args.brand_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get current brand"""
  core_brands_current_retrieve: core_brands_current_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/brands/current/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Group Viewset"""
  core_groups_list(
    """Attributes"""
    attributes: String
    include_users: Boolean = true
    is_superuser: Boolean
    members_by_pk: [Int]
    """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
    members_by_username: [String]
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): core_groups_list_response @httpOperation(subgraph: "Authentik", path: "/core/groups/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"attributes\":\"attributes\",\"include_users\":\"include_users\",\"is_superuser\":\"is_superuser\",\"members_by_pk\":\"members_by_pk\",\"members_by_username\":\"members_by_username\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}", queryStringOptionsByParam: "{\"members_by_pk\":{\"arrayFormat\":\"repeat\",\"destructObject\":true},\"members_by_username\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """Group Viewset"""
  core_groups_retrieve(
    """A UUID string identifying this Group."""
    group_uuid: UUID!
  ): core_groups_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/groups/{args.group_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  core_groups_used_by_list(
    """A UUID string identifying this Group."""
    group_uuid: UUID!
  ): [core_groups_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/core/groups/{args.group_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Token Viewset"""
  core_tokens_list(
    description: String
    expires: DateTime
    expiring: Boolean
    identifier: String
    intent: queryInput_core_tokens_list_intent
    managed: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    user__username: String
  ): core_tokens_list_response @httpOperation(subgraph: "Authentik", path: "/core/tokens/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"description\":\"description\",\"expires\":\"expires\",\"expiring\":\"expiring\",\"identifier\":\"identifier\",\"intent\":\"intent\",\"managed\":\"managed\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"user__username\":\"user__username\"}")
  """Token Viewset"""
  core_tokens_retrieve(identifier: String!): core_tokens_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/tokens/{args.identifier}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  core_tokens_used_by_list(identifier: String!): [core_tokens_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/core/tokens/{args.identifier}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Return token key and log access"""
  core_tokens_view_key_retrieve(identifier: String!): core_tokens_view_key_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/tokens/{args.identifier}/view_key/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """UserConsent Viewset"""
  core_user_consent_list(
    application: UUID
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    user: Int
  ): core_user_consent_list_response @httpOperation(subgraph: "Authentik", path: "/core/user_consent/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"application\":\"application\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"user\":\"user\"}")
  """UserConsent Viewset"""
  core_user_consent_retrieve(
    """A unique integer value identifying this User Consent."""
    id: Int!
  ): core_user_consent_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/user_consent/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  core_user_consent_used_by_list(
    """A unique integer value identifying this User Consent."""
    id: Int!
  ): [core_user_consent_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/core/user_consent/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """User Viewset"""
  core_users_list(
    """Attributes"""
    attributes: String
    email: String
    groups_by_name: [String]
    groups_by_pk: [UUID]
    include_groups: Boolean = true
    is_active: Boolean
    is_superuser: Boolean
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    path: String
    path_startswith: String
    """A search term."""
    search: String
    type: [queryInput_core_users_list_type_items]
    username: String
    uuid: UUID
  ): core_users_list_response @httpOperation(subgraph: "Authentik", path: "/core/users/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"attributes\":\"attributes\",\"email\":\"email\",\"groups_by_name\":\"groups_by_name\",\"groups_by_pk\":\"groups_by_pk\",\"include_groups\":\"include_groups\",\"is_active\":\"is_active\",\"is_superuser\":\"is_superuser\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"path\":\"path\",\"path_startswith\":\"path_startswith\",\"search\":\"search\",\"type\":\"type\",\"username\":\"username\",\"uuid\":\"uuid\"}", queryStringOptionsByParam: "{\"groups_by_name\":{\"arrayFormat\":\"repeat\",\"destructObject\":true},\"groups_by_pk\":{\"arrayFormat\":\"repeat\",\"destructObject\":true},\"type\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """User Viewset"""
  core_users_retrieve(
    """A unique integer value identifying this User."""
    id: Int!
  ): core_users_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """User metrics per 1h"""
  core_users_metrics_retrieve(
    """A unique integer value identifying this User."""
    id: Int!
  ): core_users_metrics_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/metrics/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  core_users_used_by_list(
    """A unique integer value identifying this User."""
    id: Int!
  ): [core_users_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """End Impersonation a user"""
  core_users_impersonate_end_retrieve: core_users_impersonate_end_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/users/impersonate_end/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get information about current user"""
  core_users_me_retrieve: core_users_me_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/users/me/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all user paths"""
  core_users_paths_retrieve(search: String): core_users_paths_retrieve_response @httpOperation(subgraph: "Authentik", path: "/core/users/paths/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"search\":\"search\"}")
  """CertificateKeyPair Viewset"""
  crypto_certificatekeypairs_list(
    """Only return certificate-key pairs with keys"""
    has_key: Boolean
    include_details: Boolean = true
    managed: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): crypto_certificatekeypairs_list_response @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"has_key\":\"has_key\",\"include_details\":\"include_details\",\"managed\":\"managed\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """CertificateKeyPair Viewset"""
  crypto_certificatekeypairs_retrieve(
    """A UUID string identifying this Certificate-Key Pair."""
    kp_uuid: UUID!
  ): crypto_certificatekeypairs_retrieve_response @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/{args.kp_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  crypto_certificatekeypairs_used_by_list(
    """A UUID string identifying this Certificate-Key Pair."""
    kp_uuid: UUID!
  ): [crypto_certificatekeypairs_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/{args.kp_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Return certificate-key pairs certificate and log access"""
  crypto_certificatekeypairs_view_certificate_retrieve(
    """A UUID string identifying this Certificate-Key Pair."""
    kp_uuid: UUID!
    download: Boolean
  ): crypto_certificatekeypairs_view_certificate_retrieve_response @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/{args.kp_uuid}/view_certificate/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"download\":\"download\"}")
  """Return certificate-key pairs private key and log access"""
  crypto_certificatekeypairs_view_private_key_retrieve(
    """A UUID string identifying this Certificate-Key Pair."""
    kp_uuid: UUID!
    download: Boolean
  ): crypto_certificatekeypairs_view_private_key_retrieve_response @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/{args.kp_uuid}/view_private_key/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"download\":\"download\"}")
  """License Viewset"""
  enterprise_license_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): enterprise_license_list_response @httpOperation(subgraph: "Authentik", path: "/enterprise/license/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """License Viewset"""
  enterprise_license_retrieve(
    """A UUID string identifying this License."""
    license_uuid: UUID!
  ): enterprise_license_retrieve_response @httpOperation(subgraph: "Authentik", path: "/enterprise/license/{args.license_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  enterprise_license_used_by_list(
    """A UUID string identifying this License."""
    license_uuid: UUID!
  ): [enterprise_license_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/enterprise/license/{args.license_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Forecast how many users will be required in a year"""
  enterprise_license_forecast_retrieve: enterprise_license_forecast_retrieve_response @httpOperation(subgraph: "Authentik", path: "/enterprise/license/forecast/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get install_id"""
  enterprise_license_get_install_id_retrieve: enterprise_license_get_install_id_retrieve_response @httpOperation(subgraph: "Authentik", path: "/enterprise/license/get_install_id/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get the total license status"""
  enterprise_license_summary_retrieve: enterprise_license_summary_retrieve_response @httpOperation(subgraph: "Authentik", path: "/enterprise/license/summary/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Event Read-Only Viewset"""
  events_events_list(
    action: String
    """Brand name"""
    brand_name: String
    client_ip: String
    """Context Authorized application"""
    context_authorized_app: String
    """Context Model App"""
    context_model_app: String
    """Context Model Name"""
    context_model_name: String
    """Context Model Primary Key"""
    context_model_pk: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    """Username"""
    username: String
  ): events_events_list_response @httpOperation(subgraph: "Authentik", path: "/events/events/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"action\":\"action\",\"brand_name\":\"brand_name\",\"client_ip\":\"client_ip\",\"context_authorized_app\":\"context_authorized_app\",\"context_model_app\":\"context_model_app\",\"context_model_name\":\"context_model_name\",\"context_model_pk\":\"context_model_pk\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"username\":\"username\"}")
  """Event Read-Only Viewset"""
  events_events_retrieve(
    """A UUID string identifying this Event."""
    event_uuid: UUID!
  ): events_events_retrieve_response @httpOperation(subgraph: "Authentik", path: "/events/events/{args.event_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all actions"""
  events_events_actions_list: [events_events_actions_list_response] @httpOperation(subgraph: "Authentik", path: "/events/events/actions/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get the count of events per month"""
  events_events_per_month_list(action: String, query: String): [events_events_per_month_list_response] @httpOperation(subgraph: "Authentik", path: "/events/events/per_month/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"action\":\"action\",\"query\":\"query\"}")
  """Get the top_n events grouped by user count"""
  events_events_top_per_user_list(action: String, top_n: Int): [events_events_top_per_user_list_response] @httpOperation(subgraph: "Authentik", path: "/events/events/top_per_user/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"action\":\"action\",\"top_n\":\"top_n\"}")
  """Get event volume for specified filters and timeframe"""
  events_events_volume_list(
    action: String
    """Brand name"""
    brand_name: String
    client_ip: String
    """Context Authorized application"""
    context_authorized_app: String
    """Context Model App"""
    context_model_app: String
    """Context Model Name"""
    context_model_name: String
    """Context Model Primary Key"""
    context_model_pk: String
    """Which field to use when ordering the results."""
    ordering: String
    """A search term."""
    search: String
    """Username"""
    username: String
  ): [events_events_volume_list_response] @httpOperation(subgraph: "Authentik", path: "/events/events/volume/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"action\":\"action\",\"brand_name\":\"brand_name\",\"client_ip\":\"client_ip\",\"context_authorized_app\":\"context_authorized_app\",\"context_model_app\":\"context_model_app\",\"context_model_name\":\"context_model_name\",\"context_model_pk\":\"context_model_pk\",\"ordering\":\"ordering\",\"search\":\"search\",\"username\":\"username\"}")
  """Notification Viewset"""
  events_notifications_list(
    body: String
    created: DateTime
    event: UUID
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    seen: Boolean
    severity: queryInput_events_notifications_list_severity
    user: Int
  ): events_notifications_list_response @httpOperation(subgraph: "Authentik", path: "/events/notifications/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"body\":\"body\",\"created\":\"created\",\"event\":\"event\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"seen\":\"seen\",\"severity\":\"severity\",\"user\":\"user\"}")
  """Notification Viewset"""
  events_notifications_retrieve(
    """A UUID string identifying this Notification."""
    uuid: UUID!
  ): events_notifications_retrieve_response @httpOperation(subgraph: "Authentik", path: "/events/notifications/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  events_notifications_used_by_list(
    """A UUID string identifying this Notification."""
    uuid: UUID!
  ): [events_notifications_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/events/notifications/{args.uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """NotificationRule Viewset"""
  events_rules_list(
    group__name: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    severity: queryInput_events_rules_list_severity
  ): events_rules_list_response @httpOperation(subgraph: "Authentik", path: "/events/rules/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"group__name\":\"group__name\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"severity\":\"severity\"}")
  """NotificationRule Viewset"""
  events_rules_retrieve(
    """A UUID string identifying this Notification Rule."""
    pbm_uuid: UUID!
  ): events_rules_retrieve_response @httpOperation(subgraph: "Authentik", path: "/events/rules/{args.pbm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  events_rules_used_by_list(
    """A UUID string identifying this Notification Rule."""
    pbm_uuid: UUID!
  ): [events_rules_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/events/rules/{args.pbm_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Read-only view set that returns all background tasks"""
  events_system_tasks_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    status: queryInput_events_system_tasks_list_status
    uid: String
  ): events_system_tasks_list_response @httpOperation(subgraph: "Authentik", path: "/events/system_tasks/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"status\":\"status\",\"uid\":\"uid\"}")
  """Read-only view set that returns all background tasks"""
  events_system_tasks_retrieve(
    """A UUID string identifying this System Task."""
    uuid: UUID!
  ): events_system_tasks_retrieve_response @httpOperation(subgraph: "Authentik", path: "/events/system_tasks/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """NotificationTransport Viewset"""
  events_transports_list(
    mode: queryInput_events_transports_list_mode
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    send_once: Boolean
    webhook_url: String
  ): events_transports_list_response @httpOperation(subgraph: "Authentik", path: "/events/transports/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"mode\":\"mode\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"send_once\":\"send_once\",\"webhook_url\":\"webhook_url\"}")
  """NotificationTransport Viewset"""
  events_transports_retrieve(
    """A UUID string identifying this Notification Transport."""
    uuid: UUID!
  ): events_transports_retrieve_response @httpOperation(subgraph: "Authentik", path: "/events/transports/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  events_transports_used_by_list(
    """A UUID string identifying this Notification Transport."""
    uuid: UUID!
  ): [events_transports_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/events/transports/{args.uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """FlowStageBinding Viewset"""
  flows_bindings_list(
    evaluate_on_plan: Boolean
    fsb_uuid: UUID
    invalid_response_action: queryInput_flows_bindings_list_invalid_response_action
    order: Int
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    pbm_uuid: UUID
    policies: [UUID]
    policy_engine_mode: queryInput_flows_bindings_list_policy_engine_mode
    re_evaluate_policies: Boolean
    """A search term."""
    search: String
    stage: UUID
    target: UUID
  ): flows_bindings_list_response @httpOperation(subgraph: "Authentik", path: "/flows/bindings/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"evaluate_on_plan\":\"evaluate_on_plan\",\"fsb_uuid\":\"fsb_uuid\",\"invalid_response_action\":\"invalid_response_action\",\"order\":\"order\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"pbm_uuid\":\"pbm_uuid\",\"policies\":\"policies\",\"policy_engine_mode\":\"policy_engine_mode\",\"re_evaluate_policies\":\"re_evaluate_policies\",\"search\":\"search\",\"stage\":\"stage\",\"target\":\"target\"}", queryStringOptionsByParam: "{\"policies\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """FlowStageBinding Viewset"""
  flows_bindings_retrieve(
    """A UUID string identifying this Flow Stage Binding."""
    fsb_uuid: UUID!
  ): flows_bindings_retrieve_response @httpOperation(subgraph: "Authentik", path: "/flows/bindings/{args.fsb_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  flows_bindings_used_by_list(
    """A UUID string identifying this Flow Stage Binding."""
    fsb_uuid: UUID!
  ): [flows_bindings_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/flows/bindings/{args.fsb_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get the next pending challenge from the currently active flow."""
  flows_executor_get(
    flow_slug: String!
    """Querystring as received"""
    query: String!
  ): flows_executor_get_response @httpOperation(subgraph: "Authentik", path: "/flows/executor/{args.flow_slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"query\":\"query\"}")
  """Get current flow state and record it"""
  flows_inspector_get(flow_slug: String!): flows_inspector_get_response @httpOperation(subgraph: "Authentik", path: "/flows/inspector/{args.flow_slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Flow Viewset"""
  flows_instances_list(
    denied_action: queryInput_flows_instances_list_denied_action
    designation: queryInput_flows_instances_list_designation
    flow_uuid: UUID
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    slug: String
  ): flows_instances_list_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"denied_action\":\"denied_action\",\"designation\":\"designation\",\"flow_uuid\":\"flow_uuid\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"slug\":\"slug\"}")
  """Flow Viewset"""
  flows_instances_retrieve(
    """Visible in the URL."""
    slug: String!
  ): flows_instances_retrieve_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """
  Return diagram for flow with slug `slug`, in the format used by flowchart.js
  """
  flows_instances_diagram_retrieve(
    """Visible in the URL."""
    slug: String!
  ): flows_instances_diagram_retrieve_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/diagram/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Execute flow for current user"""
  flows_instances_execute_retrieve(
    """Visible in the URL."""
    slug: String!
  ): flows_instances_execute_retrieve_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/execute/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Export flow to .yaml file"""
  flows_instances_export_retrieve(
    """Visible in the URL."""
    slug: String!
  ): flows_instances_export_retrieve_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/export/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  flows_instances_used_by_list(
    """Visible in the URL."""
    slug: String!
  ): [flows_instances_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Info about cached flows"""
  flows_instances_cache_info_retrieve: flows_instances_cache_info_retrieve_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/cache_info/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Blueprint instances"""
  managed_blueprints_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    path: String
    """A search term."""
    search: String
  ): managed_blueprints_list_response @httpOperation(subgraph: "Authentik", path: "/managed/blueprints/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"path\":\"path\",\"search\":\"search\"}")
  """Blueprint instances"""
  managed_blueprints_retrieve(
    """A UUID string identifying this Blueprint Instance."""
    instance_uuid: UUID!
  ): managed_blueprints_retrieve_response @httpOperation(subgraph: "Authentik", path: "/managed/blueprints/{args.instance_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  managed_blueprints_used_by_list(
    """A UUID string identifying this Blueprint Instance."""
    instance_uuid: UUID!
  ): [managed_blueprints_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/managed/blueprints/{args.instance_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get blueprints"""
  managed_blueprints_available_list: [managed_blueprints_available_list_response] @httpOperation(subgraph: "Authentik", path: "/managed/blueprints/available/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """AccessToken Viewset"""
  oauth2_access_tokens_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    provider: Int
    """A search term."""
    search: String
    user: Int
  ): oauth2_access_tokens_list_response @httpOperation(subgraph: "Authentik", path: "/oauth2/access_tokens/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"provider\":\"provider\",\"search\":\"search\",\"user\":\"user\"}")
  """AccessToken Viewset"""
  oauth2_access_tokens_retrieve(
    """A unique integer value identifying this OAuth2 Access Token."""
    id: Int!
  ): oauth2_access_tokens_retrieve_response @httpOperation(subgraph: "Authentik", path: "/oauth2/access_tokens/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  oauth2_access_tokens_used_by_list(
    """A unique integer value identifying this OAuth2 Access Token."""
    id: Int!
  ): [oauth2_access_tokens_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/oauth2/access_tokens/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """AuthorizationCode Viewset"""
  oauth2_authorization_codes_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    provider: Int
    """A search term."""
    search: String
    user: Int
  ): oauth2_authorization_codes_list_response @httpOperation(subgraph: "Authentik", path: "/oauth2/authorization_codes/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"provider\":\"provider\",\"search\":\"search\",\"user\":\"user\"}")
  """AuthorizationCode Viewset"""
  oauth2_authorization_codes_retrieve(
    """A unique integer value identifying this Authorization Code."""
    id: Int!
  ): oauth2_authorization_codes_retrieve_response @httpOperation(subgraph: "Authentik", path: "/oauth2/authorization_codes/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  oauth2_authorization_codes_used_by_list(
    """A unique integer value identifying this Authorization Code."""
    id: Int!
  ): [oauth2_authorization_codes_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/oauth2/authorization_codes/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """RefreshToken Viewset"""
  oauth2_refresh_tokens_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    provider: Int
    """A search term."""
    search: String
    user: Int
  ): oauth2_refresh_tokens_list_response @httpOperation(subgraph: "Authentik", path: "/oauth2/refresh_tokens/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"provider\":\"provider\",\"search\":\"search\",\"user\":\"user\"}")
  """RefreshToken Viewset"""
  oauth2_refresh_tokens_retrieve(
    """A unique integer value identifying this OAuth2 Refresh Token."""
    id: Int!
  ): oauth2_refresh_tokens_retrieve_response @httpOperation(subgraph: "Authentik", path: "/oauth2/refresh_tokens/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  oauth2_refresh_tokens_used_by_list(
    """A unique integer value identifying this OAuth2 Refresh Token."""
    id: Int!
  ): [oauth2_refresh_tokens_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/oauth2/refresh_tokens/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Outpost Viewset"""
  outposts_instances_list(
    managed__icontains: String
    managed__iexact: String
    name__icontains: String
    name__iexact: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    providers__isnull: Boolean
    providers_by_pk: [Int]
    """A search term."""
    search: String
    service_connection__name__icontains: String
    service_connection__name__iexact: String
  ): outposts_instances_list_response @httpOperation(subgraph: "Authentik", path: "/outposts/instances/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"managed__icontains\":\"managed__icontains\",\"managed__iexact\":\"managed__iexact\",\"name__icontains\":\"name__icontains\",\"name__iexact\":\"name__iexact\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"providers__isnull\":\"providers__isnull\",\"providers_by_pk\":\"providers_by_pk\",\"search\":\"search\",\"service_connection__name__icontains\":\"service_connection__name__icontains\",\"service_connection__name__iexact\":\"service_connection__name__iexact\"}", queryStringOptionsByParam: "{\"providers_by_pk\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """Outpost Viewset"""
  outposts_instances_retrieve(
    """A UUID string identifying this Outpost."""
    uuid: UUID!
  ): outposts_instances_retrieve_response @httpOperation(subgraph: "Authentik", path: "/outposts/instances/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get outposts current health"""
  outposts_instances_health_list(
    """A UUID string identifying this Outpost."""
    uuid: UUID!
    managed__icontains: String
    managed__iexact: String
    name__icontains: String
    name__iexact: String
    """Which field to use when ordering the results."""
    ordering: String
    providers__isnull: Boolean
    providers_by_pk: [Int]
    """A search term."""
    search: String
    service_connection__name__icontains: String
    service_connection__name__iexact: String
  ): [outposts_instances_health_list_response] @httpOperation(subgraph: "Authentik", path: "/outposts/instances/{args.uuid}/health/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"managed__icontains\":\"managed__icontains\",\"managed__iexact\":\"managed__iexact\",\"name__icontains\":\"name__icontains\",\"name__iexact\":\"name__iexact\",\"ordering\":\"ordering\",\"providers__isnull\":\"providers__isnull\",\"providers_by_pk\":\"providers_by_pk\",\"search\":\"search\",\"service_connection__name__icontains\":\"service_connection__name__icontains\",\"service_connection__name__iexact\":\"service_connection__name__iexact\"}", queryStringOptionsByParam: "{\"providers_by_pk\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """Get a list of all objects that use this object"""
  outposts_instances_used_by_list(
    """A UUID string identifying this Outpost."""
    uuid: UUID!
  ): [outposts_instances_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/outposts/instances/{args.uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Global default outpost config"""
  outposts_instances_default_settings_retrieve: outposts_instances_default_settings_retrieve_response @httpOperation(subgraph: "Authentik", path: "/outposts/instances/default_settings/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """LDAPProvider Viewset"""
  outposts_ldap_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): outposts_ldap_list_response @httpOperation(subgraph: "Authentik", path: "/outposts/ldap/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """LDAPProvider Viewset"""
  outposts_ldap_retrieve(
    """A unique integer value identifying this LDAP Provider."""
    id: Int!
  ): outposts_ldap_retrieve_response @httpOperation(subgraph: "Authentik", path: "/outposts/ldap/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """ProxyProvider Viewset"""
  outposts_proxy_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): outposts_proxy_list_response @httpOperation(subgraph: "Authentik", path: "/outposts/proxy/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """ProxyProvider Viewset"""
  outposts_proxy_retrieve(
    """A unique integer value identifying this Proxy Provider."""
    id: Int!
  ): outposts_proxy_retrieve_response @httpOperation(subgraph: "Authentik", path: "/outposts/proxy/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """RadiusProvider Viewset"""
  outposts_radius_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): outposts_radius_list_response @httpOperation(subgraph: "Authentik", path: "/outposts/radius/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """RadiusProvider Viewset"""
  outposts_radius_retrieve(
    """A unique integer value identifying this Radius Provider."""
    id: Int!
  ): outposts_radius_retrieve_response @httpOperation(subgraph: "Authentik", path: "/outposts/radius/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """ServiceConnection Viewset"""
  outposts_service_connections_all_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): outposts_service_connections_all_list_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/all/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """ServiceConnection Viewset"""
  outposts_service_connections_all_retrieve(
    """A UUID string identifying this Outpost Service-Connection."""
    uuid: UUID!
  ): outposts_service_connections_all_retrieve_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/all/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get the service connection's state"""
  outposts_service_connections_all_state_retrieve(
    """A UUID string identifying this Outpost Service-Connection."""
    uuid: UUID!
  ): outposts_service_connections_all_state_retrieve_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/all/{args.uuid}/state/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  outposts_service_connections_all_used_by_list(
    """A UUID string identifying this Outpost Service-Connection."""
    uuid: UUID!
  ): [outposts_service_connections_all_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/all/{args.uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all creatable service connection types"""
  outposts_service_connections_all_types_list: [outposts_service_connections_all_types_list_response] @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/all/types/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """DockerServiceConnection Viewset"""
  outposts_service_connections_docker_list(
    local: Boolean
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    tls_authentication: UUID
    tls_verification: UUID
    url: String
  ): outposts_service_connections_docker_list_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/docker/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"local\":\"local\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"tls_authentication\":\"tls_authentication\",\"tls_verification\":\"tls_verification\",\"url\":\"url\"}")
  """DockerServiceConnection Viewset"""
  outposts_service_connections_docker_retrieve(
    """A UUID string identifying this Docker Service-Connection."""
    uuid: UUID!
  ): outposts_service_connections_docker_retrieve_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/docker/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  outposts_service_connections_docker_used_by_list(
    """A UUID string identifying this Docker Service-Connection."""
    uuid: UUID!
  ): [outposts_service_connections_docker_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/docker/{args.uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """KubernetesServiceConnection Viewset"""
  outposts_service_connections_kubernetes_list(
    local: Boolean
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): outposts_service_connections_kubernetes_list_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/kubernetes/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"local\":\"local\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """KubernetesServiceConnection Viewset"""
  outposts_service_connections_kubernetes_retrieve(
    """A UUID string identifying this Kubernetes Service-Connection."""
    uuid: UUID!
  ): outposts_service_connections_kubernetes_retrieve_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/kubernetes/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  outposts_service_connections_kubernetes_used_by_list(
    """A UUID string identifying this Kubernetes Service-Connection."""
    uuid: UUID!
  ): [outposts_service_connections_kubernetes_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/kubernetes/{args.uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Policy Viewset"""
  policies_all_list(
    bindings__isnull: Boolean
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    promptstage__isnull: Boolean
    """A search term."""
    search: String
  ): policies_all_list_response @httpOperation(subgraph: "Authentik", path: "/policies/all/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"bindings__isnull\":\"bindings__isnull\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"promptstage__isnull\":\"promptstage__isnull\",\"search\":\"search\"}")
  """Policy Viewset"""
  policies_all_retrieve(
    """A UUID string identifying this Policy."""
    policy_uuid: UUID!
  ): policies_all_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/all/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  policies_all_used_by_list(
    """A UUID string identifying this Policy."""
    policy_uuid: UUID!
  ): [policies_all_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/all/{args.policy_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Info about cached policies"""
  policies_all_cache_info_retrieve: policies_all_cache_info_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/all/cache_info/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all creatable policy types"""
  policies_all_types_list: [policies_all_types_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/all/types/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """PolicyBinding Viewset"""
  policies_bindings_list(
    enabled: Boolean
    order: Int
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    policy: UUID
    policy__isnull: Boolean
    """A search term."""
    search: String
    target: UUID
    target_in: [UUID]
    timeout: Int
  ): policies_bindings_list_response @httpOperation(subgraph: "Authentik", path: "/policies/bindings/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"enabled\":\"enabled\",\"order\":\"order\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"policy\":\"policy\",\"policy__isnull\":\"policy__isnull\",\"search\":\"search\",\"target\":\"target\",\"target_in\":\"target_in\",\"timeout\":\"timeout\"}", queryStringOptionsByParam: "{\"target_in\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """PolicyBinding Viewset"""
  policies_bindings_retrieve(
    """A UUID string identifying this Policy Binding."""
    policy_binding_uuid: UUID!
  ): policies_bindings_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/bindings/{args.policy_binding_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  policies_bindings_used_by_list(
    """A UUID string identifying this Policy Binding."""
    policy_binding_uuid: UUID!
  ): [policies_bindings_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/bindings/{args.policy_binding_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Dummy Viewset"""
  policies_dummy_list(
    created: DateTime
    execution_logging: Boolean
    last_updated: DateTime
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    policy_uuid: UUID
    result: Boolean
    """A search term."""
    search: String
    wait_max: Int
    wait_min: Int
  ): policies_dummy_list_response @httpOperation(subgraph: "Authentik", path: "/policies/dummy/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"created\":\"created\",\"execution_logging\":\"execution_logging\",\"last_updated\":\"last_updated\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"policy_uuid\":\"policy_uuid\",\"result\":\"result\",\"search\":\"search\",\"wait_max\":\"wait_max\",\"wait_min\":\"wait_min\"}")
  """Dummy Viewset"""
  policies_dummy_retrieve(
    """A UUID string identifying this Dummy Policy."""
    policy_uuid: UUID!
  ): policies_dummy_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/dummy/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  policies_dummy_used_by_list(
    """A UUID string identifying this Dummy Policy."""
    policy_uuid: UUID!
  ): [policies_dummy_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/dummy/{args.policy_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Event Matcher Policy Viewset"""
  policies_event_matcher_list(
    action: queryInput_policies_event_matcher_list_action
    app: String
    client_ip: String
    created: DateTime
    execution_logging: Boolean
    last_updated: DateTime
    model: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    policy_uuid: UUID
    """A search term."""
    search: String
  ): policies_event_matcher_list_response @httpOperation(subgraph: "Authentik", path: "/policies/event_matcher/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"action\":\"action\",\"app\":\"app\",\"client_ip\":\"client_ip\",\"created\":\"created\",\"execution_logging\":\"execution_logging\",\"last_updated\":\"last_updated\",\"model\":\"model\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"policy_uuid\":\"policy_uuid\",\"search\":\"search\"}")
  """Event Matcher Policy Viewset"""
  policies_event_matcher_retrieve(
    """A UUID string identifying this Event Matcher Policy."""
    policy_uuid: UUID!
  ): policies_event_matcher_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/event_matcher/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  policies_event_matcher_used_by_list(
    """A UUID string identifying this Event Matcher Policy."""
    policy_uuid: UUID!
  ): [policies_event_matcher_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/event_matcher/{args.policy_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Source Viewset"""
  policies_expression_list(
    created: DateTime
    execution_logging: Boolean
    expression: String
    last_updated: DateTime
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    policy_uuid: UUID
    """A search term."""
    search: String
  ): policies_expression_list_response @httpOperation(subgraph: "Authentik", path: "/policies/expression/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"created\":\"created\",\"execution_logging\":\"execution_logging\",\"expression\":\"expression\",\"last_updated\":\"last_updated\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"policy_uuid\":\"policy_uuid\",\"search\":\"search\"}")
  """Source Viewset"""
  policies_expression_retrieve(
    """A UUID string identifying this Expression Policy."""
    policy_uuid: UUID!
  ): policies_expression_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/expression/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  policies_expression_used_by_list(
    """A UUID string identifying this Expression Policy."""
    policy_uuid: UUID!
  ): [policies_expression_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/expression/{args.policy_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Password Policy Viewset"""
  policies_password_list(
    amount_digits: Int
    amount_lowercase: Int
    amount_symbols: Int
    amount_uppercase: Int
    check_have_i_been_pwned: Boolean
    check_static_rules: Boolean
    check_zxcvbn: Boolean
    created: DateTime
    error_message: String
    execution_logging: Boolean
    hibp_allowed_count: Int
    last_updated: DateTime
    length_min: Int
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    password_field: String
    policy_uuid: UUID
    """A search term."""
    search: String
    symbol_charset: String
    zxcvbn_score_threshold: Int
  ): policies_password_list_response @httpOperation(subgraph: "Authentik", path: "/policies/password/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"amount_digits\":\"amount_digits\",\"amount_lowercase\":\"amount_lowercase\",\"amount_symbols\":\"amount_symbols\",\"amount_uppercase\":\"amount_uppercase\",\"check_have_i_been_pwned\":\"check_have_i_been_pwned\",\"check_static_rules\":\"check_static_rules\",\"check_zxcvbn\":\"check_zxcvbn\",\"created\":\"created\",\"error_message\":\"error_message\",\"execution_logging\":\"execution_logging\",\"hibp_allowed_count\":\"hibp_allowed_count\",\"last_updated\":\"last_updated\",\"length_min\":\"length_min\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"password_field\":\"password_field\",\"policy_uuid\":\"policy_uuid\",\"search\":\"search\",\"symbol_charset\":\"symbol_charset\",\"zxcvbn_score_threshold\":\"zxcvbn_score_threshold\"}")
  """Password Policy Viewset"""
  policies_password_retrieve(
    """A UUID string identifying this Password Policy."""
    policy_uuid: UUID!
  ): policies_password_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/password/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  policies_password_used_by_list(
    """A UUID string identifying this Password Policy."""
    policy_uuid: UUID!
  ): [policies_password_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/password/{args.policy_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Password Expiry Viewset"""
  policies_password_expiry_list(
    created: DateTime
    days: Int
    deny_only: Boolean
    execution_logging: Boolean
    last_updated: DateTime
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    policy_uuid: UUID
    """A search term."""
    search: String
  ): policies_password_expiry_list_response @httpOperation(subgraph: "Authentik", path: "/policies/password_expiry/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"created\":\"created\",\"days\":\"days\",\"deny_only\":\"deny_only\",\"execution_logging\":\"execution_logging\",\"last_updated\":\"last_updated\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"policy_uuid\":\"policy_uuid\",\"search\":\"search\"}")
  """Password Expiry Viewset"""
  policies_password_expiry_retrieve(
    """A UUID string identifying this Password Expiry Policy."""
    policy_uuid: UUID!
  ): policies_password_expiry_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/password_expiry/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  policies_password_expiry_used_by_list(
    """A UUID string identifying this Password Expiry Policy."""
    policy_uuid: UUID!
  ): [policies_password_expiry_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/password_expiry/{args.policy_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Reputation Policy Viewset"""
  policies_reputation_list(
    check_ip: Boolean
    check_username: Boolean
    created: DateTime
    execution_logging: Boolean
    last_updated: DateTime
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    policy_uuid: UUID
    """A search term."""
    search: String
    threshold: Int
  ): policies_reputation_list_response @httpOperation(subgraph: "Authentik", path: "/policies/reputation/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"check_ip\":\"check_ip\",\"check_username\":\"check_username\",\"created\":\"created\",\"execution_logging\":\"execution_logging\",\"last_updated\":\"last_updated\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"policy_uuid\":\"policy_uuid\",\"search\":\"search\",\"threshold\":\"threshold\"}")
  """Reputation Policy Viewset"""
  policies_reputation_retrieve(
    """A UUID string identifying this Reputation Policy."""
    policy_uuid: UUID!
  ): policies_reputation_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/reputation/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  policies_reputation_used_by_list(
    """A UUID string identifying this Reputation Policy."""
    policy_uuid: UUID!
  ): [policies_reputation_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/reputation/{args.policy_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Reputation Viewset"""
  policies_reputation_scores_list(
    identifier: String
    ip: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    score: Int
    """A search term."""
    search: String
  ): policies_reputation_scores_list_response @httpOperation(subgraph: "Authentik", path: "/policies/reputation/scores/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"identifier\":\"identifier\",\"ip\":\"ip\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"score\":\"score\",\"search\":\"search\"}")
  """Reputation Viewset"""
  policies_reputation_scores_retrieve(
    """A UUID string identifying this Reputation Score."""
    reputation_uuid: UUID!
  ): policies_reputation_scores_retrieve_response @httpOperation(subgraph: "Authentik", path: "/policies/reputation/scores/{args.reputation_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  policies_reputation_scores_used_by_list(
    """A UUID string identifying this Reputation Score."""
    reputation_uuid: UUID!
  ): [policies_reputation_scores_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/policies/reputation/scores/{args.reputation_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """PropertyMapping Viewset"""
  propertymappings_all_list(
    managed__isnull: Boolean
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): propertymappings_all_list_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/all/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"managed__isnull\":\"managed__isnull\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """PropertyMapping Viewset"""
  propertymappings_all_retrieve(
    """A UUID string identifying this Property Mapping."""
    pm_uuid: UUID!
  ): propertymappings_all_retrieve_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/all/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  propertymappings_all_used_by_list(
    """A UUID string identifying this Property Mapping."""
    pm_uuid: UUID!
  ): [propertymappings_all_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/propertymappings/all/{args.pm_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all creatable property-mapping types"""
  propertymappings_all_types_list: [propertymappings_all_types_list_response] @httpOperation(subgraph: "Authentik", path: "/propertymappings/all/types/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """LDAP PropertyMapping Viewset"""
  propertymappings_ldap_list(
    expression: String
    managed: [String]
    name: String
    object_field: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    pm_uuid: UUID
    """A search term."""
    search: String
  ): propertymappings_ldap_list_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/ldap/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"expression\":\"expression\",\"managed\":\"managed\",\"name\":\"name\",\"object_field\":\"object_field\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"pm_uuid\":\"pm_uuid\",\"search\":\"search\"}", queryStringOptionsByParam: "{\"managed\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """LDAP PropertyMapping Viewset"""
  propertymappings_ldap_retrieve(
    """A UUID string identifying this LDAP Property Mapping."""
    pm_uuid: UUID!
  ): propertymappings_ldap_retrieve_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/ldap/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  propertymappings_ldap_used_by_list(
    """A UUID string identifying this LDAP Property Mapping."""
    pm_uuid: UUID!
  ): [propertymappings_ldap_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/propertymappings/ldap/{args.pm_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """NotificationWebhookMapping Viewset"""
  propertymappings_notification_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): propertymappings_notification_list_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/notification/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """NotificationWebhookMapping Viewset"""
  propertymappings_notification_retrieve(
    """A UUID string identifying this Webhook Mapping."""
    pm_uuid: UUID!
  ): propertymappings_notification_retrieve_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/notification/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  propertymappings_notification_used_by_list(
    """A UUID string identifying this Webhook Mapping."""
    pm_uuid: UUID!
  ): [propertymappings_notification_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/propertymappings/notification/{args.pm_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """RACPropertyMapping Viewset"""
  propertymappings_rac_list(
    managed: [String]
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): propertymappings_rac_list_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/rac/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"managed\":\"managed\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}", queryStringOptionsByParam: "{\"managed\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """RACPropertyMapping Viewset"""
  propertymappings_rac_retrieve(
    """A UUID string identifying this RAC Property Mapping."""
    pm_uuid: UUID!
  ): propertymappings_rac_retrieve_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/rac/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  propertymappings_rac_used_by_list(
    """A UUID string identifying this RAC Property Mapping."""
    pm_uuid: UUID!
  ): [propertymappings_rac_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/propertymappings/rac/{args.pm_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """SAMLPropertyMapping Viewset"""
  propertymappings_saml_list(
    expression: String
    friendly_name: String
    managed: [String]
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    pm_uuid: UUID
    saml_name: String
    """A search term."""
    search: String
  ): propertymappings_saml_list_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/saml/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"expression\":\"expression\",\"friendly_name\":\"friendly_name\",\"managed\":\"managed\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"pm_uuid\":\"pm_uuid\",\"saml_name\":\"saml_name\",\"search\":\"search\"}", queryStringOptionsByParam: "{\"managed\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """SAMLPropertyMapping Viewset"""
  propertymappings_saml_retrieve(
    """A UUID string identifying this SAML Property Mapping."""
    pm_uuid: UUID!
  ): propertymappings_saml_retrieve_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/saml/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  propertymappings_saml_used_by_list(
    """A UUID string identifying this SAML Property Mapping."""
    pm_uuid: UUID!
  ): [propertymappings_saml_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/propertymappings/saml/{args.pm_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """SCIMMapping Viewset"""
  propertymappings_scim_list(
    expression: String
    managed: [String]
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    pm_uuid: UUID
    """A search term."""
    search: String
  ): propertymappings_scim_list_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scim/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"expression\":\"expression\",\"managed\":\"managed\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"pm_uuid\":\"pm_uuid\",\"search\":\"search\"}", queryStringOptionsByParam: "{\"managed\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """SCIMMapping Viewset"""
  propertymappings_scim_retrieve(
    """A UUID string identifying this SCIM Mapping."""
    pm_uuid: UUID!
  ): propertymappings_scim_retrieve_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scim/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  propertymappings_scim_used_by_list(
    """A UUID string identifying this SCIM Mapping."""
    pm_uuid: UUID!
  ): [propertymappings_scim_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/propertymappings/scim/{args.pm_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """ScopeMapping Viewset"""
  propertymappings_scope_list(
    managed: [String]
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    scope_name: String
    """A search term."""
    search: String
  ): propertymappings_scope_list_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scope/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"managed\":\"managed\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"scope_name\":\"scope_name\",\"search\":\"search\"}", queryStringOptionsByParam: "{\"managed\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """ScopeMapping Viewset"""
  propertymappings_scope_retrieve(
    """A UUID string identifying this Scope Mapping."""
    pm_uuid: UUID!
  ): propertymappings_scope_retrieve_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scope/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  propertymappings_scope_used_by_list(
    """A UUID string identifying this Scope Mapping."""
    pm_uuid: UUID!
  ): [propertymappings_scope_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/propertymappings/scope/{args.pm_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Provider Viewset"""
  providers_all_list(
    application__isnull: Boolean
    backchannel_only: Boolean
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): providers_all_list_response @httpOperation(subgraph: "Authentik", path: "/providers/all/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"application__isnull\":\"application__isnull\",\"backchannel_only\":\"backchannel_only\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Provider Viewset"""
  providers_all_retrieve(
    """A unique integer value identifying this provider."""
    id: Int!
  ): providers_all_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/all/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  providers_all_used_by_list(
    """A unique integer value identifying this provider."""
    id: Int!
  ): [providers_all_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/providers/all/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all creatable provider types"""
  providers_all_types_list: [providers_all_types_list_response] @httpOperation(subgraph: "Authentik", path: "/providers/all/types/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """LDAPProvider Viewset"""
  providers_ldap_list(
    application__isnull: Boolean
    authorization_flow__slug__iexact: String
    base_dn__iexact: String
    certificate__kp_uuid__iexact: UUID
    certificate__name__iexact: String
    gid_start_number__iexact: Int
    name__iexact: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    search_group__group_uuid__iexact: UUID
    search_group__name__iexact: String
    tls_server_name__iexact: String
    uid_start_number__iexact: Int
  ): providers_ldap_list_response @httpOperation(subgraph: "Authentik", path: "/providers/ldap/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"application__isnull\":\"application__isnull\",\"authorization_flow__slug__iexact\":\"authorization_flow__slug__iexact\",\"base_dn__iexact\":\"base_dn__iexact\",\"certificate__kp_uuid__iexact\":\"certificate__kp_uuid__iexact\",\"certificate__name__iexact\":\"certificate__name__iexact\",\"gid_start_number__iexact\":\"gid_start_number__iexact\",\"name__iexact\":\"name__iexact\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"search_group__group_uuid__iexact\":\"search_group__group_uuid__iexact\",\"search_group__name__iexact\":\"search_group__name__iexact\",\"tls_server_name__iexact\":\"tls_server_name__iexact\",\"uid_start_number__iexact\":\"uid_start_number__iexact\"}")
  """LDAPProvider Viewset"""
  providers_ldap_retrieve(
    """A unique integer value identifying this LDAP Provider."""
    id: Int!
  ): providers_ldap_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/ldap/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  providers_ldap_used_by_list(
    """A unique integer value identifying this LDAP Provider."""
    id: Int!
  ): [providers_ldap_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/providers/ldap/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """OAuth2Provider Viewset"""
  providers_oauth2_list(
    access_code_validity: String
    access_token_validity: String
    application: UUID
    authorization_flow: UUID
    client_id: String
    client_type: queryInput_providers_oauth2_list_client_type
    include_claims_in_id_token: Boolean
    issuer_mode: queryInput_providers_oauth2_list_issuer_mode
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    property_mappings: [UUID]
    redirect_uris: String
    refresh_token_validity: String
    """A search term."""
    search: String
    signing_key: UUID
    sub_mode: queryInput_providers_oauth2_list_sub_mode
  ): providers_oauth2_list_response @httpOperation(subgraph: "Authentik", path: "/providers/oauth2/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"access_code_validity\":\"access_code_validity\",\"access_token_validity\":\"access_token_validity\",\"application\":\"application\",\"authorization_flow\":\"authorization_flow\",\"client_id\":\"client_id\",\"client_type\":\"client_type\",\"include_claims_in_id_token\":\"include_claims_in_id_token\",\"issuer_mode\":\"issuer_mode\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"property_mappings\":\"property_mappings\",\"redirect_uris\":\"redirect_uris\",\"refresh_token_validity\":\"refresh_token_validity\",\"search\":\"search\",\"signing_key\":\"signing_key\",\"sub_mode\":\"sub_mode\"}", queryStringOptionsByParam: "{\"property_mappings\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """OAuth2Provider Viewset"""
  providers_oauth2_retrieve(
    """A unique integer value identifying this OAuth2/OpenID Provider."""
    id: Int!
  ): providers_oauth2_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/oauth2/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Preview user data for provider"""
  providers_oauth2_preview_user_retrieve(
    """A unique integer value identifying this OAuth2/OpenID Provider."""
    id: Int!
    for_user: Int
  ): providers_oauth2_preview_user_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/oauth2/{args.id}/preview_user/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"for_user\":\"for_user\"}")
  """Get Providers setup URLs"""
  providers_oauth2_setup_urls_retrieve(
    """A unique integer value identifying this OAuth2/OpenID Provider."""
    id: Int!
  ): providers_oauth2_setup_urls_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/oauth2/{args.id}/setup_urls/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  providers_oauth2_used_by_list(
    """A unique integer value identifying this OAuth2/OpenID Provider."""
    id: Int!
  ): [providers_oauth2_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/providers/oauth2/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """ProxyProvider Viewset"""
  providers_proxy_list(
    application__isnull: Boolean
    authorization_flow__slug__iexact: String
    basic_auth_enabled__iexact: Boolean
    basic_auth_password_attribute__iexact: String
    basic_auth_user_attribute__iexact: String
    certificate__kp_uuid__iexact: UUID
    certificate__name__iexact: String
    cookie_domain__iexact: String
    external_host__iexact: String
    internal_host__iexact: String
    internal_host_ssl_validation__iexact: Boolean
    mode__iexact: String
    name__iexact: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    property_mappings__iexact: [UUID]
    redirect_uris__iexact: String
    """A search term."""
    search: String
    skip_path_regex__iexact: String
  ): providers_proxy_list_response @httpOperation(subgraph: "Authentik", path: "/providers/proxy/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"application__isnull\":\"application__isnull\",\"authorization_flow__slug__iexact\":\"authorization_flow__slug__iexact\",\"basic_auth_enabled__iexact\":\"basic_auth_enabled__iexact\",\"basic_auth_password_attribute__iexact\":\"basic_auth_password_attribute__iexact\",\"basic_auth_user_attribute__iexact\":\"basic_auth_user_attribute__iexact\",\"certificate__kp_uuid__iexact\":\"certificate__kp_uuid__iexact\",\"certificate__name__iexact\":\"certificate__name__iexact\",\"cookie_domain__iexact\":\"cookie_domain__iexact\",\"external_host__iexact\":\"external_host__iexact\",\"internal_host__iexact\":\"internal_host__iexact\",\"internal_host_ssl_validation__iexact\":\"internal_host_ssl_validation__iexact\",\"mode__iexact\":\"mode__iexact\",\"name__iexact\":\"name__iexact\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"property_mappings__iexact\":\"property_mappings__iexact\",\"redirect_uris__iexact\":\"redirect_uris__iexact\",\"search\":\"search\",\"skip_path_regex__iexact\":\"skip_path_regex__iexact\"}", queryStringOptionsByParam: "{\"property_mappings__iexact\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """ProxyProvider Viewset"""
  providers_proxy_retrieve(
    """A unique integer value identifying this Proxy Provider."""
    id: Int!
  ): providers_proxy_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/proxy/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  providers_proxy_used_by_list(
    """A unique integer value identifying this Proxy Provider."""
    id: Int!
  ): [providers_proxy_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/providers/proxy/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """RACProvider Viewset"""
  providers_rac_list(
    application__isnull: Boolean
    name__iexact: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): providers_rac_list_response @httpOperation(subgraph: "Authentik", path: "/providers/rac/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"application__isnull\":\"application__isnull\",\"name__iexact\":\"name__iexact\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """RACProvider Viewset"""
  providers_rac_retrieve(
    """A unique integer value identifying this RAC Provider."""
    id: Int!
  ): providers_rac_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/rac/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  providers_rac_used_by_list(
    """A unique integer value identifying this RAC Provider."""
    id: Int!
  ): [providers_rac_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/providers/rac/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """RadiusProvider Viewset"""
  providers_radius_list(
    application__isnull: Boolean
    authorization_flow__slug__iexact: String
    client_networks__iexact: String
    name__iexact: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): providers_radius_list_response @httpOperation(subgraph: "Authentik", path: "/providers/radius/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"application__isnull\":\"application__isnull\",\"authorization_flow__slug__iexact\":\"authorization_flow__slug__iexact\",\"client_networks__iexact\":\"client_networks__iexact\",\"name__iexact\":\"name__iexact\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """RadiusProvider Viewset"""
  providers_radius_retrieve(
    """A unique integer value identifying this Radius Provider."""
    id: Int!
  ): providers_radius_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/radius/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  providers_radius_used_by_list(
    """A unique integer value identifying this Radius Provider."""
    id: Int!
  ): [providers_radius_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/providers/radius/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """SAMLProvider Viewset"""
  providers_saml_list(
    acs_url: String
    assertion_valid_not_before: String
    assertion_valid_not_on_or_after: String
    audience: String
    authentication_flow: UUID
    authorization_flow: UUID
    backchannel_application: UUID
    default_relay_state: String
    digest_algorithm: queryInput_providers_saml_list_digest_algorithm
    is_backchannel: Boolean
    issuer: String
    name: String
    name_id_mapping: UUID
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    property_mappings: [UUID]
    """A search term."""
    search: String
    session_valid_not_on_or_after: String
    signature_algorithm: queryInput_providers_saml_list_signature_algorithm
    signing_kp: UUID
    sp_binding: queryInput_providers_saml_list_sp_binding
    verification_kp: UUID
  ): providers_saml_list_response @httpOperation(subgraph: "Authentik", path: "/providers/saml/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"acs_url\":\"acs_url\",\"assertion_valid_not_before\":\"assertion_valid_not_before\",\"assertion_valid_not_on_or_after\":\"assertion_valid_not_on_or_after\",\"audience\":\"audience\",\"authentication_flow\":\"authentication_flow\",\"authorization_flow\":\"authorization_flow\",\"backchannel_application\":\"backchannel_application\",\"default_relay_state\":\"default_relay_state\",\"digest_algorithm\":\"digest_algorithm\",\"is_backchannel\":\"is_backchannel\",\"issuer\":\"issuer\",\"name\":\"name\",\"name_id_mapping\":\"name_id_mapping\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"property_mappings\":\"property_mappings\",\"search\":\"search\",\"session_valid_not_on_or_after\":\"session_valid_not_on_or_after\",\"signature_algorithm\":\"signature_algorithm\",\"signing_kp\":\"signing_kp\",\"sp_binding\":\"sp_binding\",\"verification_kp\":\"verification_kp\"}", queryStringOptionsByParam: "{\"property_mappings\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """SAMLProvider Viewset"""
  providers_saml_retrieve(
    """A unique integer value identifying this SAML Provider."""
    id: Int!
  ): providers_saml_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/saml/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Return metadata as XML string"""
  providers_saml_metadata_retrieve(
    """A unique integer value identifying this SAML Provider."""
    id: Int!
    download: Boolean
    force_binding: queryInput_providers_saml_metadata_retrieve_force_binding
  ): providers_saml_metadata_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/saml/{args.id}/metadata/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"download\":\"download\",\"force_binding\":\"force_binding\"}")
  """Preview user data for provider"""
  providers_saml_preview_user_retrieve(
    """A unique integer value identifying this SAML Provider."""
    id: Int!
    for_user: Int
  ): providers_saml_preview_user_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/saml/{args.id}/preview_user/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"for_user\":\"for_user\"}")
  """Get a list of all objects that use this object"""
  providers_saml_used_by_list(
    """A unique integer value identifying this SAML Provider."""
    id: Int!
  ): [providers_saml_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/providers/saml/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """SCIMProvider Viewset"""
  providers_scim_list(
    exclude_users_service_account: Boolean
    filter_group: UUID
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    url: String
  ): providers_scim_list_response @httpOperation(subgraph: "Authentik", path: "/providers/scim/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"exclude_users_service_account\":\"exclude_users_service_account\",\"filter_group\":\"filter_group\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"url\":\"url\"}")
  """SCIMProvider Viewset"""
  providers_scim_retrieve(
    """A unique integer value identifying this SCIM Provider."""
    id: Int!
  ): providers_scim_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/scim/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get provider's sync status"""
  providers_scim_sync_status_retrieve(
    """A unique integer value identifying this SCIM Provider."""
    id: Int!
  ): providers_scim_sync_status_retrieve_response @httpOperation(subgraph: "Authentik", path: "/providers/scim/{args.id}/sync_status/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  providers_scim_used_by_list(
    """A unique integer value identifying this SCIM Provider."""
    id: Int!
  ): [providers_scim_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/providers/scim/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """ConnectionToken Viewset"""
  rac_connection_tokens_list(
    endpoint: UUID
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    provider: Int
    """A search term."""
    search: String
    session__user: Int
  ): rac_connection_tokens_list_response @httpOperation(subgraph: "Authentik", path: "/rac/connection_tokens/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"endpoint\":\"endpoint\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"provider\":\"provider\",\"search\":\"search\",\"session__user\":\"session__user\"}")
  """ConnectionToken Viewset"""
  rac_connection_tokens_retrieve(
    """A UUID string identifying this RAC Connection token."""
    connection_token_uuid: UUID!
  ): rac_connection_tokens_retrieve_response @httpOperation(subgraph: "Authentik", path: "/rac/connection_tokens/{args.connection_token_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  rac_connection_tokens_used_by_list(
    """A UUID string identifying this RAC Connection token."""
    connection_token_uuid: UUID!
  ): [rac_connection_tokens_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/rac/connection_tokens/{args.connection_token_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """List accessible endpoints"""
  rac_endpoints_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    provider: Int
    search: String
    superuser_full_list: Boolean
  ): rac_endpoints_list_response @httpOperation(subgraph: "Authentik", path: "/rac/endpoints/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"provider\":\"provider\",\"search\":\"search\",\"superuser_full_list\":\"superuser_full_list\"}")
  """Endpoint Viewset"""
  rac_endpoints_retrieve(
    """A UUID string identifying this RAC Endpoint."""
    pbm_uuid: UUID!
  ): rac_endpoints_retrieve_response @httpOperation(subgraph: "Authentik", path: "/rac/endpoints/{args.pbm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  rac_endpoints_used_by_list(
    """A UUID string identifying this RAC Endpoint."""
    pbm_uuid: UUID!
  ): [rac_endpoints_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/rac/endpoints/{args.pbm_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Read-only list of all permissions, filterable by model and app"""
  rbac_permissions_list(
    codename: String
    content_type__app_label: String
    content_type__model: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    role: String
    """A search term."""
    search: String
    user: Int
  ): rbac_permissions_list_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"codename\":\"codename\",\"content_type__app_label\":\"content_type__app_label\",\"content_type__model\":\"content_type__model\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"role\":\"role\",\"search\":\"search\",\"user\":\"user\"}")
  """Read-only list of all permissions, filterable by model and app"""
  rbac_permissions_retrieve(
    """A unique integer value identifying this permission."""
    id: Int!
  ): rbac_permissions_retrieve_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get assigned object permissions for a single object"""
  rbac_permissions_assigned_by_roles_list(
    model: queryInput_rbac_permissions_assigned_by_roles_list_model!
    object_pk: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): rbac_permissions_assigned_by_roles_list_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/assigned_by_roles/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"model\":\"model\",\"object_pk\":\"object_pk\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Get assigned object permissions for a single object"""
  rbac_permissions_assigned_by_users_list(
    model: queryInput_rbac_permissions_assigned_by_users_list_model!
    object_pk: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): rbac_permissions_assigned_by_users_list_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/assigned_by_users/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"model\":\"model\",\"object_pk\":\"object_pk\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Get a role's assigned object permissions"""
  rbac_permissions_roles_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    uuid: UUID!
  ): rbac_permissions_roles_list_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/roles/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"uuid\":\"uuid\"}")
  """Get a users's assigned object permissions"""
  rbac_permissions_users_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    user_id: Int!
  ): rbac_permissions_users_list_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/users/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"user_id\":\"user_id\"}")
  """Role viewset"""
  rbac_roles_list(
    group__name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): rbac_roles_list_response @httpOperation(subgraph: "Authentik", path: "/rbac/roles/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"group__name\":\"group__name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Role viewset"""
  rbac_roles_retrieve(
    """A UUID string identifying this Role."""
    uuid: UUID!
  ): rbac_roles_retrieve_response @httpOperation(subgraph: "Authentik", path: "/rbac/roles/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  rbac_roles_used_by_list(
    """A UUID string identifying this Role."""
    uuid: UUID!
  ): [rbac_roles_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/rbac/roles/{args.uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Retrieve public configuration options"""
  root_config_retrieve: root_config_retrieve_response @httpOperation(subgraph: "Authentik", path: "/root/config/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """
  OpenApi3 schema for this API. Format can be selected via content negotiation.
  
  - YAML: application/vnd.oai.openapi
  - JSON: application/vnd.oai.openapi+json
  """
  schema_retrieve(format: queryInput_schema_retrieve_format, lang: queryInput_schema_retrieve_lang): schema_retrieve_response @httpOperation(subgraph: "Authentik", path: "/schema/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"format\":\"format\",\"lang\":\"lang\"}")
  """Source Viewset"""
  sources_all_list(
    managed: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    slug: String
  ): sources_all_list_response @httpOperation(subgraph: "Authentik", path: "/sources/all/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"managed\":\"managed\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"slug\":\"slug\"}")
  """Source Viewset"""
  sources_all_retrieve(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_all_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/all/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_all_used_by_list(
    """Internal source name, used in URLs."""
    slug: String!
  ): [sources_all_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/all/{args.slug}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all creatable source types"""
  sources_all_types_list: [sources_all_types_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/all/types/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all sources the user can configure"""
  sources_all_user_settings_list: [sources_all_user_settings_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/all/user_settings/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """LDAP Source Viewset"""
  sources_ldap_list(
    additional_group_dn: String
    additional_user_dn: String
    base_dn: String
    bind_cn: String
    client_certificate: UUID
    enabled: Boolean
    group_membership_field: String
    group_object_filter: String
    name: String
    object_uniqueness_field: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    password_login_update_internal_password: Boolean
    peer_certificate: UUID
    property_mappings: [UUID]
    property_mappings_group: [UUID]
    """A search term."""
    search: String
    server_uri: String
    slug: String
    sni: Boolean
    start_tls: Boolean
    sync_groups: Boolean
    sync_parent_group: UUID
    sync_users: Boolean
    sync_users_password: Boolean
    user_object_filter: String
  ): sources_ldap_list_response @httpOperation(subgraph: "Authentik", path: "/sources/ldap/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"additional_group_dn\":\"additional_group_dn\",\"additional_user_dn\":\"additional_user_dn\",\"base_dn\":\"base_dn\",\"bind_cn\":\"bind_cn\",\"client_certificate\":\"client_certificate\",\"enabled\":\"enabled\",\"group_membership_field\":\"group_membership_field\",\"group_object_filter\":\"group_object_filter\",\"name\":\"name\",\"object_uniqueness_field\":\"object_uniqueness_field\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"password_login_update_internal_password\":\"password_login_update_internal_password\",\"peer_certificate\":\"peer_certificate\",\"property_mappings\":\"property_mappings\",\"property_mappings_group\":\"property_mappings_group\",\"search\":\"search\",\"server_uri\":\"server_uri\",\"slug\":\"slug\",\"sni\":\"sni\",\"start_tls\":\"start_tls\",\"sync_groups\":\"sync_groups\",\"sync_parent_group\":\"sync_parent_group\",\"sync_users\":\"sync_users\",\"sync_users_password\":\"sync_users_password\",\"user_object_filter\":\"user_object_filter\"}", queryStringOptionsByParam: "{\"property_mappings\":{\"arrayFormat\":\"repeat\",\"destructObject\":true},\"property_mappings_group\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """LDAP Source Viewset"""
  sources_ldap_retrieve(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_ldap_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/ldap/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get raw LDAP data to debug"""
  sources_ldap_debug_retrieve(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_ldap_debug_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/ldap/{args.slug}/debug/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get source's sync status"""
  sources_ldap_sync_status_retrieve(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_ldap_sync_status_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/ldap/{args.slug}/sync_status/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_ldap_used_by_list(
    """Internal source name, used in URLs."""
    slug: String!
  ): [sources_ldap_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/ldap/{args.slug}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Source Viewset"""
  sources_oauth_list(
    access_token_url: String
    additional_scopes: String
    authentication_flow: UUID
    authorization_url: String
    consumer_key: String
    enabled: Boolean
    enrollment_flow: UUID
    """Only return sources with JWKS data"""
    has_jwks: Boolean
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    policy_engine_mode: queryInput_sources_oauth_list_policy_engine_mode
    profile_url: String
    provider_type: String
    request_token_url: String
    """A search term."""
    search: String
    slug: String
    user_matching_mode: queryInput_sources_oauth_list_user_matching_mode
  ): sources_oauth_list_response @httpOperation(subgraph: "Authentik", path: "/sources/oauth/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"access_token_url\":\"access_token_url\",\"additional_scopes\":\"additional_scopes\",\"authentication_flow\":\"authentication_flow\",\"authorization_url\":\"authorization_url\",\"consumer_key\":\"consumer_key\",\"enabled\":\"enabled\",\"enrollment_flow\":\"enrollment_flow\",\"has_jwks\":\"has_jwks\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"policy_engine_mode\":\"policy_engine_mode\",\"profile_url\":\"profile_url\",\"provider_type\":\"provider_type\",\"request_token_url\":\"request_token_url\",\"search\":\"search\",\"slug\":\"slug\",\"user_matching_mode\":\"user_matching_mode\"}")
  """Source Viewset"""
  sources_oauth_retrieve(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_oauth_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/oauth/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_oauth_used_by_list(
    """Internal source name, used in URLs."""
    slug: String!
  ): [sources_oauth_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/oauth/{args.slug}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """
  Get all creatable source types. If ?name is set, only returns the type for <name>.
  If <name> isn't found, returns the default type.
  """
  sources_oauth_source_types_list(name: String): [sources_oauth_source_types_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/oauth/source_types/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\"}")
  """Plex source Viewset"""
  sources_plex_list(
    allow_friends: Boolean
    authentication_flow: UUID
    client_id: String
    enabled: Boolean
    enrollment_flow: UUID
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    policy_engine_mode: queryInput_sources_plex_list_policy_engine_mode
    """A search term."""
    search: String
    slug: String
    user_matching_mode: queryInput_sources_plex_list_user_matching_mode
  ): sources_plex_list_response @httpOperation(subgraph: "Authentik", path: "/sources/plex/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"allow_friends\":\"allow_friends\",\"authentication_flow\":\"authentication_flow\",\"client_id\":\"client_id\",\"enabled\":\"enabled\",\"enrollment_flow\":\"enrollment_flow\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"policy_engine_mode\":\"policy_engine_mode\",\"search\":\"search\",\"slug\":\"slug\",\"user_matching_mode\":\"user_matching_mode\"}")
  """Plex source Viewset"""
  sources_plex_retrieve(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_plex_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/plex/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_plex_used_by_list(
    """Internal source name, used in URLs."""
    slug: String!
  ): [sources_plex_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/plex/{args.slug}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """SAMLSource Viewset"""
  sources_saml_list(
    allow_idp_initiated: Boolean
    authentication_flow: UUID
    binding_type: queryInput_sources_saml_list_binding_type
    digest_algorithm: queryInput_sources_saml_list_digest_algorithm
    enabled: Boolean
    enrollment_flow: UUID
    issuer: String
    managed: String
    name: String
    name_id_policy: queryInput_sources_saml_list_name_id_policy
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    policy_engine_mode: queryInput_sources_saml_list_policy_engine_mode
    pre_authentication_flow: UUID
    """A search term."""
    search: String
    signature_algorithm: queryInput_sources_saml_list_signature_algorithm
    signing_kp: UUID
    slo_url: String
    slug: String
    sso_url: String
    temporary_user_delete_after: String
    user_matching_mode: queryInput_sources_saml_list_user_matching_mode
    verification_kp: UUID
  ): sources_saml_list_response @httpOperation(subgraph: "Authentik", path: "/sources/saml/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"allow_idp_initiated\":\"allow_idp_initiated\",\"authentication_flow\":\"authentication_flow\",\"binding_type\":\"binding_type\",\"digest_algorithm\":\"digest_algorithm\",\"enabled\":\"enabled\",\"enrollment_flow\":\"enrollment_flow\",\"issuer\":\"issuer\",\"managed\":\"managed\",\"name\":\"name\",\"name_id_policy\":\"name_id_policy\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"policy_engine_mode\":\"policy_engine_mode\",\"pre_authentication_flow\":\"pre_authentication_flow\",\"search\":\"search\",\"signature_algorithm\":\"signature_algorithm\",\"signing_kp\":\"signing_kp\",\"slo_url\":\"slo_url\",\"slug\":\"slug\",\"sso_url\":\"sso_url\",\"temporary_user_delete_after\":\"temporary_user_delete_after\",\"user_matching_mode\":\"user_matching_mode\",\"verification_kp\":\"verification_kp\"}")
  """SAMLSource Viewset"""
  sources_saml_retrieve(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_saml_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/saml/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Return metadata as XML string"""
  sources_saml_metadata_retrieve(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_saml_metadata_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/saml/{args.slug}/metadata/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_saml_used_by_list(
    """Internal source name, used in URLs."""
    slug: String!
  ): [sources_saml_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/saml/{args.slug}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """SCIMSource Viewset"""
  sources_scim_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    slug: String
  ): sources_scim_list_response @httpOperation(subgraph: "Authentik", path: "/sources/scim/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"slug\":\"slug\"}")
  """SCIMSource Viewset"""
  sources_scim_retrieve(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_scim_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/scim/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_scim_used_by_list(
    """Internal source name, used in URLs."""
    slug: String!
  ): [sources_scim_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/scim/{args.slug}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """SCIMSourceGroup Viewset"""
  sources_scim_groups_list(
    group__group_uuid: UUID
    group__name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    source__slug: String
  ): sources_scim_groups_list_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_groups/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"group__group_uuid\":\"group__group_uuid\",\"group__name\":\"group__name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"source__slug\":\"source__slug\"}")
  """SCIMSourceGroup Viewset"""
  sources_scim_groups_retrieve(
    """A unique value identifying this scim source group."""
    id: String!
  ): sources_scim_groups_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_groups/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_scim_groups_used_by_list(
    """A unique value identifying this scim source group."""
    id: String!
  ): [sources_scim_groups_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/scim_groups/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """SCIMSourceUser Viewset"""
  sources_scim_users_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    source__slug: String
    user__id: Int
    user__username: String
  ): sources_scim_users_list_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_users/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"source__slug\":\"source__slug\",\"user__id\":\"user__id\",\"user__username\":\"user__username\"}")
  """SCIMSourceUser Viewset"""
  sources_scim_users_retrieve(
    """A unique value identifying this scim source user."""
    id: String!
  ): sources_scim_users_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_users/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_scim_users_used_by_list(
    """A unique value identifying this scim source user."""
    id: String!
  ): [sources_scim_users_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/scim_users/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """User-source connection Viewset"""
  sources_user_connections_all_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    user: Int
  ): sources_user_connections_all_list_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/all/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"user\":\"user\"}")
  """User-source connection Viewset"""
  sources_user_connections_all_retrieve(
    """A unique integer value identifying this user source connection."""
    id: Int!
  ): sources_user_connections_all_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/all/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_user_connections_all_used_by_list(
    """A unique integer value identifying this user source connection."""
    id: Int!
  ): [sources_user_connections_all_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/all/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Source Viewset"""
  sources_user_connections_oauth_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    source__slug: String
  ): sources_user_connections_oauth_list_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/oauth/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"source__slug\":\"source__slug\"}")
  """Source Viewset"""
  sources_user_connections_oauth_retrieve(
    """A unique integer value identifying this User OAuth Source Connection."""
    id: Int!
  ): sources_user_connections_oauth_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/oauth/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_user_connections_oauth_used_by_list(
    """A unique integer value identifying this User OAuth Source Connection."""
    id: Int!
  ): [sources_user_connections_oauth_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/oauth/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Plex Source connection Serializer"""
  sources_user_connections_plex_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    source__slug: String
  ): sources_user_connections_plex_list_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/plex/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"source__slug\":\"source__slug\"}")
  """Plex Source connection Serializer"""
  sources_user_connections_plex_retrieve(
    """A unique integer value identifying this User Plex Source Connection."""
    id: Int!
  ): sources_user_connections_plex_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/plex/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_user_connections_plex_used_by_list(
    """A unique integer value identifying this User Plex Source Connection."""
    id: Int!
  ): [sources_user_connections_plex_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/plex/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Source Viewset"""
  sources_user_connections_saml_list(
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    source__slug: String
  ): sources_user_connections_saml_list_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/saml/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"source__slug\":\"source__slug\"}")
  """Source Viewset"""
  sources_user_connections_saml_retrieve(
    """A unique integer value identifying this User SAML Source Connection."""
    id: Int!
  ): sources_user_connections_saml_retrieve_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/saml/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  sources_user_connections_saml_used_by_list(
    """A unique integer value identifying this User SAML Source Connection."""
    id: Int!
  ): [sources_user_connections_saml_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/saml/{args.id}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Stage Viewset"""
  stages_all_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): stages_all_list_response @httpOperation(subgraph: "Authentik", path: "/stages/all/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Stage Viewset"""
  stages_all_retrieve(
    """A UUID string identifying this stage."""
    stage_uuid: UUID!
  ): stages_all_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/all/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_all_used_by_list(
    """A UUID string identifying this stage."""
    stage_uuid: UUID!
  ): [stages_all_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/all/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all creatable stage types"""
  stages_all_types_list: [stages_all_types_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/all/types/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all stages the user can configure"""
  stages_all_user_settings_list: [stages_all_user_settings_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/all/user_settings/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """AuthenticatorDuoStage Viewset"""
  stages_authenticator_duo_list(
    api_hostname: String
    client_id: String
    configure_flow: UUID
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): stages_authenticator_duo_list_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"api_hostname\":\"api_hostname\",\"client_id\":\"client_id\",\"configure_flow\":\"configure_flow\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """AuthenticatorDuoStage Viewset"""
  stages_authenticator_duo_retrieve(
    """A UUID string identifying this Duo Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_duo_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_authenticator_duo_used_by_list(
    """A UUID string identifying this Duo Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): [stages_authenticator_duo_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """AuthenticatorSMSStage Viewset"""
  stages_authenticator_sms_list(
    account_sid: String
    auth: String
    auth_password: String
    auth_type: queryInput_stages_authenticator_sms_list_auth_type
    configure_flow: UUID
    friendly_name: String
    from_number: String
    mapping: UUID
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    provider: queryInput_stages_authenticator_sms_list_provider
    """A search term."""
    search: String
    stage_uuid: UUID
    verify_only: Boolean
  ): stages_authenticator_sms_list_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/sms/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"account_sid\":\"account_sid\",\"auth\":\"auth\",\"auth_password\":\"auth_password\",\"auth_type\":\"auth_type\",\"configure_flow\":\"configure_flow\",\"friendly_name\":\"friendly_name\",\"from_number\":\"from_number\",\"mapping\":\"mapping\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"provider\":\"provider\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\",\"verify_only\":\"verify_only\"}")
  """AuthenticatorSMSStage Viewset"""
  stages_authenticator_sms_retrieve(
    """A UUID string identifying this SMS Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_sms_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/sms/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_authenticator_sms_used_by_list(
    """A UUID string identifying this SMS Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): [stages_authenticator_sms_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/sms/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """AuthenticatorStaticStage Viewset"""
  stages_authenticator_static_list(
    configure_flow: UUID
    friendly_name: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
    token_count: Int
    token_length: Int
  ): stages_authenticator_static_list_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/static/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"configure_flow\":\"configure_flow\",\"friendly_name\":\"friendly_name\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\",\"token_count\":\"token_count\",\"token_length\":\"token_length\"}")
  """AuthenticatorStaticStage Viewset"""
  stages_authenticator_static_retrieve(
    """A UUID string identifying this Static Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_static_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/static/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_authenticator_static_used_by_list(
    """A UUID string identifying this Static Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): [stages_authenticator_static_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/static/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """AuthenticatorTOTPStage Viewset"""
  stages_authenticator_totp_list(
    configure_flow: UUID
    digits: queryInput_stages_authenticator_totp_list_digits
    friendly_name: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
  ): stages_authenticator_totp_list_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/totp/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"configure_flow\":\"configure_flow\",\"digits\":\"digits\",\"friendly_name\":\"friendly_name\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\"}")
  """AuthenticatorTOTPStage Viewset"""
  stages_authenticator_totp_retrieve(
    """A UUID string identifying this TOTP Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_totp_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/totp/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_authenticator_totp_used_by_list(
    """A UUID string identifying this TOTP Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): [stages_authenticator_totp_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/totp/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """AuthenticatorValidateStage Viewset"""
  stages_authenticator_validate_list(
    configuration_stages: [UUID]
    name: String
    not_configured_action: queryInput_stages_authenticator_validate_list_not_configured_action
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): stages_authenticator_validate_list_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/validate/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"configuration_stages\":\"configuration_stages\",\"name\":\"name\",\"not_configured_action\":\"not_configured_action\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}", queryStringOptionsByParam: "{\"configuration_stages\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """AuthenticatorValidateStage Viewset"""
  stages_authenticator_validate_retrieve(
    """A UUID string identifying this Authenticator Validation Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_validate_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/validate/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_authenticator_validate_used_by_list(
    """A UUID string identifying this Authenticator Validation Stage."""
    stage_uuid: UUID!
  ): [stages_authenticator_validate_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/validate/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """AuthenticatorWebAuthnStage Viewset"""
  stages_authenticator_webauthn_list(
    authenticator_attachment: queryInput_stages_authenticator_webauthn_list_authenticator_attachment
    configure_flow: UUID
    device_type_restrictions: [UUID]
    friendly_name: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    resident_key_requirement: queryInput_stages_authenticator_webauthn_list_resident_key_requirement
    """A search term."""
    search: String
    stage_uuid: UUID
    user_verification: queryInput_stages_authenticator_webauthn_list_user_verification
  ): stages_authenticator_webauthn_list_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/webauthn/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"authenticator_attachment\":\"authenticator_attachment\",\"configure_flow\":\"configure_flow\",\"device_type_restrictions\":\"device_type_restrictions\",\"friendly_name\":\"friendly_name\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"resident_key_requirement\":\"resident_key_requirement\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\",\"user_verification\":\"user_verification\"}", queryStringOptionsByParam: "{\"device_type_restrictions\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """AuthenticatorWebAuthnStage Viewset"""
  stages_authenticator_webauthn_retrieve(
    """A UUID string identifying this WebAuthn Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_webauthn_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/webauthn/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_authenticator_webauthn_used_by_list(
    """A UUID string identifying this WebAuthn Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): [stages_authenticator_webauthn_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/webauthn/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """WebAuthnDeviceType Viewset"""
  stages_authenticator_webauthn_device_types_list(
    aaguid: UUID
    description: String
    icon: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): stages_authenticator_webauthn_device_types_list_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/webauthn_device_types/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"aaguid\":\"aaguid\",\"description\":\"description\",\"icon\":\"icon\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """WebAuthnDeviceType Viewset"""
  stages_authenticator_webauthn_device_types_retrieve(
    """A UUID string identifying this WebAuthn Device type."""
    aaguid: UUID!
  ): stages_authenticator_webauthn_device_types_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/webauthn_device_types/{args.aaguid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """CaptchaStage Viewset"""
  stages_captcha_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    public_key: String
    """A search term."""
    search: String
  ): stages_captcha_list_response @httpOperation(subgraph: "Authentik", path: "/stages/captcha/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"public_key\":\"public_key\",\"search\":\"search\"}")
  """CaptchaStage Viewset"""
  stages_captcha_retrieve(
    """A UUID string identifying this Captcha Stage."""
    stage_uuid: UUID!
  ): stages_captcha_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/captcha/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_captcha_used_by_list(
    """A UUID string identifying this Captcha Stage."""
    stage_uuid: UUID!
  ): [stages_captcha_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/captcha/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """ConsentStage Viewset"""
  stages_consent_list(
    consent_expire_in: String
    mode: queryInput_stages_consent_list_mode
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
  ): stages_consent_list_response @httpOperation(subgraph: "Authentik", path: "/stages/consent/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"consent_expire_in\":\"consent_expire_in\",\"mode\":\"mode\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\"}")
  """ConsentStage Viewset"""
  stages_consent_retrieve(
    """A UUID string identifying this Consent Stage."""
    stage_uuid: UUID!
  ): stages_consent_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/consent/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_consent_used_by_list(
    """A UUID string identifying this Consent Stage."""
    stage_uuid: UUID!
  ): [stages_consent_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/consent/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """DenyStage Viewset"""
  stages_deny_list(
    deny_message: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
  ): stages_deny_list_response @httpOperation(subgraph: "Authentik", path: "/stages/deny/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"deny_message\":\"deny_message\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\"}")
  """DenyStage Viewset"""
  stages_deny_retrieve(
    """A UUID string identifying this Deny Stage."""
    stage_uuid: UUID!
  ): stages_deny_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/deny/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_deny_used_by_list(
    """A UUID string identifying this Deny Stage."""
    stage_uuid: UUID!
  ): [stages_deny_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/deny/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """DummyStage Viewset"""
  stages_dummy_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
    throw_error: Boolean
  ): stages_dummy_list_response @httpOperation(subgraph: "Authentik", path: "/stages/dummy/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\",\"throw_error\":\"throw_error\"}")
  """DummyStage Viewset"""
  stages_dummy_retrieve(
    """A UUID string identifying this Dummy Stage."""
    stage_uuid: UUID!
  ): stages_dummy_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/dummy/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_dummy_used_by_list(
    """A UUID string identifying this Dummy Stage."""
    stage_uuid: UUID!
  ): [stages_dummy_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/dummy/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """EmailStage Viewset"""
  stages_email_list(
    activate_user_on_success: Boolean
    from_address: String
    host: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    port: Int
    """A search term."""
    search: String
    subject: String
    template: String
    timeout: Int
    token_expiry: Int
    use_global_settings: Boolean
    use_ssl: Boolean
    use_tls: Boolean
    username: String
  ): stages_email_list_response @httpOperation(subgraph: "Authentik", path: "/stages/email/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"activate_user_on_success\":\"activate_user_on_success\",\"from_address\":\"from_address\",\"host\":\"host\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"port\":\"port\",\"search\":\"search\",\"subject\":\"subject\",\"template\":\"template\",\"timeout\":\"timeout\",\"token_expiry\":\"token_expiry\",\"use_global_settings\":\"use_global_settings\",\"use_ssl\":\"use_ssl\",\"use_tls\":\"use_tls\",\"username\":\"username\"}")
  """EmailStage Viewset"""
  stages_email_retrieve(
    """A UUID string identifying this Email Stage."""
    stage_uuid: UUID!
  ): stages_email_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/email/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_email_used_by_list(
    """A UUID string identifying this Email Stage."""
    stage_uuid: UUID!
  ): [stages_email_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/email/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get all available templates, including custom templates"""
  stages_email_templates_list: [stages_email_templates_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/email/templates/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """IdentificationStage Viewset"""
  stages_identification_list(
    case_insensitive_matching: Boolean
    enrollment_flow: UUID
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    password_stage: UUID
    passwordless_flow: UUID
    recovery_flow: UUID
    """A search term."""
    search: String
    show_matched_user: Boolean
    show_source_labels: Boolean
  ): stages_identification_list_response @httpOperation(subgraph: "Authentik", path: "/stages/identification/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"case_insensitive_matching\":\"case_insensitive_matching\",\"enrollment_flow\":\"enrollment_flow\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"password_stage\":\"password_stage\",\"passwordless_flow\":\"passwordless_flow\",\"recovery_flow\":\"recovery_flow\",\"search\":\"search\",\"show_matched_user\":\"show_matched_user\",\"show_source_labels\":\"show_source_labels\"}")
  """IdentificationStage Viewset"""
  stages_identification_retrieve(
    """A UUID string identifying this Identification Stage."""
    stage_uuid: UUID!
  ): stages_identification_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/identification/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_identification_used_by_list(
    """A UUID string identifying this Identification Stage."""
    stage_uuid: UUID!
  ): [stages_identification_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/identification/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Invitation Viewset"""
  stages_invitation_invitations_list(
    created_by__username: String
    expires: DateTime
    flow__slug: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): stages_invitation_invitations_list_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/invitations/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"created_by__username\":\"created_by__username\",\"expires\":\"expires\",\"flow__slug\":\"flow__slug\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """Invitation Viewset"""
  stages_invitation_invitations_retrieve(
    """A UUID string identifying this Invitation."""
    invite_uuid: UUID!
  ): stages_invitation_invitations_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/invitations/{args.invite_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_invitation_invitations_used_by_list(
    """A UUID string identifying this Invitation."""
    invite_uuid: UUID!
  ): [stages_invitation_invitations_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/invitation/invitations/{args.invite_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """InvitationStage Viewset"""
  stages_invitation_stages_list(
    continue_flow_without_invitation: Boolean
    name: String
    no_flows: Boolean
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
  ): stages_invitation_stages_list_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/stages/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"continue_flow_without_invitation\":\"continue_flow_without_invitation\",\"name\":\"name\",\"no_flows\":\"no_flows\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\"}")
  """InvitationStage Viewset"""
  stages_invitation_stages_retrieve(
    """A UUID string identifying this Invitation Stage."""
    stage_uuid: UUID!
  ): stages_invitation_stages_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/stages/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_invitation_stages_used_by_list(
    """A UUID string identifying this Invitation Stage."""
    stage_uuid: UUID!
  ): [stages_invitation_stages_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/invitation/stages/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """PasswordStage Viewset"""
  stages_password_list(
    configure_flow: UUID
    failed_attempts_before_cancel: Int
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
  ): stages_password_list_response @httpOperation(subgraph: "Authentik", path: "/stages/password/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"configure_flow\":\"configure_flow\",\"failed_attempts_before_cancel\":\"failed_attempts_before_cancel\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\"}")
  """PasswordStage Viewset"""
  stages_password_retrieve(
    """A UUID string identifying this Password Stage."""
    stage_uuid: UUID!
  ): stages_password_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/password/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_password_used_by_list(
    """A UUID string identifying this Password Stage."""
    stage_uuid: UUID!
  ): [stages_password_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/password/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Prompt Viewset"""
  stages_prompt_prompts_list(
    field_key: String
    label: String
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    placeholder: String
    """A search term."""
    search: String
    type: queryInput_stages_prompt_prompts_list_type
  ): stages_prompt_prompts_list_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/prompts/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"field_key\":\"field_key\",\"label\":\"label\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"placeholder\":\"placeholder\",\"search\":\"search\",\"type\":\"type\"}")
  """Prompt Viewset"""
  stages_prompt_prompts_retrieve(
    """A UUID string identifying this Prompt."""
    prompt_uuid: UUID!
  ): stages_prompt_prompts_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/prompts/{args.prompt_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_prompt_prompts_used_by_list(
    """A UUID string identifying this Prompt."""
    prompt_uuid: UUID!
  ): [stages_prompt_prompts_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/prompt/prompts/{args.prompt_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """PromptStage Viewset"""
  stages_prompt_stages_list(
    fields: [UUID]
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
    validation_policies: [UUID]
  ): stages_prompt_stages_list_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/stages/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"fields\":\"fields\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\",\"validation_policies\":\"validation_policies\"}", queryStringOptionsByParam: "{\"fields\":{\"arrayFormat\":\"repeat\",\"destructObject\":true},\"validation_policies\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}")
  """PromptStage Viewset"""
  stages_prompt_stages_retrieve(
    """A UUID string identifying this Prompt Stage."""
    stage_uuid: UUID!
  ): stages_prompt_stages_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/stages/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_prompt_stages_used_by_list(
    """A UUID string identifying this Prompt Stage."""
    stage_uuid: UUID!
  ): [stages_prompt_stages_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/prompt/stages/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """SourceStage Viewset"""
  stages_source_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    resume_timeout: String
    """A search term."""
    search: String
    source: UUID
    stage_uuid: UUID
  ): stages_source_list_response @httpOperation(subgraph: "Authentik", path: "/stages/source/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"resume_timeout\":\"resume_timeout\",\"search\":\"search\",\"source\":\"source\",\"stage_uuid\":\"stage_uuid\"}")
  """SourceStage Viewset"""
  stages_source_retrieve(
    """A UUID string identifying this Source Stage."""
    stage_uuid: UUID!
  ): stages_source_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/source/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_source_used_by_list(
    """A UUID string identifying this Source Stage."""
    stage_uuid: UUID!
  ): [stages_source_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/source/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """UserDeleteStage Viewset"""
  stages_user_delete_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
  ): stages_user_delete_list_response @httpOperation(subgraph: "Authentik", path: "/stages/user_delete/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\"}")
  """UserDeleteStage Viewset"""
  stages_user_delete_retrieve(
    """A UUID string identifying this User Delete Stage."""
    stage_uuid: UUID!
  ): stages_user_delete_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/user_delete/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_user_delete_used_by_list(
    """A UUID string identifying this User Delete Stage."""
    stage_uuid: UUID!
  ): [stages_user_delete_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/user_delete/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """UserLoginStage Viewset"""
  stages_user_login_list(
    geoip_binding: queryInput_stages_user_login_list_geoip_binding
    name: String
    network_binding: queryInput_stages_user_login_list_network_binding
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    remember_me_offset: String
    """A search term."""
    search: String
    session_duration: String
    stage_uuid: UUID
    terminate_other_sessions: Boolean
  ): stages_user_login_list_response @httpOperation(subgraph: "Authentik", path: "/stages/user_login/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"geoip_binding\":\"geoip_binding\",\"name\":\"name\",\"network_binding\":\"network_binding\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"remember_me_offset\":\"remember_me_offset\",\"search\":\"search\",\"session_duration\":\"session_duration\",\"stage_uuid\":\"stage_uuid\",\"terminate_other_sessions\":\"terminate_other_sessions\"}")
  """UserLoginStage Viewset"""
  stages_user_login_retrieve(
    """A UUID string identifying this User Login Stage."""
    stage_uuid: UUID!
  ): stages_user_login_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/user_login/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_user_login_used_by_list(
    """A UUID string identifying this User Login Stage."""
    stage_uuid: UUID!
  ): [stages_user_login_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/user_login/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """UserLogoutStage Viewset"""
  stages_user_logout_list(
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
  ): stages_user_logout_list_response @httpOperation(subgraph: "Authentik", path: "/stages/user_logout/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\"}")
  """UserLogoutStage Viewset"""
  stages_user_logout_retrieve(
    """A UUID string identifying this User Logout Stage."""
    stage_uuid: UUID!
  ): stages_user_logout_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/user_logout/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_user_logout_used_by_list(
    """A UUID string identifying this User Logout Stage."""
    stage_uuid: UUID!
  ): [stages_user_logout_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/user_logout/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """UserWriteStage Viewset"""
  stages_user_write_list(
    create_users_as_inactive: Boolean
    create_users_group: UUID
    name: String
    """Which field to use when ordering the results."""
    ordering: String
    """A page number within the paginated result set."""
    page: Int
    """Number of results to return per page."""
    page_size: Int
    """A search term."""
    search: String
    stage_uuid: UUID
    user_creation_mode: queryInput_stages_user_write_list_user_creation_mode
    user_path_template: String
    user_type: queryInput_stages_user_write_list_user_type
  ): stages_user_write_list_response @httpOperation(subgraph: "Authentik", path: "/stages/user_write/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET, queryParamArgMap: "{\"create_users_as_inactive\":\"create_users_as_inactive\",\"create_users_group\":\"create_users_group\",\"name\":\"name\",\"ordering\":\"ordering\",\"page\":\"page\",\"page_size\":\"page_size\",\"search\":\"search\",\"stage_uuid\":\"stage_uuid\",\"user_creation_mode\":\"user_creation_mode\",\"user_path_template\":\"user_path_template\",\"user_type\":\"user_type\"}")
  """UserWriteStage Viewset"""
  stages_user_write_retrieve(
    """A UUID string identifying this User Write Stage."""
    stage_uuid: UUID!
  ): stages_user_write_retrieve_response @httpOperation(subgraph: "Authentik", path: "/stages/user_write/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  """Get a list of all objects that use this object"""
  stages_user_write_used_by_list(
    """A UUID string identifying this User Write Stage."""
    stage_uuid: UUID!
  ): [stages_user_write_used_by_list_response] @httpOperation(subgraph: "Authentik", path: "/stages/user_write/{args.stage_uuid}/used_by/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
}

union admin_apps_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "App") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = App | ValidationError | GenericError

"""Serialize Application info"""
type App {
  name: String!
  label: String!
}

"""Validation Error"""
type ValidationError {
  non_field_errors: [String]
  code: String
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Generic API Error"""
type GenericError {
  detail: String!
  code: String
}

union admin_metrics_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LoginMetrics") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LoginMetrics | ValidationError | GenericError

"""Login Metrics per 1h"""
type LoginMetrics {
  logins: [Coordinate]!
  logins_failed: [Coordinate]!
  authorizations: [Coordinate]!
}

"""Coordinates for diagrams"""
type Coordinate {
  x_cord: Int!
  y_cord: Int!
}

union admin_models_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "App") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = App | ValidationError | GenericError

union admin_settings_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Settings") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Settings | ValidationError | GenericError

"""Settings Serializer"""
type Settings {
  """Configure how authentik should show avatars for users."""
  avatars: String
  """Enable the ability for users to change their name."""
  default_user_change_name: Boolean
  """Enable the ability for users to change their email address."""
  default_user_change_email: Boolean
  """Enable the ability for users to change their username."""
  default_user_change_username: Boolean
  """
  Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2).
  """
  event_retention: String
  """The option configures the footer links on the flow executor pages."""
  footer_links: JSON
  """
  When enabled, all the events caused by a user will be deleted upon the user's deletion.
  """
  gdpr_compliance: Boolean
  """Globally enable/disable impersonation."""
  impersonation: Boolean
  """Default token duration"""
  default_token_duration: String
  """Default token length"""
  default_token_length: PositiveInt
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

union admin_system_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SystemInfo") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SystemInfo | ValidationError | GenericError

"""Get system information."""
type SystemInfo {
  """Get HTTP Request headers"""
  http_headers: JSON!
  """Get HTTP host"""
  http_host: String!
  """Get HTTP Secure flag"""
  http_is_secure: Boolean!
  runtime: query_admin_system_retrieve_oneOf_0_runtime!
  """Currently active brand"""
  brand: String!
  """Current server time"""
  server_time: DateTime!
  """Whether the embedded outpost is disabled"""
  embedded_outpost_disabled: Boolean!
  """Get the FQDN configured on the embedded outpost"""
  embedded_outpost_host: String!
}

"""Get versions"""
type query_admin_system_retrieve_oneOf_0_runtime {
  python_version: String!
  gunicorn_version: String!
  environment: String!
  architecture: String!
  platform: String!
  uname: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

union admin_version_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Version") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Version | ValidationError | GenericError

"""Get running and latest version."""
type Version {
  """Get current version"""
  version_current: String!
  """Get latest version from cache"""
  version_latest: String!
  """Check if latest version is valid"""
  version_latest_valid: Boolean!
  """Get build hash, if version is not latest or released"""
  build_hash: String!
  """Check if we're running the latest version"""
  outdated: Boolean!
}

union admin_workers_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Workers") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Workers | ValidationError | GenericError

type Workers {
  count: Int!
}

union authenticators_admin_all_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Device") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Device | ValidationError | GenericError

"""Serializer for Duo authenticator devices"""
type Device {
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  pk: Int!
  name: String!
  """Get type of device"""
  type: String!
  confirmed: Boolean!
}

union authenticators_admin_duo_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedDuoDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedDuoDeviceList | ValidationError | GenericError

type PaginatedDuoDeviceList {
  pagination: Pagination!
  results: [DuoDevice]!
}

type Pagination {
  next: Float!
  previous: Float!
  count: Float!
  current: Float!
  total_pages: Float!
  start_index: Float!
  end_index: Float!
}

"""Serializer for Duo authenticator devices"""
type DuoDevice {
  pk: Int!
  """The human-readable name of this device."""
  name: query_authenticators_admin_duo_list_oneOf_0_results_items_name!
}

"""The human-readable name of this device."""
scalar query_authenticators_admin_duo_list_oneOf_0_results_items_name @length(subgraph: "Authentik", max: 64)

union authenticators_admin_duo_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DuoDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DuoDevice | ValidationError | GenericError

union authenticators_admin_sms_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSMSDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSMSDeviceList | ValidationError | GenericError

type PaginatedSMSDeviceList {
  pagination: Pagination!
  results: [SMSDevice]!
}

"""Serializer for sms authenticator devices"""
type SMSDevice {
  """The human-readable name of this device."""
  name: query_authenticators_admin_sms_list_oneOf_0_results_items_name!
  pk: Int!
  phone_number: String!
}

"""The human-readable name of this device."""
scalar query_authenticators_admin_sms_list_oneOf_0_results_items_name @length(subgraph: "Authentik", max: 64)

union authenticators_admin_sms_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SMSDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SMSDevice | ValidationError | GenericError

union authenticators_admin_static_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedStaticDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedStaticDeviceList | ValidationError | GenericError

type PaginatedStaticDeviceList {
  pagination: Pagination!
  results: [StaticDevice]!
}

"""Serializer for static authenticator devices"""
type StaticDevice {
  """The human-readable name of this device."""
  name: query_authenticators_admin_static_list_oneOf_0_results_items_name!
  token_set: [StaticDeviceToken]!
  pk: Int!
}

"""The human-readable name of this device."""
scalar query_authenticators_admin_static_list_oneOf_0_results_items_name @length(subgraph: "Authentik", max: 64)

"""Serializer for static device's tokens"""
type StaticDeviceToken {
  token: query_authenticators_admin_static_list_oneOf_0_results_items_token_set_items_token!
}

scalar query_authenticators_admin_static_list_oneOf_0_results_items_token_set_items_token @length(subgraph: "Authentik", max: 16)

union authenticators_admin_static_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "StaticDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = StaticDevice | ValidationError | GenericError

union authenticators_admin_totp_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedTOTPDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedTOTPDeviceList | ValidationError | GenericError

type PaginatedTOTPDeviceList {
  pagination: Pagination!
  results: [TOTPDevice]!
}

"""Serializer for totp authenticator devices"""
type TOTPDevice {
  """The human-readable name of this device."""
  name: query_authenticators_admin_totp_list_oneOf_0_results_items_name!
  pk: Int!
}

"""The human-readable name of this device."""
scalar query_authenticators_admin_totp_list_oneOf_0_results_items_name @length(subgraph: "Authentik", max: 64)

union authenticators_admin_totp_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TOTPDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TOTPDevice | ValidationError | GenericError

union authenticators_admin_webauthn_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedWebAuthnDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedWebAuthnDeviceList | ValidationError | GenericError

type PaginatedWebAuthnDeviceList {
  pagination: Pagination!
  results: [WebAuthnDevice]!
}

"""Serializer for WebAuthn authenticator devices"""
type WebAuthnDevice {
  pk: Int!
  name: query_authenticators_admin_webauthn_list_oneOf_0_results_items_name!
  created_on: DateTime!
  device_type: WebAuthnDeviceType!
  aaguid: String!
}

scalar query_authenticators_admin_webauthn_list_oneOf_0_results_items_name @length(subgraph: "Authentik", max: 200)

"""WebAuthnDeviceType Serializer"""
type WebAuthnDeviceType {
  aaguid: UUID!
  description: String!
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

union authenticators_admin_webauthn_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "WebAuthnDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = WebAuthnDevice | ValidationError | GenericError

union authenticators_all_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Device") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Device | ValidationError | GenericError

union authenticators_duo_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedDuoDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedDuoDeviceList | ValidationError | GenericError

union authenticators_duo_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DuoDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DuoDevice | ValidationError | GenericError

union authenticators_duo_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

"""A list of all objects referencing the queried object"""
type UsedBy {
  app: String!
  model_name: String!
  pk: String!
  name: String!
  action: UsedByActionEnum!
}

enum UsedByActionEnum {
  cascade
  cascade_many
  set_null
  set_default
}

union authenticators_sms_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSMSDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSMSDeviceList | ValidationError | GenericError

union authenticators_sms_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SMSDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SMSDevice | ValidationError | GenericError

union authenticators_sms_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union authenticators_static_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedStaticDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedStaticDeviceList | ValidationError | GenericError

union authenticators_static_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "StaticDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = StaticDevice | ValidationError | GenericError

union authenticators_static_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union authenticators_totp_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedTOTPDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedTOTPDeviceList | ValidationError | GenericError

union authenticators_totp_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TOTPDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TOTPDevice | ValidationError | GenericError

union authenticators_totp_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union authenticators_webauthn_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedWebAuthnDeviceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedWebAuthnDeviceList | ValidationError | GenericError

union authenticators_webauthn_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "WebAuthnDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = WebAuthnDevice | ValidationError | GenericError

union authenticators_webauthn_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union core_applications_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedApplicationList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedApplicationList | ValidationError | GenericError

type PaginatedApplicationList {
  pagination: Pagination!
  results: [Application]!
}

"""Application Serializer"""
type Application {
  pk: UUID!
  """Application's display Name."""
  name: String!
  slug: query_core_applications_list_oneOf_0_results_items_slug!
  provider: Int
  provider_obj: Provider!
  backchannel_providers: [Int]
  backchannel_providers_obj: [Provider]!
  """Allow formatting of launch URL"""
  launch_url: String
  """Open launch URL in a new browser tab or window."""
  open_in_new_tab: Boolean
  meta_launch_url: URL
  """
  Get the URL to the App Icon image. If the name is /static or starts with http
  it is returned as-is
  """
  meta_icon: String
  meta_description: String
  meta_publisher: String
  policy_engine_mode: PolicyEngineMode
  group: String
}

scalar query_core_applications_list_oneOf_0_results_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

"""Provider Serializer"""
type Provider {
  pk: Int!
  name: String!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  """Get object component so that we know how to edit the object"""
  component: String!
  """Internal application name, used in URLs."""
  assigned_application_slug: String!
  """Application's display Name."""
  assigned_application_name: String!
  """Internal application name, used in URLs."""
  assigned_backchannel_application_slug: String!
  """Application's display Name."""
  assigned_backchannel_application_name: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

enum PolicyEngineMode {
  all
  any
}

union core_applications_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Application") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Application | ValidationError | GenericError

union core_applications_check_access_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PolicyTestResult") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PolicyTestResult | ValidationError | GenericError

"""result of a policy test"""
type PolicyTestResult {
  passing: Boolean!
  messages: [String]!
  log_messages: [LogEvent]!
}

"""Single log message with all context logged."""
type LogEvent {
  timestamp: DateTime!
  log_level: LogLevelEnum!
  logger: String!
  event: String!
  attributes: JSON!
}

enum LogLevelEnum {
  critical
  exception
  error
  warn
  warning
  info
  debug
  notset
}

union core_applications_metrics_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Coordinate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Coordinate | ValidationError | GenericError

union core_applications_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union core_authenticated_sessions_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedAuthenticatedSessionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedAuthenticatedSessionList | ValidationError | GenericError

type PaginatedAuthenticatedSessionList {
  pagination: Pagination!
  results: [AuthenticatedSession]!
}

"""AuthenticatedSession Serializer"""
type AuthenticatedSession {
  uuid: UUID
  """Check if session is currently active session"""
  current: Boolean!
  user_agent: query_core_authenticated_sessions_list_oneOf_0_results_items_user_agent!
  geo_ip: query_core_authenticated_sessions_list_oneOf_0_results_items_geo_ip
  asn: query_core_authenticated_sessions_list_oneOf_0_results_items_asn
  user: Int!
  last_ip: String!
  last_user_agent: String
  last_used: DateTime!
  expires: DateTime
}

"""Get parsed user agent"""
type query_core_authenticated_sessions_list_oneOf_0_results_items_user_agent {
  device: query_core_authenticated_sessions_list_oneOf_0_results_items_user_agent_device!
  os: query_core_authenticated_sessions_list_oneOf_0_results_items_user_agent_os!
  user_agent: query_core_authenticated_sessions_list_oneOf_0_results_items_user_agent_user_agent!
  string: String!
}

"""User agent device"""
type query_core_authenticated_sessions_list_oneOf_0_results_items_user_agent_device {
  brand: String!
  family: String!
  model: String!
}

"""User agent os"""
type query_core_authenticated_sessions_list_oneOf_0_results_items_user_agent_os {
  family: String!
  major: String!
  minor: String!
  patch: String!
  patch_minor: String!
}

"""User agent browser"""
type query_core_authenticated_sessions_list_oneOf_0_results_items_user_agent_user_agent {
  family: String!
  major: String!
  minor: String!
  patch: String!
}

"""Get GeoIP Data"""
type query_core_authenticated_sessions_list_oneOf_0_results_items_geo_ip {
  continent: String!
  country: String!
  lat: Float!
  long: Float!
  city: String!
}

"""Get ASN Data"""
type query_core_authenticated_sessions_list_oneOf_0_results_items_asn {
  asn: Int!
  as_org: String
  network: String
}

union core_authenticated_sessions_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatedSession") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatedSession | ValidationError | GenericError

union core_authenticated_sessions_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union core_brands_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedBrandList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedBrandList | ValidationError | GenericError

type PaginatedBrandList {
  pagination: Pagination!
  results: [Brand]!
}

"""Brand Serializer"""
type Brand {
  brand_uuid: UUID!
  """
  Domain that activates this brand. Can be a superset, i.e. `a.b` for `aa.b` and `ba.b`
  """
  domain: String!
  default: Boolean
  branding_title: String
  branding_logo: String
  branding_favicon: String
  flow_authentication: UUID
  flow_invalidation: UUID
  flow_recovery: UUID
  flow_unenrollment: UUID
  flow_user_settings: UUID
  flow_device_code: UUID
  """Web Certificate used by the authentik Core webserver."""
  web_certificate: UUID
  attributes: JSON
}

union core_brands_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Brand") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Brand | ValidationError | GenericError

union core_brands_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union core_brands_current_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CurrentBrand") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CurrentBrand | ValidationError | GenericError

"""Partial brand information for styling"""
type CurrentBrand {
  matched_domain: String!
  branding_title: String!
  branding_logo: String!
  branding_favicon: String!
  ui_footer_links: [FooterLink]!
  ui_theme: UiThemeEnum!
  flow_authentication: String
  flow_invalidation: String
  flow_recovery: String
  flow_unenrollment: String
  flow_user_settings: String
  flow_device_code: String
  default_locale: String!
}

"""Links returned in Config API"""
type FooterLink {
  href: String!
  name: String!
}

enum UiThemeEnum {
  automatic
  light
  dark
}

union core_groups_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedGroupList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedGroupList | ValidationError | GenericError

type PaginatedGroupList {
  pagination: Pagination!
  results: [Group]!
}

"""Group Serializer"""
type Group {
  pk: UUID!
  num_pk: Int!
  name: query_core_groups_list_oneOf_0_results_items_name!
  """Users added to this group will be superusers."""
  is_superuser: Boolean
  parent: UUID
  parent_name: String
  users: [Int]
  users_obj: [GroupMember]
  attributes: JSON
  roles: [UUID]
  roles_obj: [Role]!
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

scalar query_core_groups_list_oneOf_0_results_items_name @length(subgraph: "Authentik", max: 80)

"""Stripped down user serializer to show relevant users for groups"""
type GroupMember {
  pk: Int!
  username: query_core_groups_list_oneOf_0_results_items_users_obj_items_username!
  """User's display name."""
  name: String!
  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean
  last_login: DateTime
  email: EmailAddress
  attributes: JSON
  uid: String!
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

scalar query_core_groups_list_oneOf_0_results_items_users_obj_items_username @regexp(subgraph: "Authentik", pattern: "^[\\w.@+-]+$") @typescript(subgraph: "Authentik", type: "string")

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

"""Role serializer"""
type Role {
  pk: UUID!
  name: query_core_groups_list_oneOf_0_results_items_roles_obj_items_name!
}

scalar query_core_groups_list_oneOf_0_results_items_roles_obj_items_name @length(subgraph: "Authentik", max: 150)

union core_groups_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Group") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Group | ValidationError | GenericError

union core_groups_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union core_tokens_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedTokenList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedTokenList | ValidationError | GenericError

type PaginatedTokenList {
  pagination: Pagination!
  results: [Token]!
}

"""Token Serializer"""
type Token {
  pk: UUID!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  identifier: query_core_tokens_list_oneOf_0_results_items_identifier!
  intent: IntentEnum
  user: Int
  user_obj: User!
  description: String
  expires: DateTime
  expiring: Boolean
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

scalar query_core_tokens_list_oneOf_0_results_items_identifier @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

enum IntentEnum {
  verification
  api
  recovery
  app_password
}

"""User Serializer"""
type User {
  pk: Int!
  username: query_core_tokens_list_oneOf_0_results_items_user_obj_username!
  """User's display name."""
  name: String!
  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean
  last_login: DateTime
  is_superuser: Boolean!
  groups: [UUID]
  groups_obj: [UserGroup]
  email: EmailAddress
  """User's avatar, either a http/https URL or a data URI"""
  avatar: String!
  attributes: JSON
  uid: String!
  path: String
  type: UserTypeEnum
  uuid: UUID!
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

scalar query_core_tokens_list_oneOf_0_results_items_user_obj_username @length(subgraph: "Authentik", max: 150)

"""Simplified Group Serializer for user's groups"""
type UserGroup {
  pk: UUID!
  """Get a numerical, int32 ID for the group"""
  num_pk: Int!
  name: query_core_tokens_list_oneOf_0_results_items_user_obj_groups_obj_items_name!
  """Users added to this group will be superusers."""
  is_superuser: Boolean
  parent: UUID
  parent_name: String
  attributes: JSON
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

scalar query_core_tokens_list_oneOf_0_results_items_user_obj_groups_obj_items_name @length(subgraph: "Authentik", max: 80)

enum UserTypeEnum {
  internal
  external
  service_account
  internal_service_account
}

enum queryInput_core_tokens_list_intent {
  api
  app_password
  recovery
  verification
}

union core_tokens_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Token") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Token | ValidationError | GenericError

union core_tokens_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union core_tokens_view_key_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TokenView") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TokenView | ValidationError | GenericError

"""Show token's current key"""
type TokenView {
  key: String!
}

union core_user_consent_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserConsentList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserConsentList | ValidationError | GenericError

type PaginatedUserConsentList {
  pagination: Pagination!
  results: [UserConsent]!
}

"""UserConsent Serializer"""
type UserConsent {
  pk: Int!
  expires: DateTime
  expiring: Boolean
  user: User!
  application: Application!
  permissions: String
}

union core_user_consent_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserConsent") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserConsent | ValidationError | GenericError

union core_user_consent_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union core_users_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserList | ValidationError | GenericError

type PaginatedUserList {
  pagination: Pagination!
  results: [User]!
}

enum queryInput_core_users_list_type_items {
  external
  internal
  internal_service_account
  service_account
}

union core_users_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "User") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = User | ValidationError | GenericError

union core_users_metrics_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserMetrics") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserMetrics | ValidationError | GenericError

"""User Metrics"""
type UserMetrics {
  logins: [Coordinate]!
  logins_failed: [Coordinate]!
  authorizations: [Coordinate]!
}

union core_users_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union core_users_impersonate_end_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

type Void_container {
  Void: Void @resolveRoot(subgraph: "Authentik")
}

"""Represents empty values"""
scalar Void

union core_users_me_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SessionUser") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SessionUser | ValidationError | GenericError

"""
Response for the /user/me endpoint, returns the currently active user (as `user` property)
and, if this user is being impersonated, the original user in the `original` property.
"""
type SessionUser {
  user: UserSelf!
  original: UserSelf
}

"""User Serializer for information a user can retrieve about themselves"""
type UserSelf {
  pk: Int!
  username: query_core_users_me_retrieve_oneOf_0_user_username!
  """User's display name."""
  name: String!
  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean!
  is_superuser: Boolean!
  groups: [UserSelfGroups]!
  email: EmailAddress
  """User's avatar, either a http/https URL or a data URI"""
  avatar: String!
  uid: String!
  """Get user settings with brand and group settings applied"""
  settings: JSON!
  type: UserTypeEnum
  """Get all system permissions assigned to the user"""
  system_permissions: [String]!
}

scalar query_core_users_me_retrieve_oneOf_0_user_username @regexp(subgraph: "Authentik", pattern: "^[\\w.@+-]+$") @typescript(subgraph: "Authentik", type: "string")

type UserSelfGroups {
  name: String!
  pk: String!
}

union core_users_paths_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserPath") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserPath | ValidationError | GenericError

type UserPath {
  paths: [String]!
}

union crypto_certificatekeypairs_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedCertificateKeyPairList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedCertificateKeyPairList | ValidationError | GenericError

type PaginatedCertificateKeyPairList {
  pagination: Pagination!
  results: [CertificateKeyPair]!
}

"""CertificateKeyPair Serializer"""
type CertificateKeyPair {
  pk: UUID!
  name: String!
  """Get certificate Hash (SHA256)"""
  fingerprint_sha256: String
  """Get certificate Hash (SHA1)"""
  fingerprint_sha1: String
  """Get certificate expiry"""
  cert_expiry: DateTime
  """Get certificate subject as full rfc4514"""
  cert_subject: String
  """Show if this keypair has a private key configured or not"""
  private_key_available: Boolean!
  """Get the private key's type, if set"""
  private_key_type: String
  """Get URL to download certificate"""
  certificate_download_url: String!
  """Get URL to download private key"""
  private_key_download_url: String!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
}

union crypto_certificatekeypairs_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CertificateKeyPair") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CertificateKeyPair | ValidationError | GenericError

union crypto_certificatekeypairs_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union crypto_certificatekeypairs_view_certificate_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CertificateData") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CertificateData | ValidationError | GenericError

"""Get CertificateKeyPair's data"""
type CertificateData {
  data: String!
}

union crypto_certificatekeypairs_view_private_key_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CertificateData") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CertificateData | ValidationError | GenericError

union enterprise_license_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedLicenseList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedLicenseList | ValidationError | GenericError

type PaginatedLicenseList {
  pagination: Pagination!
  results: [License]!
}

"""License Serializer"""
type License {
  license_uuid: UUID!
  name: String!
  key: String!
  expiry: DateTime!
  internal_users: Int!
  external_users: Int!
}

union enterprise_license_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "License") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = License | ValidationError | GenericError

union enterprise_license_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union enterprise_license_forecast_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LicenseForecast") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LicenseForecast | ValidationError | GenericError

"""Serializer for license forecast"""
type LicenseForecast {
  internal_users: Int!
  external_users: Int!
  forecasted_internal_users: Int!
  forecasted_external_users: Int!
}

union enterprise_license_get_install_id_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "InstallID") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = InstallID | ValidationError | GenericError

type InstallID {
  install_id: String!
}

union enterprise_license_summary_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LicenseSummary") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LicenseSummary | ValidationError | GenericError

"""Serializer for license status"""
type LicenseSummary {
  internal_users: Int!
  external_users: Int!
  valid: Boolean!
  show_admin_warning: Boolean!
  show_user_warning: Boolean!
  read_only: Boolean!
  latest_valid: DateTime!
  has_license: Boolean!
}

union events_events_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedEventList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedEventList | ValidationError | GenericError

type PaginatedEventList {
  pagination: Pagination!
  results: [Event]!
}

"""Event Serializer"""
type Event {
  pk: UUID!
  user: JSON
  action: EventActions!
  app: String!
  context: JSON
  client_ip: String
  created: DateTime!
  expires: DateTime
  brand: JSON
}

enum EventActions {
  login
  login_failed
  logout
  user_write
  suspicious_request
  password_set
  secret_view
  secret_rotate
  invitation_used
  authorize_application
  source_linked
  impersonation_started
  impersonation_ended
  flow_execution
  policy_execution
  policy_exception
  property_mapping_exception
  system_task_execution
  system_task_exception
  system_exception
  configuration_error
  model_created
  model_updated
  model_deleted
  email_sent
  update_available
  custom_
}

union events_events_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Event") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Event | ValidationError | GenericError

union events_events_actions_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TypeCreate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TypeCreate | ValidationError | GenericError

"""Types of an object that can be created"""
type TypeCreate {
  name: String!
  description: String!
  component: String!
  model_name: String!
  requires_enterprise: Boolean
}

union events_events_per_month_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Coordinate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Coordinate | ValidationError | GenericError

union events_events_top_per_user_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "EventTopPerUser") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = EventTopPerUser | ValidationError | GenericError

"""Response object of Event's top_per_user"""
type EventTopPerUser {
  application: JSON!
  counted_events: Int!
  unique_users: Int!
}

union events_events_volume_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Coordinate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Coordinate | ValidationError | GenericError

union events_notifications_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedNotificationList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedNotificationList | ValidationError | GenericError

type PaginatedNotificationList {
  pagination: Pagination!
  results: [Notification]!
}

"""Notification Serializer"""
type Notification {
  pk: UUID!
  severity: SeverityEnum!
  body: String!
  created: DateTime!
  event: Event
  seen: Boolean
}

enum SeverityEnum {
  notice
  warning
  alert
}

enum queryInput_events_notifications_list_severity {
  alert
  notice
  warning
}

union events_notifications_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Notification") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Notification | ValidationError | GenericError

union events_notifications_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union events_rules_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedNotificationRuleList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedNotificationRuleList | ValidationError | GenericError

type PaginatedNotificationRuleList {
  pagination: Pagination!
  results: [NotificationRule]!
}

"""NotificationRule Serializer"""
type NotificationRule {
  pk: UUID!
  name: String!
  """
  Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI.
  """
  transports: [UUID]
  severity: SeverityEnum
  """
  Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.
  """
  group: UUID
  group_obj: Group!
}

"""Controls which severity level the created notifications will have."""
enum queryInput_events_rules_list_severity {
  alert
  notice
  warning
}

union events_rules_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationRule") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationRule | ValidationError | GenericError

union events_rules_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union events_system_tasks_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSystemTaskList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSystemTaskList | ValidationError | GenericError

type PaginatedSystemTaskList {
  pagination: Pagination!
  results: [SystemTask]!
}

"""Serialize TaskInfo and TaskResult"""
type SystemTask {
  uuid: UUID!
  name: String!
  """Get full name with UID"""
  full_name: String!
  uid: String
  description: String!
  start_timestamp: DateTime!
  finish_timestamp: DateTime!
  duration: Float!
  status: SystemTaskStatusEnum!
  messages: [LogEvent]!
}

enum SystemTaskStatusEnum {
  unknown
  successful
  warning
  error
}

enum queryInput_events_system_tasks_list_status {
  error
  successful
  unknown
  warning
}

union events_system_tasks_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SystemTask") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SystemTask | ValidationError | GenericError

union events_transports_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedNotificationTransportList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedNotificationTransportList | ValidationError | GenericError

type PaginatedNotificationTransportList {
  pagination: Pagination!
  results: [NotificationTransport]!
}

"""NotificationTransport Serializer"""
type NotificationTransport {
  pk: UUID!
  name: String!
  mode: NotificationTransportModeEnum
  """Return selected mode with a UI Label"""
  mode_verbose: String!
  webhook_url: URL
  webhook_mapping: UUID
  """
  Only send notification once, for example when sending a webhook into a chat channel.
  """
  send_once: Boolean
}

enum NotificationTransportModeEnum {
  local
  webhook
  webhook_slack
  email
}

enum queryInput_events_transports_list_mode {
  email
  local
  webhook
  webhook_slack
}

union events_transports_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationTransport") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationTransport | ValidationError | GenericError

union events_transports_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union flows_bindings_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedFlowStageBindingList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedFlowStageBindingList | ValidationError | GenericError

type PaginatedFlowStageBindingList {
  pagination: Pagination!
  results: [FlowStageBinding]!
}

"""FlowStageBinding Serializer"""
type FlowStageBinding {
  pk: UUID!
  policybindingmodel_ptr_id: UUID!
  target: UUID!
  stage: UUID!
  stage_obj: Stage!
  """Evaluate policies during the Flow planning process."""
  evaluate_on_plan: Boolean
  """Evaluate policies when the Stage is present to the user."""
  re_evaluate_policies: Boolean
  order: Int!
  policy_engine_mode: PolicyEngineMode
  invalid_response_action: InvalidResponseActionEnum
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

"""Stage Serializer"""
type Stage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

"""Stripped down flow serializer"""
type FlowSet {
  pk: UUID!
  policybindingmodel_ptr_id: UUID!
  name: String!
  slug: query_flows_bindings_list_oneOf_0_results_items_stage_obj_flow_set_items_slug!
  """Shown as the Title in Flow pages."""
  title: String!
  designation: FlowDesignationEnum!
  """
  Get the URL to the background image. If the name is /static or starts with http
  it is returned as-is
  """
  background: String!
  policy_engine_mode: PolicyEngineMode
  """
  Enable compatibility mode, increases compatibility with password managers on mobile devices.
  """
  compatibility_mode: Boolean
  """Get export URL for flow"""
  export_url: String!
  layout: FlowLayoutEnum
  denied_action: DeniedActionEnum
}

scalar query_flows_bindings_list_oneOf_0_results_items_stage_obj_flow_set_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

enum FlowDesignationEnum {
  authentication
  authorization
  invalidation
  enrollment
  unenrollment
  recovery
  stage_configuration
}

enum FlowLayoutEnum {
  stacked
  content_left
  content_right
  sidebar_left
  sidebar_right
}

enum DeniedActionEnum {
  message_continue
  message
  continue
}

enum InvalidResponseActionEnum {
  retry
  restart
  restart_with_context
}

"""
Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context.
"""
enum queryInput_flows_bindings_list_invalid_response_action {
  restart
  restart_with_context
  retry
}

enum queryInput_flows_bindings_list_policy_engine_mode {
  all
  any
}

union flows_bindings_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "FlowStageBinding") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = FlowStageBinding | ValidationError | GenericError

union flows_bindings_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union flows_executor_get_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AccessDeniedChallenge | AppleLoginChallenge | AuthenticatorDuoChallenge | AuthenticatorSMSChallenge | AuthenticatorStaticChallenge | AuthenticatorTOTPChallenge | AuthenticatorValidationChallenge | AuthenticatorWebAuthnChallenge | AutosubmitChallenge | CaptchaChallenge | ConsentChallenge | EmailChallenge | FlowErrorChallenge | IdentificationChallenge | OAuthDeviceCodeChallenge | OAuthDeviceCodeFinishChallenge | PasswordChallenge | PlexAuthenticationChallenge | PromptChallenge | RedirectChallenge | ShellChallenge | UserLoginChallenge | ValidationError | GenericError

"""Challenge when a flow's active stage calls `stage_invalid()`."""
type AccessDeniedChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  error_message: String
}

enum ChallengeChoices {
  native
  shell
  redirect
}

"""Contextual flow information for a challenge"""
type ContextualFlowInfo {
  title: String
  background: String
  cancel_url: String!
  layout: ContextualFlowInfoLayoutEnum!
}

enum ContextualFlowInfoLayoutEnum {
  stacked
  content_left
  content_right
  sidebar_left
  sidebar_right
}

"""
Special challenge for apple-native authentication flow, which happens on the client.
"""
type AppleLoginChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  client_id: String!
  scope: String!
  redirect_uri: String!
  state: String!
}

"""Duo Challenge"""
type AuthenticatorDuoChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  activation_barcode: String!
  activation_code: String!
  stage_uuid: String!
}

"""SMS Setup challenge"""
type AuthenticatorSMSChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  phone_number_required: Boolean
}

"""Static authenticator challenge"""
type AuthenticatorStaticChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  codes: [String]!
}

"""TOTP Setup challenge"""
type AuthenticatorTOTPChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  config_url: String!
}

"""Authenticator challenge"""
type AuthenticatorValidationChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  device_challenges: [DeviceChallenge]!
  configuration_stages: [SelectableStage]!
}

"""Single device challenge"""
type DeviceChallenge {
  device_class: String!
  device_uid: String!
  challenge: JSON!
}

"""Serializer for stages which can be selected by users"""
type SelectableStage {
  pk: UUID!
  name: String!
  verbose_name: String!
  meta_model_name: String!
}

"""WebAuthn Challenge"""
type AuthenticatorWebAuthnChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  registration: JSON!
}

"""Autosubmit challenge used to send and navigate a POST request"""
type AutosubmitChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  url: String!
  attrs: JSON!
  title: String
}

"""Site public key"""
type CaptchaChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  site_key: String!
  js_url: String!
}

"""Challenge info for consent screens"""
type ConsentChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  header_text: String
  permissions: [ConsentPermission]!
  additional_permissions: [ConsentPermission]!
  token: String!
}

"""Permission used for consent"""
type ConsentPermission {
  name: String!
  id: String!
}

"""Email challenge"""
type EmailChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
}

"""
Challenge class when an unhandled error occurs during a stage. Normal users
are shown an error message, superusers are shown a full stacktrace.
"""
type FlowErrorChallenge {
  type: String
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  request_id: String!
  error: String
  traceback: String
}

"""Identification challenges with all UI elements"""
type IdentificationChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  user_fields: [String]
  password_fields: Boolean!
  application_pre: String
  flow_designation: FlowDesignationEnum!
  enroll_url: String
  recovery_url: String
  passwordless_url: String
  primary_action: String!
  sources: [LoginSource]
  show_source_labels: Boolean!
}

"""Serializer for Login buttons of sources"""
type LoginSource {
  name: String!
  icon_url: String
  challenge: LoginChallengeTypes!
}

union LoginChallengeTypes @discriminator(subgraph: "Authentik", field: "component", mapping: "{\"xak-flow-redirect\":\"RedirectChallenge\",\"ak-source-plex\":\"PlexAuthenticationChallenge\",\"ak-source-oauth-apple\":\"AppleLoginChallenge\"}") = RedirectChallenge | PlexAuthenticationChallenge | AppleLoginChallenge

"""Challenge type to redirect the client"""
type RedirectChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  to: String!
}

"""Challenge shown to the user in identification stage"""
type PlexAuthenticationChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  client_id: String!
  slug: String!
}

"""OAuth Device code challenge"""
type OAuthDeviceCodeChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
}

"""Final challenge after user enters their code"""
type OAuthDeviceCodeFinishChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
}

"""Password challenge UI fields"""
type PasswordChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
  recovery_url: String
}

"""Initial challenge being sent, define fields"""
type PromptChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  fields: [StagePrompt]!
}

"""Serializer for a single Prompt field"""
type StagePrompt {
  field_key: String!
  label: String!
  type: PromptTypeEnum!
  required: Boolean!
  placeholder: String!
  initial_value: String!
  order: Int!
  sub_text: String!
  choices: [String]
}

enum PromptTypeEnum {
  text
  text_area
  text_read_only
  text_area_read_only
  username
  email
  password
  number
  checkbox
  radio_button_group @enum(subgraph: "Authentik", value: "\"radio-button-group\"")
  dropdown
  date
  date_time @enum(subgraph: "Authentik", value: "\"date-time\"")
  file
  separator
  hidden
  static
  ak_locale @enum(subgraph: "Authentik", value: "\"ak-locale\"")
}

"""challenge type to render HTML as-is"""
type ShellChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  body: String!
}

"""Empty challenge"""
type UserLoginChallenge {
  type: ChallengeChoices!
  flow_info: ContextualFlowInfo
  component: String
  response_errors: JSON
  pending_user: String!
  pending_user_avatar: String!
}

union flows_inspector_get_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "FlowInspection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = FlowInspection | GenericError

"""Serializer for inspect endpoint"""
type FlowInspection {
  plans: [FlowInspectorPlan]!
  current_plan: FlowInspectorPlan
  is_completed: Boolean!
}

"""Serializer for an active FlowPlan"""
type FlowInspectorPlan {
  current_stage: FlowStageBinding!
  next_planned_stage: FlowStageBinding!
  """Get the plan's context, sanitized"""
  plan_context: JSON!
  """Get a unique session ID"""
  session_id: String!
}

union flows_instances_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedFlowList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedFlowList | ValidationError | GenericError

type PaginatedFlowList {
  pagination: Pagination!
  results: [Flow]!
}

"""Flow Serializer"""
type Flow {
  pk: UUID!
  policybindingmodel_ptr_id: UUID!
  name: String!
  slug: query_flows_instances_list_oneOf_0_results_items_slug!
  """Shown as the Title in Flow pages."""
  title: String!
  designation: FlowDesignationEnum!
  """
  Get the URL to the background image. If the name is /static or starts with http
  it is returned as-is
  """
  background: String!
  stages: [UUID]!
  policies: [UUID]!
  """Get count of cached flows"""
  cache_count: Int!
  policy_engine_mode: PolicyEngineMode
  """
  Enable compatibility mode, increases compatibility with password managers on mobile devices.
  """
  compatibility_mode: Boolean
  """Get export URL for flow"""
  export_url: String!
  layout: FlowLayoutEnum
  denied_action: DeniedActionEnum
  authentication: AuthenticationEnum
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

scalar query_flows_instances_list_oneOf_0_results_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

enum AuthenticationEnum {
  none
  require_authenticated
  require_unauthenticated
  require_superuser
  require_outpost
}

"""Configure what should happen when a flow denies access to a user."""
enum queryInput_flows_instances_list_denied_action {
  continue
  message
  message_continue
}

"""
Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.
"""
enum queryInput_flows_instances_list_designation {
  authentication
  authorization
  enrollment
  invalidation
  recovery
  stage_configuration
  unenrollment
}

union flows_instances_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Flow") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Flow | ValidationError | GenericError

union flows_instances_diagram_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "FlowDiagram") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = FlowDiagram | ValidationError | GenericError

"""response of the flow's diagram action"""
type FlowDiagram {
  diagram: String!
}

union flows_instances_execute_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Link") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Link | GenericError

"""Returns a single link"""
type Link {
  link: String!
}

union flows_instances_export_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "File_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = File_container | ValidationError | GenericError

type File_container {
  File: File @resolveRoot(subgraph: "Authentik")
}

"""The `File` scalar type represents a file upload."""
scalar File

union flows_instances_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union flows_instances_cache_info_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Cache") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Cache | ValidationError | GenericError

"""Generic cache stats for an object"""
type Cache {
  count: Int!
}

union managed_blueprints_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedBlueprintInstanceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedBlueprintInstanceList | ValidationError | GenericError

type PaginatedBlueprintInstanceList {
  pagination: Pagination!
  results: [BlueprintInstance]!
}

"""Info about a single blueprint instance file"""
type BlueprintInstance {
  pk: UUID!
  name: String!
  path: String
  context: JSON
  last_applied: DateTime!
  last_applied_hash: String!
  status: BlueprintInstanceStatusEnum!
  enabled: Boolean
  managed_models: [String]!
  metadata: JSON!
  content: String
}

enum BlueprintInstanceStatusEnum {
  successful
  warning
  error
  orphaned
  unknown
}

union managed_blueprints_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "BlueprintInstance") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = BlueprintInstance | ValidationError | GenericError

union managed_blueprints_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union managed_blueprints_available_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "BlueprintFile") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = BlueprintFile | ValidationError | GenericError

type BlueprintFile {
  path: String!
  last_m: DateTime!
  hash: String!
  meta: Metadata!
}

"""Serializer for blueprint metadata"""
type Metadata {
  name: String!
  labels: JSON!
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

union oauth2_access_tokens_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedTokenModelList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedTokenModelList | ValidationError | GenericError

type PaginatedTokenModelList {
  pagination: Pagination!
  results: [TokenModel]!
}

"""Serializer for BaseGrantModel and RefreshToken"""
type TokenModel {
  pk: Int!
  provider: OAuth2Provider!
  user: User!
  """Check if token is expired yet."""
  is_expired: Boolean!
  expires: DateTime
  scope: [String]!
  """Get the token's id_token as JSON String"""
  id_token: String!
  revoked: Boolean
}

"""OAuth2Provider Serializer"""
type OAuth2Provider {
  pk: Int!
  name: String!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  """Get object component so that we know how to edit the object"""
  component: String!
  """Internal application name, used in URLs."""
  assigned_application_slug: String!
  """Application's display Name."""
  assigned_application_name: String!
  """Internal application name, used in URLs."""
  assigned_backchannel_application_slug: String!
  """Application's display Name."""
  assigned_backchannel_application_name: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  client_type: ClientTypeEnum
  client_id: query_oauth2_access_tokens_list_oneOf_0_results_items_provider_client_id
  client_secret: query_oauth2_access_tokens_list_oneOf_0_results_items_provider_client_secret
  """
  Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  access_code_validity: String
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  access_token_validity: String
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  refresh_token_validity: String
  """
  Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint.
  """
  include_claims_in_id_token: Boolean
  """
  Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.
  """
  signing_key: UUID
  """Enter each URI on a new line."""
  redirect_uris: String
  sub_mode: SubModeEnum
  issuer_mode: IssuerModeEnum
  jwks_sources: [UUID]
}

enum ClientTypeEnum {
  confidential
  public
}

scalar query_oauth2_access_tokens_list_oneOf_0_results_items_provider_client_id @length(subgraph: "Authentik", max: 255)

scalar query_oauth2_access_tokens_list_oneOf_0_results_items_provider_client_secret @length(subgraph: "Authentik", max: 255)

enum SubModeEnum {
  hashed_user_id
  user_id
  user_uuid
  user_username
  user_email
  user_upn
}

enum IssuerModeEnum {
  global
  per_provider
}

union oauth2_access_tokens_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TokenModel") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TokenModel | ValidationError | GenericError

union oauth2_access_tokens_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union oauth2_authorization_codes_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedExpiringBaseGrantModelList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedExpiringBaseGrantModelList | ValidationError | GenericError

type PaginatedExpiringBaseGrantModelList {
  pagination: Pagination!
  results: [ExpiringBaseGrantModel]!
}

"""Serializer for BaseGrantModel and ExpiringBaseGrant"""
type ExpiringBaseGrantModel {
  pk: Int!
  provider: OAuth2Provider!
  user: User!
  """Check if token is expired yet."""
  is_expired: Boolean!
  expires: DateTime
  scope: [String]!
}

union oauth2_authorization_codes_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ExpiringBaseGrantModel") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ExpiringBaseGrantModel | ValidationError | GenericError

union oauth2_authorization_codes_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union oauth2_refresh_tokens_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedTokenModelList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedTokenModelList | ValidationError | GenericError

union oauth2_refresh_tokens_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TokenModel") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TokenModel | ValidationError | GenericError

union oauth2_refresh_tokens_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union outposts_instances_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedOutpostList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedOutpostList | ValidationError | GenericError

type PaginatedOutpostList {
  pagination: Pagination!
  results: [Outpost]!
}

"""Outpost Serializer"""
type Outpost {
  pk: UUID!
  name: String!
  type: OutpostTypeEnum!
  providers: [Int]!
  providers_obj: [Provider]!
  """
  Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
  """
  service_connection: UUID
  service_connection_obj: ServiceConnection!
  """Get Token identifier"""
  token_identifier: String!
  config: JSON!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
}

enum OutpostTypeEnum {
  proxy
  ldap
  radius
  rac
}

"""ServiceConnection Serializer"""
type ServiceConnection {
  pk: UUID!
  name: String!
  """
  If enabled, use the local connection. Required Docker socket/Kubernetes Integration
  """
  local: Boolean
  """Return component used to edit this object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

union outposts_instances_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Outpost") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Outpost | ValidationError | GenericError

union outposts_instances_health_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "OutpostHealth") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OutpostHealth | ValidationError | GenericError

"""Outpost health status"""
type OutpostHealth {
  uid: String!
  last_seen: DateTime!
  version: String!
  version_should: String!
  version_outdated: Boolean!
  build_hash: String!
  build_hash_should: String!
  hostname: String!
}

union outposts_instances_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union outposts_instances_default_settings_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "OutpostDefaultConfig") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OutpostDefaultConfig | ValidationError | GenericError

"""Global default outpost config"""
type OutpostDefaultConfig {
  config: JSON!
}

union outposts_ldap_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedLDAPOutpostConfigList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedLDAPOutpostConfigList | ValidationError | GenericError

type PaginatedLDAPOutpostConfigList {
  pagination: Pagination!
  results: [LDAPOutpostConfig]!
}

"""LDAPProvider Serializer"""
type LDAPOutpostConfig {
  pk: Int!
  name: String!
  """DN under which objects are accessible."""
  base_dn: String
  bind_flow_slug: String!
  """Prioritise backchannel slug over direct application slug"""
  application_slug: String!
  """
  Users in this group can do search queries. If not set, every user can execute search queries.
  """
  search_group: UUID
  certificate: UUID
  tls_server_name: String
  """
  The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber
  """
  uid_start_number: Int
  """
  The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber
  """
  gid_start_number: Int
  search_mode: LDAPAPIAccessMode
  bind_mode: LDAPAPIAccessMode
  """
  When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
  """
  mfa_support: Boolean
}

enum LDAPAPIAccessMode {
  direct
  cached
}

union outposts_ldap_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPOutpostConfig") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPOutpostConfig | ValidationError | GenericError

union outposts_proxy_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedProxyOutpostConfigList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedProxyOutpostConfigList | ValidationError | GenericError

type PaginatedProxyOutpostConfigList {
  pagination: Pagination!
  results: [ProxyOutpostConfig]!
}

"""Proxy provider serializer for outposts"""
type ProxyOutpostConfig {
  pk: Int!
  name: String!
  internal_host: URL
  external_host: URL!
  """Validate SSL Certificates of upstream servers"""
  internal_host_ssl_validation: Boolean
  client_id: query_outposts_proxy_list_oneOf_0_results_items_client_id
  client_secret: query_outposts_proxy_list_oneOf_0_results_items_client_secret
  oidc_configuration: OpenIDConnectConfiguration!
  cookie_secret: String
  certificate: UUID
  """
  Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
  """
  skip_path_regex: String
  """
  Set a custom HTTP-Basic Authentication header based on values from authentik.
  """
  basic_auth_enabled: Boolean
  """
  User/Group Attribute used for the password part of the HTTP-Basic Header.
  """
  basic_auth_password_attribute: String
  """
  User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
  """
  basic_auth_user_attribute: String
  mode: ProxyMode
  cookie_domain: String
  """Get token validity as second count"""
  access_token_validity: Float
  """
  When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
  """
  intercept_header_auth: Boolean
  """
  Get all the scope names the outpost should request,
  including custom-defined ones
  """
  scopes_to_request: [String]!
  """Internal application name, used in URLs."""
  assigned_application_slug: String!
  """Application's display Name."""
  assigned_application_name: String!
}

scalar query_outposts_proxy_list_oneOf_0_results_items_client_id @length(subgraph: "Authentik", max: 255)

scalar query_outposts_proxy_list_oneOf_0_results_items_client_secret @length(subgraph: "Authentik", max: 255)

"""rest_framework Serializer for OIDC Configuration"""
type OpenIDConnectConfiguration {
  issuer: String!
  authorization_endpoint: String!
  token_endpoint: String!
  userinfo_endpoint: String!
  end_session_endpoint: String!
  introspection_endpoint: String!
  jwks_uri: String!
  response_types_supported: [String]!
  id_token_signing_alg_values_supported: [String]!
  subject_types_supported: [String]!
  token_endpoint_auth_methods_supported: [String]!
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

enum ProxyMode {
  proxy
  forward_single
  forward_domain
}

union outposts_proxy_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ProxyOutpostConfig") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ProxyOutpostConfig | ValidationError | GenericError

union outposts_radius_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedRadiusOutpostConfigList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedRadiusOutpostConfigList | ValidationError | GenericError

type PaginatedRadiusOutpostConfigList {
  pagination: Pagination!
  results: [RadiusOutpostConfig]!
}

"""RadiusProvider Serializer"""
type RadiusOutpostConfig {
  pk: Int!
  name: String!
  application_slug: String!
  auth_flow_slug: String!
  """
  List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.
  """
  client_networks: String
  """Shared secret between clients and server to hash packets."""
  shared_secret: String
  """
  When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
  """
  mfa_support: Boolean
}

union outposts_radius_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RadiusOutpostConfig") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RadiusOutpostConfig | ValidationError | GenericError

union outposts_service_connections_all_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedServiceConnectionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedServiceConnectionList | ValidationError | GenericError

type PaginatedServiceConnectionList {
  pagination: Pagination!
  results: [ServiceConnection]!
}

union outposts_service_connections_all_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ServiceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ServiceConnection | ValidationError | GenericError

union outposts_service_connections_all_state_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ServiceConnectionState") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ServiceConnectionState | ValidationError | GenericError

"""Serializer for Service connection state"""
type ServiceConnectionState {
  healthy: Boolean!
  version: String!
}

union outposts_service_connections_all_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union outposts_service_connections_all_types_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TypeCreate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TypeCreate | ValidationError | GenericError

union outposts_service_connections_docker_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedDockerServiceConnectionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedDockerServiceConnectionList | ValidationError | GenericError

type PaginatedDockerServiceConnectionList {
  pagination: Pagination!
  results: [DockerServiceConnection]!
}

"""DockerServiceConnection Serializer"""
type DockerServiceConnection {
  pk: UUID!
  name: String!
  """
  If enabled, use the local connection. Required Docker socket/Kubernetes Integration
  """
  local: Boolean
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """
  Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system.
  """
  url: String!
  """
  CA which the endpoint's Certificate is verified against. Can be left empty for no validation.
  """
  tls_verification: UUID
  """
  Certificate/Key used for authentication. Can be left empty for no authentication.
  """
  tls_authentication: UUID
}

union outposts_service_connections_docker_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DockerServiceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DockerServiceConnection | ValidationError | GenericError

union outposts_service_connections_docker_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union outposts_service_connections_kubernetes_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedKubernetesServiceConnectionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedKubernetesServiceConnectionList | ValidationError | GenericError

type PaginatedKubernetesServiceConnectionList {
  pagination: Pagination!
  results: [KubernetesServiceConnection]!
}

"""KubernetesServiceConnection Serializer"""
type KubernetesServiceConnection {
  pk: UUID!
  name: String!
  """
  If enabled, use the local connection. Required Docker socket/Kubernetes Integration
  """
  local: Boolean
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """
  Paste your kubeconfig here. authentik will automatically use the currently selected context.
  """
  kubeconfig: JSON
  """Verify SSL Certificates of the Kubernetes API endpoint"""
  verify_ssl: Boolean
}

union outposts_service_connections_kubernetes_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "KubernetesServiceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = KubernetesServiceConnection | ValidationError | GenericError

union outposts_service_connections_kubernetes_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union policies_all_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPolicyList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPolicyList | ValidationError | GenericError

type PaginatedPolicyList {
  pagination: Pagination!
  results: [Policy]!
}

"""Policy Serializer"""
type Policy {
  pk: UUID!
  name: String!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """Return objects policy is bound to"""
  bound_to: Int!
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

union policies_all_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Policy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Policy | ValidationError | GenericError

union policies_all_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union policies_all_cache_info_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Cache") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Cache | ValidationError | GenericError

union policies_all_types_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TypeCreate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TypeCreate | ValidationError | GenericError

union policies_bindings_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPolicyBindingList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPolicyBindingList | ValidationError | GenericError

type PaginatedPolicyBindingList {
  pagination: Pagination!
  results: [PolicyBinding]!
}

"""PolicyBinding Serializer"""
type PolicyBinding {
  pk: UUID!
  policy: UUID
  group: UUID
  user: Int
  policy_obj: Policy!
  group_obj: Group!
  user_obj: User!
  target: UUID!
  """Negates the outcome of the policy. Messages are unaffected."""
  negate: Boolean
  enabled: Boolean
  order: Int!
  """Timeout after which Policy execution is terminated."""
  timeout: NonNegativeInt
  """Result if the Policy execution fails."""
  failure_result: Boolean
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

union policies_bindings_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PolicyBinding") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PolicyBinding | ValidationError | GenericError

union policies_bindings_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union policies_dummy_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedDummyPolicyList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedDummyPolicyList | ValidationError | GenericError

type PaginatedDummyPolicyList {
  pagination: Pagination!
  results: [DummyPolicy]!
}

"""Dummy Policy Serializer"""
type DummyPolicy {
  pk: UUID!
  name: String!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """Return objects policy is bound to"""
  bound_to: Int!
  result: Boolean
  wait_min: Int
  wait_max: Int
}

union policies_dummy_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DummyPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DummyPolicy | ValidationError | GenericError

union policies_dummy_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union policies_event_matcher_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedEventMatcherPolicyList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedEventMatcherPolicyList | ValidationError | GenericError

type PaginatedEventMatcherPolicyList {
  pagination: Pagination!
  results: [EventMatcherPolicy]!
}

"""Event Matcher Policy Serializer"""
type EventMatcherPolicy {
  pk: UUID!
  name: String!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """Return objects policy is bound to"""
  bound_to: Int!
  action: EventActions
  """
  Matches Event's Client IP (strict matching, for network matching use an Expression Policy)
  """
  client_ip: String
  app: AppEnum
  model: ModelEnum
}

enum AppEnum {
  authentik_tenants @enum(subgraph: "Authentik", value: "\"authentik.tenants\"")
  authentik_admin @enum(subgraph: "Authentik", value: "\"authentik.admin\"")
  authentik_api @enum(subgraph: "Authentik", value: "\"authentik.api\"")
  authentik_crypto @enum(subgraph: "Authentik", value: "\"authentik.crypto\"")
  authentik_flows @enum(subgraph: "Authentik", value: "\"authentik.flows\"")
  authentik_outposts @enum(subgraph: "Authentik", value: "\"authentik.outposts\"")
  authentik_policies_dummy @enum(subgraph: "Authentik", value: "\"authentik.policies.dummy\"")
  authentik_policies_event_matcher @enum(subgraph: "Authentik", value: "\"authentik.policies.event_matcher\"")
  authentik_policies_expiry @enum(subgraph: "Authentik", value: "\"authentik.policies.expiry\"")
  authentik_policies_expression @enum(subgraph: "Authentik", value: "\"authentik.policies.expression\"")
  authentik_policies_password @enum(subgraph: "Authentik", value: "\"authentik.policies.password\"")
  authentik_policies_reputation @enum(subgraph: "Authentik", value: "\"authentik.policies.reputation\"")
  authentik_policies @enum(subgraph: "Authentik", value: "\"authentik.policies\"")
  authentik_providers_ldap @enum(subgraph: "Authentik", value: "\"authentik.providers.ldap\"")
  authentik_providers_oauth2 @enum(subgraph: "Authentik", value: "\"authentik.providers.oauth2\"")
  authentik_providers_proxy @enum(subgraph: "Authentik", value: "\"authentik.providers.proxy\"")
  authentik_providers_radius @enum(subgraph: "Authentik", value: "\"authentik.providers.radius\"")
  authentik_providers_saml @enum(subgraph: "Authentik", value: "\"authentik.providers.saml\"")
  authentik_providers_scim @enum(subgraph: "Authentik", value: "\"authentik.providers.scim\"")
  authentik_rbac @enum(subgraph: "Authentik", value: "\"authentik.rbac\"")
  authentik_recovery @enum(subgraph: "Authentik", value: "\"authentik.recovery\"")
  authentik_sources_ldap @enum(subgraph: "Authentik", value: "\"authentik.sources.ldap\"")
  authentik_sources_oauth @enum(subgraph: "Authentik", value: "\"authentik.sources.oauth\"")
  authentik_sources_plex @enum(subgraph: "Authentik", value: "\"authentik.sources.plex\"")
  authentik_sources_saml @enum(subgraph: "Authentik", value: "\"authentik.sources.saml\"")
  authentik_sources_scim @enum(subgraph: "Authentik", value: "\"authentik.sources.scim\"")
  authentik_stages_authenticator @enum(subgraph: "Authentik", value: "\"authentik.stages.authenticator\"")
  authentik_stages_authenticator_duo @enum(subgraph: "Authentik", value: "\"authentik.stages.authenticator_duo\"")
  authentik_stages_authenticator_sms @enum(subgraph: "Authentik", value: "\"authentik.stages.authenticator_sms\"")
  authentik_stages_authenticator_static @enum(subgraph: "Authentik", value: "\"authentik.stages.authenticator_static\"")
  authentik_stages_authenticator_totp @enum(subgraph: "Authentik", value: "\"authentik.stages.authenticator_totp\"")
  authentik_stages_authenticator_validate @enum(subgraph: "Authentik", value: "\"authentik.stages.authenticator_validate\"")
  authentik_stages_authenticator_webauthn @enum(subgraph: "Authentik", value: "\"authentik.stages.authenticator_webauthn\"")
  authentik_stages_captcha @enum(subgraph: "Authentik", value: "\"authentik.stages.captcha\"")
  authentik_stages_consent @enum(subgraph: "Authentik", value: "\"authentik.stages.consent\"")
  authentik_stages_deny @enum(subgraph: "Authentik", value: "\"authentik.stages.deny\"")
  authentik_stages_dummy @enum(subgraph: "Authentik", value: "\"authentik.stages.dummy\"")
  authentik_stages_email @enum(subgraph: "Authentik", value: "\"authentik.stages.email\"")
  authentik_stages_identification @enum(subgraph: "Authentik", value: "\"authentik.stages.identification\"")
  authentik_stages_invitation @enum(subgraph: "Authentik", value: "\"authentik.stages.invitation\"")
  authentik_stages_password @enum(subgraph: "Authentik", value: "\"authentik.stages.password\"")
  authentik_stages_prompt @enum(subgraph: "Authentik", value: "\"authentik.stages.prompt\"")
  authentik_stages_user_delete @enum(subgraph: "Authentik", value: "\"authentik.stages.user_delete\"")
  authentik_stages_user_login @enum(subgraph: "Authentik", value: "\"authentik.stages.user_login\"")
  authentik_stages_user_logout @enum(subgraph: "Authentik", value: "\"authentik.stages.user_logout\"")
  authentik_stages_user_write @enum(subgraph: "Authentik", value: "\"authentik.stages.user_write\"")
  authentik_brands @enum(subgraph: "Authentik", value: "\"authentik.brands\"")
  authentik_blueprints @enum(subgraph: "Authentik", value: "\"authentik.blueprints\"")
  authentik_core @enum(subgraph: "Authentik", value: "\"authentik.core\"")
  authentik_enterprise @enum(subgraph: "Authentik", value: "\"authentik.enterprise\"")
  authentik_enterprise_audit @enum(subgraph: "Authentik", value: "\"authentik.enterprise.audit\"")
  authentik_enterprise_providers_rac @enum(subgraph: "Authentik", value: "\"authentik.enterprise.providers.rac\"")
  authentik_enterprise_stages_source @enum(subgraph: "Authentik", value: "\"authentik.enterprise.stages.source\"")
  authentik_events @enum(subgraph: "Authentik", value: "\"authentik.events\"")
}

enum ModelEnum {
  authentik_tenants_domain @enum(subgraph: "Authentik", value: "\"authentik_tenants.domain\"")
  authentik_crypto_certificatekeypair @enum(subgraph: "Authentik", value: "\"authentik_crypto.certificatekeypair\"")
  authentik_flows_flow @enum(subgraph: "Authentik", value: "\"authentik_flows.flow\"")
  authentik_flows_flowstagebinding @enum(subgraph: "Authentik", value: "\"authentik_flows.flowstagebinding\"")
  authentik_outposts_dockerserviceconnection @enum(subgraph: "Authentik", value: "\"authentik_outposts.dockerserviceconnection\"")
  authentik_outposts_kubernetesserviceconnection @enum(subgraph: "Authentik", value: "\"authentik_outposts.kubernetesserviceconnection\"")
  authentik_outposts_outpost @enum(subgraph: "Authentik", value: "\"authentik_outposts.outpost\"")
  authentik_policies_dummy_dummypolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_dummy.dummypolicy\"")
  authentik_policies_event_matcher_eventmatcherpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_event_matcher.eventmatcherpolicy\"")
  authentik_policies_expiry_passwordexpirypolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_expiry.passwordexpirypolicy\"")
  authentik_policies_expression_expressionpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_expression.expressionpolicy\"")
  authentik_policies_password_passwordpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_password.passwordpolicy\"")
  authentik_policies_reputation_reputationpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_reputation.reputationpolicy\"")
  authentik_policies_policybinding @enum(subgraph: "Authentik", value: "\"authentik_policies.policybinding\"")
  authentik_providers_ldap_ldapprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_ldap.ldapprovider\"")
  authentik_providers_oauth2_scopemapping @enum(subgraph: "Authentik", value: "\"authentik_providers_oauth2.scopemapping\"")
  authentik_providers_oauth2_oauth2provider @enum(subgraph: "Authentik", value: "\"authentik_providers_oauth2.oauth2provider\"")
  authentik_providers_proxy_proxyprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_proxy.proxyprovider\"")
  authentik_providers_radius_radiusprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_radius.radiusprovider\"")
  authentik_providers_saml_samlprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_saml.samlprovider\"")
  authentik_providers_saml_samlpropertymapping @enum(subgraph: "Authentik", value: "\"authentik_providers_saml.samlpropertymapping\"")
  authentik_providers_scim_scimprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_scim.scimprovider\"")
  authentik_providers_scim_scimmapping @enum(subgraph: "Authentik", value: "\"authentik_providers_scim.scimmapping\"")
  authentik_rbac_role @enum(subgraph: "Authentik", value: "\"authentik_rbac.role\"")
  authentik_sources_ldap_ldapsource @enum(subgraph: "Authentik", value: "\"authentik_sources_ldap.ldapsource\"")
  authentik_sources_ldap_ldappropertymapping @enum(subgraph: "Authentik", value: "\"authentik_sources_ldap.ldappropertymapping\"")
  authentik_sources_oauth_oauthsource @enum(subgraph: "Authentik", value: "\"authentik_sources_oauth.oauthsource\"")
  authentik_sources_oauth_useroauthsourceconnection @enum(subgraph: "Authentik", value: "\"authentik_sources_oauth.useroauthsourceconnection\"")
  authentik_sources_plex_plexsource @enum(subgraph: "Authentik", value: "\"authentik_sources_plex.plexsource\"")
  authentik_sources_plex_plexsourceconnection @enum(subgraph: "Authentik", value: "\"authentik_sources_plex.plexsourceconnection\"")
  authentik_sources_saml_samlsource @enum(subgraph: "Authentik", value: "\"authentik_sources_saml.samlsource\"")
  authentik_sources_saml_usersamlsourceconnection @enum(subgraph: "Authentik", value: "\"authentik_sources_saml.usersamlsourceconnection\"")
  authentik_sources_scim_scimsource @enum(subgraph: "Authentik", value: "\"authentik_sources_scim.scimsource\"")
  authentik_stages_authenticator_duo_authenticatorduostage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_duo.authenticatorduostage\"")
  authentik_stages_authenticator_duo_duodevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_duo.duodevice\"")
  authentik_stages_authenticator_sms_authenticatorsmsstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_sms.authenticatorsmsstage\"")
  authentik_stages_authenticator_sms_smsdevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_sms.smsdevice\"")
  authentik_stages_authenticator_static_authenticatorstaticstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_static.authenticatorstaticstage\"")
  authentik_stages_authenticator_static_staticdevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_static.staticdevice\"")
  authentik_stages_authenticator_totp_authenticatortotpstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_totp.authenticatortotpstage\"")
  authentik_stages_authenticator_totp_totpdevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_totp.totpdevice\"")
  authentik_stages_authenticator_validate_authenticatorvalidatestage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_validate.authenticatorvalidatestage\"")
  authentik_stages_authenticator_webauthn_authenticatorwebauthnstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_webauthn.authenticatorwebauthnstage\"")
  authentik_stages_authenticator_webauthn_webauthndevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_webauthn.webauthndevice\"")
  authentik_stages_captcha_captchastage @enum(subgraph: "Authentik", value: "\"authentik_stages_captcha.captchastage\"")
  authentik_stages_consent_consentstage @enum(subgraph: "Authentik", value: "\"authentik_stages_consent.consentstage\"")
  authentik_stages_consent_userconsent @enum(subgraph: "Authentik", value: "\"authentik_stages_consent.userconsent\"")
  authentik_stages_deny_denystage @enum(subgraph: "Authentik", value: "\"authentik_stages_deny.denystage\"")
  authentik_stages_dummy_dummystage @enum(subgraph: "Authentik", value: "\"authentik_stages_dummy.dummystage\"")
  authentik_stages_email_emailstage @enum(subgraph: "Authentik", value: "\"authentik_stages_email.emailstage\"")
  authentik_stages_identification_identificationstage @enum(subgraph: "Authentik", value: "\"authentik_stages_identification.identificationstage\"")
  authentik_stages_invitation_invitationstage @enum(subgraph: "Authentik", value: "\"authentik_stages_invitation.invitationstage\"")
  authentik_stages_invitation_invitation @enum(subgraph: "Authentik", value: "\"authentik_stages_invitation.invitation\"")
  authentik_stages_password_passwordstage @enum(subgraph: "Authentik", value: "\"authentik_stages_password.passwordstage\"")
  authentik_stages_prompt_prompt @enum(subgraph: "Authentik", value: "\"authentik_stages_prompt.prompt\"")
  authentik_stages_prompt_promptstage @enum(subgraph: "Authentik", value: "\"authentik_stages_prompt.promptstage\"")
  authentik_stages_user_delete_userdeletestage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_delete.userdeletestage\"")
  authentik_stages_user_login_userloginstage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_login.userloginstage\"")
  authentik_stages_user_logout_userlogoutstage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_logout.userlogoutstage\"")
  authentik_stages_user_write_userwritestage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_write.userwritestage\"")
  authentik_brands_brand @enum(subgraph: "Authentik", value: "\"authentik_brands.brand\"")
  authentik_blueprints_blueprintinstance @enum(subgraph: "Authentik", value: "\"authentik_blueprints.blueprintinstance\"")
  authentik_core_group @enum(subgraph: "Authentik", value: "\"authentik_core.group\"")
  authentik_core_user @enum(subgraph: "Authentik", value: "\"authentik_core.user\"")
  authentik_core_application @enum(subgraph: "Authentik", value: "\"authentik_core.application\"")
  authentik_core_token @enum(subgraph: "Authentik", value: "\"authentik_core.token\"")
  authentik_enterprise_license @enum(subgraph: "Authentik", value: "\"authentik_enterprise.license\"")
  authentik_providers_rac_racprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.racprovider\"")
  authentik_providers_rac_endpoint @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.endpoint\"")
  authentik_providers_rac_racpropertymapping @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.racpropertymapping\"")
  authentik_stages_source_sourcestage @enum(subgraph: "Authentik", value: "\"authentik_stages_source.sourcestage\"")
  authentik_events_event @enum(subgraph: "Authentik", value: "\"authentik_events.event\"")
  authentik_events_notificationtransport @enum(subgraph: "Authentik", value: "\"authentik_events.notificationtransport\"")
  authentik_events_notification @enum(subgraph: "Authentik", value: "\"authentik_events.notification\"")
  authentik_events_notificationrule @enum(subgraph: "Authentik", value: "\"authentik_events.notificationrule\"")
  authentik_events_notificationwebhookmapping @enum(subgraph: "Authentik", value: "\"authentik_events.notificationwebhookmapping\"")
}

"""
Match created events with this action type. When left empty, all action types will be matched.
"""
enum queryInput_policies_event_matcher_list_action {
  authorize_application
  configuration_error
  custom_
  email_sent
  flow_execution
  impersonation_ended
  impersonation_started
  invitation_used
  login
  login_failed
  logout
  model_created
  model_deleted
  model_updated
  password_set
  policy_exception
  policy_execution
  property_mapping_exception
  secret_rotate
  secret_view
  source_linked
  suspicious_request
  system_exception
  system_task_exception
  system_task_execution
  update_available
  user_write
}

union policies_event_matcher_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "EventMatcherPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = EventMatcherPolicy | ValidationError | GenericError

union policies_event_matcher_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union policies_expression_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedExpressionPolicyList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedExpressionPolicyList | ValidationError | GenericError

type PaginatedExpressionPolicyList {
  pagination: Pagination!
  results: [ExpressionPolicy]!
}

"""Group Membership Policy Serializer"""
type ExpressionPolicy {
  pk: UUID!
  name: String!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """Return objects policy is bound to"""
  bound_to: Int!
  expression: String!
}

union policies_expression_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ExpressionPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ExpressionPolicy | ValidationError | GenericError

union policies_expression_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union policies_password_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPasswordPolicyList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPasswordPolicyList | ValidationError | GenericError

type PaginatedPasswordPolicyList {
  pagination: Pagination!
  results: [PasswordPolicy]!
}

"""Password Policy Serializer"""
type PasswordPolicy {
  pk: UUID!
  name: String!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """Return objects policy is bound to"""
  bound_to: Int!
  """Field key to check, field keys defined in Prompt stages are available."""
  password_field: String
  amount_digits: NonNegativeInt
  amount_uppercase: NonNegativeInt
  amount_lowercase: NonNegativeInt
  amount_symbols: NonNegativeInt
  length_min: NonNegativeInt
  symbol_charset: String
  error_message: String
  check_static_rules: Boolean
  check_have_i_been_pwned: Boolean
  check_zxcvbn: Boolean
  """How many times the password hash is allowed to be on haveibeenpwned"""
  hibp_allowed_count: NonNegativeInt
  """
  If the zxcvbn score is equal or less than this value, the policy will fail.
  """
  zxcvbn_score_threshold: NonNegativeInt
}

union policies_password_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PasswordPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordPolicy | ValidationError | GenericError

union policies_password_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union policies_password_expiry_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPasswordExpiryPolicyList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPasswordExpiryPolicyList | ValidationError | GenericError

type PaginatedPasswordExpiryPolicyList {
  pagination: Pagination!
  results: [PasswordExpiryPolicy]!
}

"""Password Expiry Policy Serializer"""
type PasswordExpiryPolicy {
  pk: UUID!
  name: String!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """Return objects policy is bound to"""
  bound_to: Int!
  days: Int!
  deny_only: Boolean
}

union policies_password_expiry_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PasswordExpiryPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordExpiryPolicy | ValidationError | GenericError

union policies_password_expiry_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union policies_reputation_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedReputationPolicyList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedReputationPolicyList | ValidationError | GenericError

type PaginatedReputationPolicyList {
  pagination: Pagination!
  results: [ReputationPolicy]!
}

"""Reputation Policy Serializer"""
type ReputationPolicy {
  pk: UUID!
  name: String!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """Return objects policy is bound to"""
  bound_to: Int!
  check_ip: Boolean
  check_username: Boolean
  threshold: Int
}

union policies_reputation_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ReputationPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ReputationPolicy | ValidationError | GenericError

union policies_reputation_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union policies_reputation_scores_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedReputationList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedReputationList | ValidationError | GenericError

type PaginatedReputationList {
  pagination: Pagination!
  results: [Reputation]!
}

"""Reputation Serializer"""
type Reputation {
  pk: UUID
  identifier: String!
  ip: String!
  ip_geo_data: JSON
  ip_asn_data: JSON
  score: BigInt
  updated: DateTime!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

union policies_reputation_scores_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Reputation") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Reputation | ValidationError | GenericError

union policies_reputation_scores_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union propertymappings_all_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPropertyMappingList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPropertyMappingList | ValidationError | GenericError

type PaginatedPropertyMappingList {
  pagination: Pagination!
  results: [PropertyMapping]!
}

"""PropertyMapping Serializer"""
type PropertyMapping {
  pk: UUID!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  name: String!
  expression: String!
  """Get object's component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
}

union propertymappings_all_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PropertyMapping | ValidationError | GenericError

union propertymappings_all_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union propertymappings_all_types_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TypeCreate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TypeCreate | ValidationError | GenericError

union propertymappings_ldap_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedLDAPPropertyMappingList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedLDAPPropertyMappingList | ValidationError | GenericError

type PaginatedLDAPPropertyMappingList {
  pagination: Pagination!
  results: [LDAPPropertyMapping]!
}

"""LDAP PropertyMapping Serializer"""
type LDAPPropertyMapping {
  pk: UUID!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  name: String!
  expression: String!
  """Get object's component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  object_field: String!
}

union propertymappings_ldap_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPPropertyMapping | ValidationError | GenericError

union propertymappings_ldap_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union propertymappings_notification_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedNotificationWebhookMappingList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedNotificationWebhookMappingList | ValidationError | GenericError

type PaginatedNotificationWebhookMappingList {
  pagination: Pagination!
  results: [NotificationWebhookMapping]!
}

"""NotificationWebhookMapping Serializer"""
type NotificationWebhookMapping {
  pk: UUID!
  name: String!
  expression: String!
}

union propertymappings_notification_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationWebhookMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationWebhookMapping | ValidationError | GenericError

union propertymappings_notification_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union propertymappings_rac_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedRACPropertyMappingList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedRACPropertyMappingList | ValidationError | GenericError

type PaginatedRACPropertyMappingList {
  pagination: Pagination!
  results: [RACPropertyMapping]!
}

"""RACPropertyMapping Serializer"""
type RACPropertyMapping {
  pk: UUID!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  name: String!
  expression: String
  """Get object's component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  static_settings: JSON!
}

union propertymappings_rac_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RACPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RACPropertyMapping | ValidationError | GenericError

union propertymappings_rac_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union propertymappings_saml_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSAMLPropertyMappingList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSAMLPropertyMappingList | ValidationError | GenericError

type PaginatedSAMLPropertyMappingList {
  pagination: Pagination!
  results: [SAMLPropertyMapping]!
}

"""SAMLPropertyMapping Serializer"""
type SAMLPropertyMapping {
  pk: UUID!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  name: String!
  expression: String!
  """Get object's component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  saml_name: String!
  friendly_name: String
}

union propertymappings_saml_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLPropertyMapping | ValidationError | GenericError

union propertymappings_saml_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union propertymappings_scim_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSCIMMappingList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSCIMMappingList | ValidationError | GenericError

type PaginatedSCIMMappingList {
  pagination: Pagination!
  results: [SCIMMapping]!
}

"""SCIMMapping Serializer"""
type SCIMMapping {
  pk: UUID!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  name: String!
  expression: String!
  """Get object's component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
}

union propertymappings_scim_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMMapping | ValidationError | GenericError

union propertymappings_scim_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union propertymappings_scope_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedScopeMappingList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedScopeMappingList | ValidationError | GenericError

type PaginatedScopeMappingList {
  pagination: Pagination!
  results: [ScopeMapping]!
}

"""ScopeMapping Serializer"""
type ScopeMapping {
  pk: UUID!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  name: String!
  expression: String!
  """Get object's component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """Scope name requested by the client"""
  scope_name: String!
  """
  Description shown to the user when consenting. If left empty, the user won't be informed.
  """
  description: String
}

union propertymappings_scope_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ScopeMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ScopeMapping | ValidationError | GenericError

union propertymappings_scope_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union providers_all_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedProviderList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedProviderList | ValidationError | GenericError

type PaginatedProviderList {
  pagination: Pagination!
  results: [Provider]!
}

union providers_all_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Provider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Provider | ValidationError | GenericError

union providers_all_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union providers_all_types_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TypeCreate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TypeCreate | ValidationError | GenericError

union providers_ldap_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedLDAPProviderList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedLDAPProviderList | ValidationError | GenericError

type PaginatedLDAPProviderList {
  pagination: Pagination!
  results: [LDAPProvider]!
}

"""LDAPProvider Serializer"""
type LDAPProvider {
  pk: Int!
  name: String!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  """Get object component so that we know how to edit the object"""
  component: String!
  """Internal application name, used in URLs."""
  assigned_application_slug: String!
  """Application's display Name."""
  assigned_application_name: String!
  """Internal application name, used in URLs."""
  assigned_backchannel_application_slug: String!
  """Application's display Name."""
  assigned_backchannel_application_name: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """DN under which objects are accessible."""
  base_dn: String
  """
  Users in this group can do search queries. If not set, every user can execute search queries.
  """
  search_group: UUID
  certificate: UUID
  tls_server_name: String
  """
  The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber
  """
  uid_start_number: Int
  """
  The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber
  """
  gid_start_number: Int
  outpost_set: [String]!
  search_mode: LDAPAPIAccessMode
  bind_mode: LDAPAPIAccessMode
  """
  When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
  """
  mfa_support: Boolean
}

union providers_ldap_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPProvider | ValidationError | GenericError

union providers_ldap_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union providers_oauth2_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedOAuth2ProviderList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedOAuth2ProviderList | ValidationError | GenericError

type PaginatedOAuth2ProviderList {
  pagination: Pagination!
  results: [OAuth2Provider]!
}

"""
Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable
"""
enum queryInput_providers_oauth2_list_client_type {
  confidential
  public
}

"""Configure how the issuer field of the ID Token should be filled."""
enum queryInput_providers_oauth2_list_issuer_mode {
  global
  per_provider
}

"""
Configure what data should be used as unique User Identifier. For most cases, the default should be fine.
"""
enum queryInput_providers_oauth2_list_sub_mode {
  hashed_user_id
  user_email
  user_id
  user_upn
  user_username
  user_uuid
}

union providers_oauth2_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "OAuth2Provider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OAuth2Provider | ValidationError | GenericError

union providers_oauth2_preview_user_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PropertyMappingPreview") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PropertyMappingPreview | GenericError

"""
Preview how the current user is mapped via the property mappings selected in a provider
"""
type PropertyMappingPreview {
  preview: JSON!
}

union providers_oauth2_setup_urls_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "OAuth2ProviderSetupURLs") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OAuth2ProviderSetupURLs | ValidationError | GenericError

"""OAuth2 Provider Metadata serializer"""
type OAuth2ProviderSetupURLs {
  issuer: String!
  authorize: String!
  token: String!
  user_info: String!
  provider_info: String!
  logout: String!
  jwks: String!
}

union providers_oauth2_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union providers_proxy_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedProxyProviderList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedProxyProviderList | ValidationError | GenericError

type PaginatedProxyProviderList {
  pagination: Pagination!
  results: [ProxyProvider]!
}

"""ProxyProvider Serializer"""
type ProxyProvider {
  pk: Int!
  name: String!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  """Get object component so that we know how to edit the object"""
  component: String!
  """Internal application name, used in URLs."""
  assigned_application_slug: String!
  """Application's display Name."""
  assigned_application_name: String!
  """Internal application name, used in URLs."""
  assigned_backchannel_application_slug: String!
  """Application's display Name."""
  assigned_backchannel_application_name: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  client_id: String!
  internal_host: URL
  external_host: URL!
  """Validate SSL Certificates of upstream servers"""
  internal_host_ssl_validation: Boolean
  certificate: UUID
  """
  Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
  """
  skip_path_regex: String
  """
  Set a custom HTTP-Basic Authentication header based on values from authentik.
  """
  basic_auth_enabled: Boolean
  """
  User/Group Attribute used for the password part of the HTTP-Basic Header.
  """
  basic_auth_password_attribute: String
  """
  User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
  """
  basic_auth_user_attribute: String
  mode: ProxyMode
  """
  When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
  """
  intercept_header_auth: Boolean
  redirect_uris: String!
  cookie_domain: String
  jwks_sources: [UUID]
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  access_token_validity: String
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  refresh_token_validity: String
  outpost_set: [String]!
}

union providers_proxy_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ProxyProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ProxyProvider | ValidationError | GenericError

union providers_proxy_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union providers_rac_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedRACProviderList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedRACProviderList | ValidationError | GenericError

type PaginatedRACProviderList {
  pagination: Pagination!
  results: [RACProvider]!
}

"""RACProvider Serializer"""
type RACProvider {
  pk: Int!
  name: String!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  """Get object component so that we know how to edit the object"""
  component: String!
  """Internal application name, used in URLs."""
  assigned_application_slug: String!
  """Application's display Name."""
  assigned_application_name: String!
  """Internal application name, used in URLs."""
  assigned_backchannel_application_slug: String!
  """Application's display Name."""
  assigned_backchannel_application_name: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  settings: JSON
  outpost_set: [String]!
  """
  Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
  """
  connection_expiry: String
  """When set to true, connection tokens will be deleted upon disconnect."""
  delete_token_on_disconnect: Boolean
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

union providers_rac_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RACProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RACProvider | ValidationError | GenericError

union providers_rac_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union providers_radius_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedRadiusProviderList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedRadiusProviderList | ValidationError | GenericError

type PaginatedRadiusProviderList {
  pagination: Pagination!
  results: [RadiusProvider]!
}

"""RadiusProvider Serializer"""
type RadiusProvider {
  pk: Int!
  name: String!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  """Get object component so that we know how to edit the object"""
  component: String!
  """Internal application name, used in URLs."""
  assigned_application_slug: String!
  """Application's display Name."""
  assigned_application_name: String!
  """Internal application name, used in URLs."""
  assigned_backchannel_application_slug: String!
  """Application's display Name."""
  assigned_backchannel_application_name: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """
  List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.
  """
  client_networks: String
  """Shared secret between clients and server to hash packets."""
  shared_secret: String
  outpost_set: [String]!
  """
  When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
  """
  mfa_support: Boolean
}

union providers_radius_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RadiusProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RadiusProvider | ValidationError | GenericError

union providers_radius_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union providers_saml_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSAMLProviderList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSAMLProviderList | ValidationError | GenericError

type PaginatedSAMLProviderList {
  pagination: Pagination!
  results: [SAMLProvider]!
}

"""SAMLProvider Serializer"""
type SAMLProvider {
  pk: Int!
  name: String!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  """Get object component so that we know how to edit the object"""
  component: String!
  """Internal application name, used in URLs."""
  assigned_application_slug: String!
  """Application's display Name."""
  assigned_application_name: String!
  """Internal application name, used in URLs."""
  assigned_backchannel_application_slug: String!
  """Application's display Name."""
  assigned_backchannel_application_name: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  acs_url: URL!
  """
  Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.
  """
  audience: String
  """Also known as EntityID"""
  issuer: String
  """
  Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3).
  """
  assertion_valid_not_before: String
  """
  Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  assertion_valid_not_on_or_after: String
  """
  Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  session_valid_not_on_or_after: String
  """
  Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered
  """
  name_id_mapping: UUID
  digest_algorithm: DigestAlgorithmEnum
  signature_algorithm: SignatureAlgorithmEnum
  """Keypair used to sign outgoing Responses going to the Service Provider."""
  signing_kp: UUID
  """
  When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
  """
  verification_kp: UUID
  """
  This determines how authentik sends the response back to the Service Provider.
  """
  sp_binding: Service_Provider_Binding
  """Default relay_state value for IDP-initiated logins"""
  default_relay_state: String
  """Get metadata download URL"""
  url_download_metadata: String!
  """Get SSO Post URL"""
  url_sso_post: String!
  """Get SSO Redirect URL"""
  url_sso_redirect: String!
  """Get SSO IDP-Initiated URL"""
  url_sso_init: String!
  """Get SLO POST URL"""
  url_slo_post: String!
  """Get SLO redirect URL"""
  url_slo_redirect: String!
}

enum DigestAlgorithmEnum {
  http___www_w3_org_2000_09_xmldsig_POUND_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2000/09/xmldsig#sha1\"")
  http___www_w3_org_2001_04_xmlenc_POUND_sha256 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmlenc#sha256\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_sha384 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#sha384\"")
  http___www_w3_org_2001_04_xmlenc_POUND_sha512 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmlenc#sha512\"")
}

enum SignatureAlgorithmEnum {
  http___www_w3_org_2000_09_xmldsig_POUND_rsa_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_rsa_sha256 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_rsa_sha384 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_rsa_sha512 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha256 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha384 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha512 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512\"")
  http___www_w3_org_2000_09_xmldsig_POUND_dsa_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\"")
}

"""
This determines how authentik sends the response back to the Service Provider.
"""
type Service_Provider_Binding {
  SpBindingEnum: SpBindingEnum @resolveRoot(subgraph: "Authentik")
}

enum SpBindingEnum {
  redirect
  post
}

enum queryInput_providers_saml_list_digest_algorithm {
  http___www_w3_org_2000_09_xmldsig_POUND_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2000/09/xmldsig#sha1\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_sha384 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#sha384\"")
  http___www_w3_org_2001_04_xmlenc_POUND_sha256 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmlenc#sha256\"")
  http___www_w3_org_2001_04_xmlenc_POUND_sha512 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmlenc#sha512\"")
}

enum queryInput_providers_saml_list_signature_algorithm {
  http___www_w3_org_2000_09_xmldsig_POUND_dsa_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\"")
  http___www_w3_org_2000_09_xmldsig_POUND_rsa_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha256 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha384 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha512 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_rsa_sha256 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_rsa_sha384 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_rsa_sha512 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\"")
}

"""
This determines how authentik sends the response back to the Service Provider.
"""
enum queryInput_providers_saml_list_sp_binding {
  post
  redirect
}

union providers_saml_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLProvider | ValidationError | GenericError

union providers_saml_metadata_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLMetadata") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLMetadata | ValidationError | GenericError

"""SAML Provider Metadata serializer"""
type SAMLMetadata {
  metadata: String!
  download_url: String!
}

"""Optionally force the metadata to only include one binding."""
enum queryInput_providers_saml_metadata_retrieve_force_binding {
  urn_oasis_names_tc_SAML_2_0_bindings_HTTP_POST @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"")
  urn_oasis_names_tc_SAML_2_0_bindings_HTTP_Redirect @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"")
}

union providers_saml_preview_user_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PropertyMappingPreview") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PropertyMappingPreview | GenericError

union providers_saml_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union providers_scim_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSCIMProviderList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSCIMProviderList | ValidationError | GenericError

type PaginatedSCIMProviderList {
  pagination: Pagination!
  results: [SCIMProvider]!
}

"""SCIMProvider Serializer"""
type SCIMProvider {
  pk: Int!
  name: String!
  property_mappings: [UUID]
  """Property mappings used for group creation/updating."""
  property_mappings_group: [UUID]
  """Get object component so that we know how to edit the object"""
  component: String!
  """Internal application name, used in URLs."""
  assigned_backchannel_application_slug: String!
  """Application's display Name."""
  assigned_backchannel_application_name: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  """Base URL to SCIM requests, usually ends in /v2"""
  url: String!
  """Authentication token"""
  token: String!
  exclude_users_service_account: Boolean
  filter_group: UUID
}

union providers_scim_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMProvider | ValidationError | GenericError

union providers_scim_sync_status_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSyncStatus") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSyncStatus | ValidationError | GenericError

"""SCIM Provider sync status"""
type SCIMSyncStatus {
  is_running: Boolean!
  tasks: [SystemTask]!
}

union providers_scim_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union rac_connection_tokens_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedConnectionTokenList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedConnectionTokenList | ValidationError | GenericError

type PaginatedConnectionTokenList {
  pagination: Pagination!
  results: [ConnectionToken]!
}

"""ConnectionToken Serializer"""
type ConnectionToken {
  pk: UUID
  provider: Int!
  provider_obj: RACProvider!
  endpoint: UUID!
  endpoint_obj: Endpoint!
  user: GroupMember!
}

"""Endpoint Serializer"""
type Endpoint {
  pk: UUID!
  name: String!
  provider: Int!
  provider_obj: RACProvider!
  protocol: ProtocolEnum!
  host: String!
  settings: JSON
  property_mappings: [UUID]
  auth_mode: AuthModeEnum!
  """
  Build actual launch URL (the provider itself does not have one, just
  individual endpoints)
  """
  launch_url: String
  maximum_connections: Int
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

enum ProtocolEnum {
  rdp
  vnc
  ssh
}

enum AuthModeEnum {
  static
  prompt
}

union rac_connection_tokens_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ConnectionToken") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ConnectionToken | ValidationError | GenericError

union rac_connection_tokens_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union rac_endpoints_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedEndpointList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedEndpointList | GenericError

type PaginatedEndpointList {
  pagination: Pagination!
  results: [Endpoint]!
}

union rac_endpoints_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Endpoint") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Endpoint | ValidationError | GenericError

union rac_endpoints_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union rbac_permissions_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPermissionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPermissionList | ValidationError | GenericError

type PaginatedPermissionList {
  pagination: Pagination!
  results: [Permission]!
}

"""Global permission"""
type Permission {
  id: Int!
  name: query_rbac_permissions_list_oneOf_0_results_items_name!
  codename: query_rbac_permissions_list_oneOf_0_results_items_codename!
  model: String!
  app_label: String!
  """Human-readable app label"""
  app_label_verbose: String!
  """Human-readable model name"""
  model_verbose: String!
}

scalar query_rbac_permissions_list_oneOf_0_results_items_name @length(subgraph: "Authentik", max: 255)

scalar query_rbac_permissions_list_oneOf_0_results_items_codename @length(subgraph: "Authentik", max: 100)

union rbac_permissions_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Permission") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Permission | ValidationError | GenericError

union rbac_permissions_assigned_by_roles_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedRoleAssignedObjectPermissionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedRoleAssignedObjectPermissionList | ValidationError | GenericError

type PaginatedRoleAssignedObjectPermissionList {
  pagination: Pagination!
  results: [RoleAssignedObjectPermission]!
}

"""Roles assigned object permission serializer"""
type RoleAssignedObjectPermission {
  role_pk: String!
  name: String!
  permissions: [RoleObjectPermission]!
}

"""Role-bound object level permission"""
type RoleObjectPermission {
  id: Int!
  codename: String!
  model: String!
  app_label: String!
  object_pk: String!
  name: String!
}

enum queryInput_rbac_permissions_assigned_by_roles_list_model {
  authentik_blueprints_blueprintinstance @enum(subgraph: "Authentik", value: "\"authentik_blueprints.blueprintinstance\"")
  authentik_brands_brand @enum(subgraph: "Authentik", value: "\"authentik_brands.brand\"")
  authentik_core_application @enum(subgraph: "Authentik", value: "\"authentik_core.application\"")
  authentik_core_group @enum(subgraph: "Authentik", value: "\"authentik_core.group\"")
  authentik_core_token @enum(subgraph: "Authentik", value: "\"authentik_core.token\"")
  authentik_core_user @enum(subgraph: "Authentik", value: "\"authentik_core.user\"")
  authentik_crypto_certificatekeypair @enum(subgraph: "Authentik", value: "\"authentik_crypto.certificatekeypair\"")
  authentik_enterprise_license @enum(subgraph: "Authentik", value: "\"authentik_enterprise.license\"")
  authentik_events_event @enum(subgraph: "Authentik", value: "\"authentik_events.event\"")
  authentik_events_notification @enum(subgraph: "Authentik", value: "\"authentik_events.notification\"")
  authentik_events_notificationrule @enum(subgraph: "Authentik", value: "\"authentik_events.notificationrule\"")
  authentik_events_notificationtransport @enum(subgraph: "Authentik", value: "\"authentik_events.notificationtransport\"")
  authentik_events_notificationwebhookmapping @enum(subgraph: "Authentik", value: "\"authentik_events.notificationwebhookmapping\"")
  authentik_flows_flow @enum(subgraph: "Authentik", value: "\"authentik_flows.flow\"")
  authentik_flows_flowstagebinding @enum(subgraph: "Authentik", value: "\"authentik_flows.flowstagebinding\"")
  authentik_outposts_dockerserviceconnection @enum(subgraph: "Authentik", value: "\"authentik_outposts.dockerserviceconnection\"")
  authentik_outposts_kubernetesserviceconnection @enum(subgraph: "Authentik", value: "\"authentik_outposts.kubernetesserviceconnection\"")
  authentik_outposts_outpost @enum(subgraph: "Authentik", value: "\"authentik_outposts.outpost\"")
  authentik_policies_policybinding @enum(subgraph: "Authentik", value: "\"authentik_policies.policybinding\"")
  authentik_policies_dummy_dummypolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_dummy.dummypolicy\"")
  authentik_policies_event_matcher_eventmatcherpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_event_matcher.eventmatcherpolicy\"")
  authentik_policies_expiry_passwordexpirypolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_expiry.passwordexpirypolicy\"")
  authentik_policies_expression_expressionpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_expression.expressionpolicy\"")
  authentik_policies_password_passwordpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_password.passwordpolicy\"")
  authentik_policies_reputation_reputationpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_reputation.reputationpolicy\"")
  authentik_providers_ldap_ldapprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_ldap.ldapprovider\"")
  authentik_providers_oauth2_oauth2provider @enum(subgraph: "Authentik", value: "\"authentik_providers_oauth2.oauth2provider\"")
  authentik_providers_oauth2_scopemapping @enum(subgraph: "Authentik", value: "\"authentik_providers_oauth2.scopemapping\"")
  authentik_providers_proxy_proxyprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_proxy.proxyprovider\"")
  authentik_providers_rac_endpoint @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.endpoint\"")
  authentik_providers_rac_racpropertymapping @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.racpropertymapping\"")
  authentik_providers_rac_racprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.racprovider\"")
  authentik_providers_radius_radiusprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_radius.radiusprovider\"")
  authentik_providers_saml_samlpropertymapping @enum(subgraph: "Authentik", value: "\"authentik_providers_saml.samlpropertymapping\"")
  authentik_providers_saml_samlprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_saml.samlprovider\"")
  authentik_providers_scim_scimmapping @enum(subgraph: "Authentik", value: "\"authentik_providers_scim.scimmapping\"")
  authentik_providers_scim_scimprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_scim.scimprovider\"")
  authentik_rbac_role @enum(subgraph: "Authentik", value: "\"authentik_rbac.role\"")
  authentik_sources_ldap_ldappropertymapping @enum(subgraph: "Authentik", value: "\"authentik_sources_ldap.ldappropertymapping\"")
  authentik_sources_ldap_ldapsource @enum(subgraph: "Authentik", value: "\"authentik_sources_ldap.ldapsource\"")
  authentik_sources_oauth_oauthsource @enum(subgraph: "Authentik", value: "\"authentik_sources_oauth.oauthsource\"")
  authentik_sources_oauth_useroauthsourceconnection @enum(subgraph: "Authentik", value: "\"authentik_sources_oauth.useroauthsourceconnection\"")
  authentik_sources_plex_plexsource @enum(subgraph: "Authentik", value: "\"authentik_sources_plex.plexsource\"")
  authentik_sources_plex_plexsourceconnection @enum(subgraph: "Authentik", value: "\"authentik_sources_plex.plexsourceconnection\"")
  authentik_sources_saml_samlsource @enum(subgraph: "Authentik", value: "\"authentik_sources_saml.samlsource\"")
  authentik_sources_saml_usersamlsourceconnection @enum(subgraph: "Authentik", value: "\"authentik_sources_saml.usersamlsourceconnection\"")
  authentik_sources_scim_scimsource @enum(subgraph: "Authentik", value: "\"authentik_sources_scim.scimsource\"")
  authentik_stages_authenticator_duo_authenticatorduostage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_duo.authenticatorduostage\"")
  authentik_stages_authenticator_duo_duodevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_duo.duodevice\"")
  authentik_stages_authenticator_sms_authenticatorsmsstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_sms.authenticatorsmsstage\"")
  authentik_stages_authenticator_sms_smsdevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_sms.smsdevice\"")
  authentik_stages_authenticator_static_authenticatorstaticstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_static.authenticatorstaticstage\"")
  authentik_stages_authenticator_static_staticdevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_static.staticdevice\"")
  authentik_stages_authenticator_totp_authenticatortotpstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_totp.authenticatortotpstage\"")
  authentik_stages_authenticator_totp_totpdevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_totp.totpdevice\"")
  authentik_stages_authenticator_validate_authenticatorvalidatestage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_validate.authenticatorvalidatestage\"")
  authentik_stages_authenticator_webauthn_authenticatorwebauthnstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_webauthn.authenticatorwebauthnstage\"")
  authentik_stages_authenticator_webauthn_webauthndevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_webauthn.webauthndevice\"")
  authentik_stages_captcha_captchastage @enum(subgraph: "Authentik", value: "\"authentik_stages_captcha.captchastage\"")
  authentik_stages_consent_consentstage @enum(subgraph: "Authentik", value: "\"authentik_stages_consent.consentstage\"")
  authentik_stages_consent_userconsent @enum(subgraph: "Authentik", value: "\"authentik_stages_consent.userconsent\"")
  authentik_stages_deny_denystage @enum(subgraph: "Authentik", value: "\"authentik_stages_deny.denystage\"")
  authentik_stages_dummy_dummystage @enum(subgraph: "Authentik", value: "\"authentik_stages_dummy.dummystage\"")
  authentik_stages_email_emailstage @enum(subgraph: "Authentik", value: "\"authentik_stages_email.emailstage\"")
  authentik_stages_identification_identificationstage @enum(subgraph: "Authentik", value: "\"authentik_stages_identification.identificationstage\"")
  authentik_stages_invitation_invitation @enum(subgraph: "Authentik", value: "\"authentik_stages_invitation.invitation\"")
  authentik_stages_invitation_invitationstage @enum(subgraph: "Authentik", value: "\"authentik_stages_invitation.invitationstage\"")
  authentik_stages_password_passwordstage @enum(subgraph: "Authentik", value: "\"authentik_stages_password.passwordstage\"")
  authentik_stages_prompt_prompt @enum(subgraph: "Authentik", value: "\"authentik_stages_prompt.prompt\"")
  authentik_stages_prompt_promptstage @enum(subgraph: "Authentik", value: "\"authentik_stages_prompt.promptstage\"")
  authentik_stages_source_sourcestage @enum(subgraph: "Authentik", value: "\"authentik_stages_source.sourcestage\"")
  authentik_stages_user_delete_userdeletestage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_delete.userdeletestage\"")
  authentik_stages_user_login_userloginstage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_login.userloginstage\"")
  authentik_stages_user_logout_userlogoutstage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_logout.userlogoutstage\"")
  authentik_stages_user_write_userwritestage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_write.userwritestage\"")
  authentik_tenants_domain @enum(subgraph: "Authentik", value: "\"authentik_tenants.domain\"")
}

union rbac_permissions_assigned_by_users_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserAssignedObjectPermissionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserAssignedObjectPermissionList | ValidationError | GenericError

type PaginatedUserAssignedObjectPermissionList {
  pagination: Pagination!
  results: [UserAssignedObjectPermission]!
}

"""Users assigned object permission serializer"""
type UserAssignedObjectPermission {
  pk: Int!
  username: query_rbac_permissions_assigned_by_users_list_oneOf_0_results_items_username!
  """User's display name."""
  name: String!
  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean
  last_login: DateTime
  email: EmailAddress
  attributes: JSON
  uid: String!
  permissions: [UserObjectPermission]!
  is_superuser: Boolean!
}

scalar query_rbac_permissions_assigned_by_users_list_oneOf_0_results_items_username @regexp(subgraph: "Authentik", pattern: "^[\\w.@+-]+$") @typescript(subgraph: "Authentik", type: "string")

"""User-bound object level permission"""
type UserObjectPermission {
  id: Int!
  codename: String!
  model: String!
  app_label: String!
  object_pk: String!
  name: String!
}

enum queryInput_rbac_permissions_assigned_by_users_list_model {
  authentik_blueprints_blueprintinstance @enum(subgraph: "Authentik", value: "\"authentik_blueprints.blueprintinstance\"")
  authentik_brands_brand @enum(subgraph: "Authentik", value: "\"authentik_brands.brand\"")
  authentik_core_application @enum(subgraph: "Authentik", value: "\"authentik_core.application\"")
  authentik_core_group @enum(subgraph: "Authentik", value: "\"authentik_core.group\"")
  authentik_core_token @enum(subgraph: "Authentik", value: "\"authentik_core.token\"")
  authentik_core_user @enum(subgraph: "Authentik", value: "\"authentik_core.user\"")
  authentik_crypto_certificatekeypair @enum(subgraph: "Authentik", value: "\"authentik_crypto.certificatekeypair\"")
  authentik_enterprise_license @enum(subgraph: "Authentik", value: "\"authentik_enterprise.license\"")
  authentik_events_event @enum(subgraph: "Authentik", value: "\"authentik_events.event\"")
  authentik_events_notification @enum(subgraph: "Authentik", value: "\"authentik_events.notification\"")
  authentik_events_notificationrule @enum(subgraph: "Authentik", value: "\"authentik_events.notificationrule\"")
  authentik_events_notificationtransport @enum(subgraph: "Authentik", value: "\"authentik_events.notificationtransport\"")
  authentik_events_notificationwebhookmapping @enum(subgraph: "Authentik", value: "\"authentik_events.notificationwebhookmapping\"")
  authentik_flows_flow @enum(subgraph: "Authentik", value: "\"authentik_flows.flow\"")
  authentik_flows_flowstagebinding @enum(subgraph: "Authentik", value: "\"authentik_flows.flowstagebinding\"")
  authentik_outposts_dockerserviceconnection @enum(subgraph: "Authentik", value: "\"authentik_outposts.dockerserviceconnection\"")
  authentik_outposts_kubernetesserviceconnection @enum(subgraph: "Authentik", value: "\"authentik_outposts.kubernetesserviceconnection\"")
  authentik_outposts_outpost @enum(subgraph: "Authentik", value: "\"authentik_outposts.outpost\"")
  authentik_policies_policybinding @enum(subgraph: "Authentik", value: "\"authentik_policies.policybinding\"")
  authentik_policies_dummy_dummypolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_dummy.dummypolicy\"")
  authentik_policies_event_matcher_eventmatcherpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_event_matcher.eventmatcherpolicy\"")
  authentik_policies_expiry_passwordexpirypolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_expiry.passwordexpirypolicy\"")
  authentik_policies_expression_expressionpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_expression.expressionpolicy\"")
  authentik_policies_password_passwordpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_password.passwordpolicy\"")
  authentik_policies_reputation_reputationpolicy @enum(subgraph: "Authentik", value: "\"authentik_policies_reputation.reputationpolicy\"")
  authentik_providers_ldap_ldapprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_ldap.ldapprovider\"")
  authentik_providers_oauth2_oauth2provider @enum(subgraph: "Authentik", value: "\"authentik_providers_oauth2.oauth2provider\"")
  authentik_providers_oauth2_scopemapping @enum(subgraph: "Authentik", value: "\"authentik_providers_oauth2.scopemapping\"")
  authentik_providers_proxy_proxyprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_proxy.proxyprovider\"")
  authentik_providers_rac_endpoint @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.endpoint\"")
  authentik_providers_rac_racpropertymapping @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.racpropertymapping\"")
  authentik_providers_rac_racprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.racprovider\"")
  authentik_providers_radius_radiusprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_radius.radiusprovider\"")
  authentik_providers_saml_samlpropertymapping @enum(subgraph: "Authentik", value: "\"authentik_providers_saml.samlpropertymapping\"")
  authentik_providers_saml_samlprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_saml.samlprovider\"")
  authentik_providers_scim_scimmapping @enum(subgraph: "Authentik", value: "\"authentik_providers_scim.scimmapping\"")
  authentik_providers_scim_scimprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_scim.scimprovider\"")
  authentik_rbac_role @enum(subgraph: "Authentik", value: "\"authentik_rbac.role\"")
  authentik_sources_ldap_ldappropertymapping @enum(subgraph: "Authentik", value: "\"authentik_sources_ldap.ldappropertymapping\"")
  authentik_sources_ldap_ldapsource @enum(subgraph: "Authentik", value: "\"authentik_sources_ldap.ldapsource\"")
  authentik_sources_oauth_oauthsource @enum(subgraph: "Authentik", value: "\"authentik_sources_oauth.oauthsource\"")
  authentik_sources_oauth_useroauthsourceconnection @enum(subgraph: "Authentik", value: "\"authentik_sources_oauth.useroauthsourceconnection\"")
  authentik_sources_plex_plexsource @enum(subgraph: "Authentik", value: "\"authentik_sources_plex.plexsource\"")
  authentik_sources_plex_plexsourceconnection @enum(subgraph: "Authentik", value: "\"authentik_sources_plex.plexsourceconnection\"")
  authentik_sources_saml_samlsource @enum(subgraph: "Authentik", value: "\"authentik_sources_saml.samlsource\"")
  authentik_sources_saml_usersamlsourceconnection @enum(subgraph: "Authentik", value: "\"authentik_sources_saml.usersamlsourceconnection\"")
  authentik_sources_scim_scimsource @enum(subgraph: "Authentik", value: "\"authentik_sources_scim.scimsource\"")
  authentik_stages_authenticator_duo_authenticatorduostage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_duo.authenticatorduostage\"")
  authentik_stages_authenticator_duo_duodevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_duo.duodevice\"")
  authentik_stages_authenticator_sms_authenticatorsmsstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_sms.authenticatorsmsstage\"")
  authentik_stages_authenticator_sms_smsdevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_sms.smsdevice\"")
  authentik_stages_authenticator_static_authenticatorstaticstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_static.authenticatorstaticstage\"")
  authentik_stages_authenticator_static_staticdevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_static.staticdevice\"")
  authentik_stages_authenticator_totp_authenticatortotpstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_totp.authenticatortotpstage\"")
  authentik_stages_authenticator_totp_totpdevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_totp.totpdevice\"")
  authentik_stages_authenticator_validate_authenticatorvalidatestage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_validate.authenticatorvalidatestage\"")
  authentik_stages_authenticator_webauthn_authenticatorwebauthnstage @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_webauthn.authenticatorwebauthnstage\"")
  authentik_stages_authenticator_webauthn_webauthndevice @enum(subgraph: "Authentik", value: "\"authentik_stages_authenticator_webauthn.webauthndevice\"")
  authentik_stages_captcha_captchastage @enum(subgraph: "Authentik", value: "\"authentik_stages_captcha.captchastage\"")
  authentik_stages_consent_consentstage @enum(subgraph: "Authentik", value: "\"authentik_stages_consent.consentstage\"")
  authentik_stages_consent_userconsent @enum(subgraph: "Authentik", value: "\"authentik_stages_consent.userconsent\"")
  authentik_stages_deny_denystage @enum(subgraph: "Authentik", value: "\"authentik_stages_deny.denystage\"")
  authentik_stages_dummy_dummystage @enum(subgraph: "Authentik", value: "\"authentik_stages_dummy.dummystage\"")
  authentik_stages_email_emailstage @enum(subgraph: "Authentik", value: "\"authentik_stages_email.emailstage\"")
  authentik_stages_identification_identificationstage @enum(subgraph: "Authentik", value: "\"authentik_stages_identification.identificationstage\"")
  authentik_stages_invitation_invitation @enum(subgraph: "Authentik", value: "\"authentik_stages_invitation.invitation\"")
  authentik_stages_invitation_invitationstage @enum(subgraph: "Authentik", value: "\"authentik_stages_invitation.invitationstage\"")
  authentik_stages_password_passwordstage @enum(subgraph: "Authentik", value: "\"authentik_stages_password.passwordstage\"")
  authentik_stages_prompt_prompt @enum(subgraph: "Authentik", value: "\"authentik_stages_prompt.prompt\"")
  authentik_stages_prompt_promptstage @enum(subgraph: "Authentik", value: "\"authentik_stages_prompt.promptstage\"")
  authentik_stages_source_sourcestage @enum(subgraph: "Authentik", value: "\"authentik_stages_source.sourcestage\"")
  authentik_stages_user_delete_userdeletestage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_delete.userdeletestage\"")
  authentik_stages_user_login_userloginstage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_login.userloginstage\"")
  authentik_stages_user_logout_userlogoutstage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_logout.userlogoutstage\"")
  authentik_stages_user_write_userwritestage @enum(subgraph: "Authentik", value: "\"authentik_stages_user_write.userwritestage\"")
  authentik_tenants_domain @enum(subgraph: "Authentik", value: "\"authentik_tenants.domain\"")
}

union rbac_permissions_roles_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedExtraRoleObjectPermissionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedExtraRoleObjectPermissionList | ValidationError | GenericError

type PaginatedExtraRoleObjectPermissionList {
  pagination: Pagination!
  results: [ExtraRoleObjectPermission]!
}

"""User permission with additional object-related data"""
type ExtraRoleObjectPermission {
  id: Int!
  codename: String!
  model: String!
  app_label: String!
  object_pk: String!
  name: String!
  """Get app label from permission's model"""
  app_label_verbose: String!
  """Get model label from permission's model"""
  model_verbose: String!
  """
  Get model description from attached model. This operation takes at least
  one additional query, and the description is only shown if the user/role has the
  view_ permission on the object
  """
  object_description: String
}

union rbac_permissions_users_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedExtraUserObjectPermissionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedExtraUserObjectPermissionList | ValidationError | GenericError

type PaginatedExtraUserObjectPermissionList {
  pagination: Pagination!
  results: [ExtraUserObjectPermission]!
}

"""User permission with additional object-related data"""
type ExtraUserObjectPermission {
  id: Int!
  codename: String!
  model: String!
  app_label: String!
  object_pk: String!
  name: String!
  """Get app label from permission's model"""
  app_label_verbose: String!
  """Get model label from permission's model"""
  model_verbose: String!
  """
  Get model description from attached model. This operation takes at least
  one additional query, and the description is only shown if the user/role has the
  view_ permission on the object
  """
  object_description: String
}

union rbac_roles_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedRoleList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedRoleList | ValidationError | GenericError

type PaginatedRoleList {
  pagination: Pagination!
  results: [Role]!
}

union rbac_roles_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Role") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Role | ValidationError | GenericError

union rbac_roles_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union root_config_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Config") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Config | ValidationError | GenericError

"""Serialize authentik Config into DRF Object"""
type Config {
  error_reporting: ErrorReportingConfig!
  capabilities: [CapabilitiesEnum]!
  cache_timeout: Int!
  cache_timeout_flows: Int!
  cache_timeout_policies: Int!
  cache_timeout_reputation: Int!
}

"""Config for error reporting"""
type ErrorReportingConfig {
  enabled: Boolean!
  sentry_dsn: String!
  environment: String!
  send_pii: Boolean!
  traces_sample_rate: Float!
}

enum CapabilitiesEnum {
  can_save_media
  can_geo_ip
  can_asn
  can_impersonate
  can_debug
  is_enterprise
}

union schema_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "JSON_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = JSON_container | ValidationError | GenericError

type JSON_container {
  JSON: JSON @resolveRoot(subgraph: "Authentik")
}

enum queryInput_schema_retrieve_format {
  json
  yaml
}

enum queryInput_schema_retrieve_lang {
  af
  ar
  ar_dz @enum(subgraph: "Authentik", value: "\"ar-dz\"")
  ast
  az
  be
  bg
  bn
  br
  bs
  ca
  ckb
  cs
  cy
  da
  de
  dsb
  el
  en
  en_au @enum(subgraph: "Authentik", value: "\"en-au\"")
  en_gb @enum(subgraph: "Authentik", value: "\"en-gb\"")
  eo
  es
  es_ar @enum(subgraph: "Authentik", value: "\"es-ar\"")
  es_co @enum(subgraph: "Authentik", value: "\"es-co\"")
  es_mx @enum(subgraph: "Authentik", value: "\"es-mx\"")
  es_ni @enum(subgraph: "Authentik", value: "\"es-ni\"")
  es_ve @enum(subgraph: "Authentik", value: "\"es-ve\"")
  et
  eu
  fa
  fi
  fr
  fy
  ga
  gd
  gl
  he
  hi
  hr
  hsb
  hu
  hy
  ia
  id
  ig
  io
  is
  it
  ja
  ka
  kab
  kk
  km
  kn
  ko
  ky
  lb
  lt
  lv
  mk
  ml
  mn
  mr
  ms
  my
  nb
  ne
  nl
  nn
  os
  pa
  pl
  pt
  pt_br @enum(subgraph: "Authentik", value: "\"pt-br\"")
  ro
  ru
  sk
  sl
  sq
  sr
  sr_latn @enum(subgraph: "Authentik", value: "\"sr-latn\"")
  sv
  sw
  ta
  te
  tg
  th
  tk
  tr
  tt
  udm
  ug
  uk
  ur
  uz
  vi
  zh_hans @enum(subgraph: "Authentik", value: "\"zh-hans\"")
  zh_hant @enum(subgraph: "Authentik", value: "\"zh-hant\"")
}

union sources_all_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSourceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSourceList | ValidationError | GenericError

type PaginatedSourceList {
  pagination: Pagination!
  results: [Source]!
}

"""Source Serializer"""
type Source {
  pk: UUID!
  """Source's display Name."""
  name: String!
  slug: query_sources_all_list_oneOf_0_results_items_slug!
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  user_path_template: String
  """
  Get the URL to the Icon. If the name is /static or
  starts with http it is returned as-is
  """
  icon: String
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

scalar query_sources_all_list_oneOf_0_results_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

enum UserMatchingModeEnum {
  identifier
  email_link
  email_deny
  username_link
  username_deny
}

union sources_all_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Source") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Source | ValidationError | GenericError

union sources_all_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_all_types_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TypeCreate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TypeCreate | ValidationError | GenericError

union sources_all_user_settings_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserSetting") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserSetting | ValidationError | GenericError

"""Serializer for User settings for stages and sources"""
type UserSetting {
  object_uid: String!
  component: String!
  title: String!
  configure_url: String
  icon_url: String
}

union sources_ldap_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedLDAPSourceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedLDAPSourceList | ValidationError | GenericError

type PaginatedLDAPSourceList {
  pagination: Pagination!
  results: [LDAPSource]!
}

"""LDAP Source Serializer"""
type LDAPSource {
  pk: UUID!
  """Source's display Name."""
  name: String!
  slug: query_sources_ldap_list_oneOf_0_results_items_slug!
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  user_path_template: String
  """
  Get the URL to the Icon. If the name is /static or
  starts with http it is returned as-is
  """
  icon: String
  server_uri: URL!
  """
  Optionally verify the LDAP Server's Certificate against the CA Chain in this keypair.
  """
  peer_certificate: UUID
  """
  Client certificate to authenticate against the LDAP Server's Certificate.
  """
  client_certificate: UUID
  bind_cn: String
  start_tls: Boolean
  sni: Boolean
  base_dn: String!
  """Prepended to Base DN for User-queries."""
  additional_user_dn: String
  """Prepended to Base DN for Group-queries."""
  additional_group_dn: String
  """Consider Objects matching this filter to be Users."""
  user_object_filter: String
  """Consider Objects matching this filter to be Groups."""
  group_object_filter: String
  """Field which contains members of a group."""
  group_membership_field: String
  """Field which contains a unique Identifier."""
  object_uniqueness_field: String
  """Update internal authentik password when login succeeds with LDAP"""
  password_login_update_internal_password: Boolean
  sync_users: Boolean
  """
  When a user changes their password, sync it back to LDAP. This can only be enabled on a single LDAP source.
  """
  sync_users_password: Boolean
  sync_groups: Boolean
  sync_parent_group: UUID
  property_mappings: [UUID]
  """Property mappings used for group creation/updating."""
  property_mappings_group: [UUID]
  """Get cached source connectivity"""
  connectivity: JSON
}

scalar query_sources_ldap_list_oneOf_0_results_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_ldap_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPSource | ValidationError | GenericError

union sources_ldap_debug_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPDebug") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPDebug | ValidationError | GenericError

type LDAPDebug {
  user: [JSON]!
  group: [JSON]!
  membership: [JSON]!
}

union sources_ldap_sync_status_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPSyncStatus") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPSyncStatus | ValidationError | GenericError

"""LDAP Source sync status"""
type LDAPSyncStatus {
  is_running: Boolean!
  tasks: [SystemTask]!
}

union sources_ldap_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_oauth_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedOAuthSourceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedOAuthSourceList | ValidationError | GenericError

type PaginatedOAuthSourceList {
  pagination: Pagination!
  results: [OAuthSource]!
}

"""OAuth Source Serializer"""
type OAuthSource {
  pk: UUID!
  """Source's display Name."""
  name: String!
  slug: query_sources_oauth_list_oneOf_0_results_items_slug!
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  user_path_template: String
  """
  Get the URL to the Icon. If the name is /static or
  starts with http it is returned as-is
  """
  icon: String
  provider_type: ProviderTypeEnum!
  """
  URL used to request the initial token. This URL is only required for OAuth 1.
  """
  request_token_url: query_sources_oauth_list_oneOf_0_results_items_request_token_url
  """URL the user is redirect to to conest the flow."""
  authorization_url: query_sources_oauth_list_oneOf_0_results_items_authorization_url
  """URL used by authentik to retrieve tokens."""
  access_token_url: query_sources_oauth_list_oneOf_0_results_items_access_token_url
  """URL used by authentik to get user information."""
  profile_url: query_sources_oauth_list_oneOf_0_results_items_profile_url
  consumer_key: String!
  """Get OAuth Callback URL"""
  callback_url: String!
  additional_scopes: String
  type: SourceType!
  oidc_well_known_url: String
  oidc_jwks_url: String
  oidc_jwks: JSON
}

scalar query_sources_oauth_list_oneOf_0_results_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

enum ProviderTypeEnum {
  apple
  openidconnect
  azuread
  discord
  facebook
  github
  gitlab
  google
  mailcow
  okta
  patreon
  reddit
  twitch
  twitter
}

"""
URL used to request the initial token. This URL is only required for OAuth 1.
"""
scalar query_sources_oauth_list_oneOf_0_results_items_request_token_url @length(subgraph: "Authentik", max: 255)

"""URL the user is redirect to to conest the flow."""
scalar query_sources_oauth_list_oneOf_0_results_items_authorization_url @length(subgraph: "Authentik", max: 255)

"""URL used by authentik to retrieve tokens."""
scalar query_sources_oauth_list_oneOf_0_results_items_access_token_url @length(subgraph: "Authentik", max: 255)

"""URL used by authentik to get user information."""
scalar query_sources_oauth_list_oneOf_0_results_items_profile_url @length(subgraph: "Authentik", max: 255)

"""Serializer for SourceType"""
type SourceType {
  name: String!
  verbose_name: String!
  urls_customizable: Boolean!
  request_token_url: String
  authorization_url: String
  access_token_url: String
  profile_url: String
  oidc_well_known_url: String
  oidc_jwks_url: String
  additionalProperties: JSON @resolveRoot(subgraph: "Authentik")
}

enum queryInput_sources_oauth_list_policy_engine_mode {
  all
  any
}

"""
How the source determines if an existing user should be authenticated or a new user enrolled.
"""
enum queryInput_sources_oauth_list_user_matching_mode {
  email_deny
  email_link
  identifier
  username_deny
  username_link
}

union sources_oauth_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "OAuthSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OAuthSource | ValidationError | GenericError

union sources_oauth_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_oauth_source_types_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SourceType") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SourceType | ValidationError | GenericError

union sources_plex_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPlexSourceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPlexSourceList | ValidationError | GenericError

type PaginatedPlexSourceList {
  pagination: Pagination!
  results: [PlexSource]!
}

"""Plex Source Serializer"""
type PlexSource {
  pk: UUID!
  """Source's display Name."""
  name: String!
  slug: query_sources_plex_list_oneOf_0_results_items_slug!
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  user_path_template: String
  """
  Get the URL to the Icon. If the name is /static or
  starts with http it is returned as-is
  """
  icon: String
  """Client identifier used to talk to Plex."""
  client_id: String
  """
  Which servers a user has to be a member of to be granted access. Empty list allows every server.
  """
  allowed_servers: [String]
  """Allow friends to authenticate, even if you don't share a server."""
  allow_friends: Boolean
  """Plex token used to check friends"""
  plex_token: String!
}

scalar query_sources_plex_list_oneOf_0_results_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

enum queryInput_sources_plex_list_policy_engine_mode {
  all
  any
}

"""
How the source determines if an existing user should be authenticated or a new user enrolled.
"""
enum queryInput_sources_plex_list_user_matching_mode {
  email_deny
  email_link
  identifier
  username_deny
  username_link
}

union sources_plex_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PlexSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PlexSource | ValidationError | GenericError

union sources_plex_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_saml_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSAMLSourceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSAMLSourceList | ValidationError | GenericError

type PaginatedSAMLSourceList {
  pagination: Pagination!
  results: [SAMLSource]!
}

"""SAMLSource Serializer"""
type SAMLSource {
  pk: UUID!
  """Source's display Name."""
  name: String!
  slug: query_sources_saml_list_oneOf_0_results_items_slug!
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  user_path_template: String
  """
  Get the URL to the Icon. If the name is /static or
  starts with http it is returned as-is
  """
  icon: String
  """Flow used before authentication."""
  pre_authentication_flow: UUID!
  """Also known as Entity ID. Defaults the Metadata URL."""
  issuer: String
  """URL that the initial Login request is sent to."""
  sso_url: URL!
  """Optional URL if your IDP supports Single-Logout."""
  slo_url: URL
  """
  Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.
  """
  allow_idp_initiated: Boolean
  name_id_policy: NameIdPolicyEnum
  binding_type: BindingTypeEnum
  """
  When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
  """
  verification_kp: UUID
  """
  Keypair used to sign outgoing Responses going to the Identity Provider.
  """
  signing_kp: UUID
  digest_algorithm: DigestAlgorithmEnum
  signature_algorithm: SignatureAlgorithmEnum
  """
  Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).
  """
  temporary_user_delete_after: String
}

scalar query_sources_saml_list_oneOf_0_results_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

enum NameIdPolicyEnum {
  urn_oasis_names_tc_SAML_1_1_nameid_format_emailAddress @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"")
  urn_oasis_names_tc_SAML_2_0_nameid_format_persistent @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"")
  urn_oasis_names_tc_SAML_2_0_nameid_format_X509SubjectName @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName\"")
  urn_oasis_names_tc_SAML_2_0_nameid_format_WindowsDomainQualifiedName @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName\"")
  urn_oasis_names_tc_SAML_2_0_nameid_format_transient @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"")
}

enum BindingTypeEnum {
  REDIRECT
  POST
  POST_AUTO
}

enum queryInput_sources_saml_list_binding_type {
  POST
  POST_AUTO
  REDIRECT
}

enum queryInput_sources_saml_list_digest_algorithm {
  http___www_w3_org_2000_09_xmldsig_POUND_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2000/09/xmldsig#sha1\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_sha384 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#sha384\"")
  http___www_w3_org_2001_04_xmlenc_POUND_sha256 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmlenc#sha256\"")
  http___www_w3_org_2001_04_xmlenc_POUND_sha512 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmlenc#sha512\"")
}

"""
NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.
"""
enum queryInput_sources_saml_list_name_id_policy {
  urn_oasis_names_tc_SAML_1_1_nameid_format_emailAddress @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"")
  urn_oasis_names_tc_SAML_2_0_nameid_format_WindowsDomainQualifiedName @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName\"")
  urn_oasis_names_tc_SAML_2_0_nameid_format_X509SubjectName @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName\"")
  urn_oasis_names_tc_SAML_2_0_nameid_format_persistent @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"")
  urn_oasis_names_tc_SAML_2_0_nameid_format_transient @enum(subgraph: "Authentik", value: "\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"")
}

enum queryInput_sources_saml_list_policy_engine_mode {
  all
  any
}

enum queryInput_sources_saml_list_signature_algorithm {
  http___www_w3_org_2000_09_xmldsig_POUND_dsa_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\"")
  http___www_w3_org_2000_09_xmldsig_POUND_rsa_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha1 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha256 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha384 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_ecdsa_sha512 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_rsa_sha256 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_rsa_sha384 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\"")
  http___www_w3_org_2001_04_xmldsig_more_POUND_rsa_sha512 @enum(subgraph: "Authentik", value: "\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\"")
}

"""
How the source determines if an existing user should be authenticated or a new user enrolled.
"""
enum queryInput_sources_saml_list_user_matching_mode {
  email_deny
  email_link
  identifier
  username_deny
  username_link
}

union sources_saml_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLSource | ValidationError | GenericError

union sources_saml_metadata_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLMetadata") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLMetadata | ValidationError | GenericError

union sources_saml_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_scim_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSCIMSourceList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSCIMSourceList | ValidationError | GenericError

type PaginatedSCIMSourceList {
  pagination: Pagination!
  results: [SCIMSource]!
}

"""SCIMSource Serializer"""
type SCIMSource {
  pk: UUID!
  """Source's display Name."""
  name: String!
  slug: query_sources_scim_list_oneOf_0_results_items_slug!
  enabled: Boolean
  """Get object component so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  user_matching_mode: UserMatchingModeEnum
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: String
  user_path_template: String
  """Get Root URL"""
  root_url: String!
  token_obj: Token!
}

scalar query_sources_scim_list_oneOf_0_results_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_scim_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSource | ValidationError | GenericError

union sources_scim_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_scim_groups_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSCIMSourceGroupList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSCIMSourceGroupList | ValidationError | GenericError

type PaginatedSCIMSourceGroupList {
  pagination: Pagination!
  results: [SCIMSourceGroup]!
}

"""SCIMSourceGroup Serializer"""
type SCIMSourceGroup {
  id: String!
  group: UUID!
  group_obj: UserGroup!
  source: UUID!
  attributes: JSON
}

union sources_scim_groups_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSourceGroup") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSourceGroup | ValidationError | GenericError

union sources_scim_groups_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_scim_users_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSCIMSourceUserList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSCIMSourceUserList | ValidationError | GenericError

type PaginatedSCIMSourceUserList {
  pagination: Pagination!
  results: [SCIMSourceUser]!
}

"""SCIMSourceUser Serializer"""
type SCIMSourceUser {
  id: String!
  user: Int!
  user_obj: GroupMember!
  source: UUID!
  attributes: JSON
}

union sources_scim_users_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSourceUser") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSourceUser | ValidationError | GenericError

union sources_scim_users_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_user_connections_all_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserSourceConnectionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserSourceConnectionList | ValidationError | GenericError

type PaginatedUserSourceConnectionList {
  pagination: Pagination!
  results: [UserSourceConnection]!
}

"""OAuth Source Serializer"""
type UserSourceConnection {
  pk: Int!
  user: Int!
  source: Source!
  created: DateTime!
}

union sources_user_connections_all_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserSourceConnection | ValidationError | GenericError

union sources_user_connections_all_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_user_connections_oauth_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserOAuthSourceConnectionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserOAuthSourceConnectionList | ValidationError | GenericError

type PaginatedUserOAuthSourceConnectionList {
  pagination: Pagination!
  results: [UserOAuthSourceConnection]!
}

"""OAuth Source Serializer"""
type UserOAuthSourceConnection {
  pk: Int!
  user: Int!
  source: Source!
  identifier: query_sources_user_connections_oauth_list_oneOf_0_results_items_identifier!
}

scalar query_sources_user_connections_oauth_list_oneOf_0_results_items_identifier @length(subgraph: "Authentik", max: 255)

union sources_user_connections_oauth_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserOAuthSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserOAuthSourceConnection | ValidationError | GenericError

union sources_user_connections_oauth_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_user_connections_plex_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPlexSourceConnectionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPlexSourceConnectionList | ValidationError | GenericError

type PaginatedPlexSourceConnectionList {
  pagination: Pagination!
  results: [PlexSourceConnection]!
}

"""Plex Source connection Serializer"""
type PlexSourceConnection {
  pk: Int!
  user: Int!
  source: Source!
  identifier: String!
  plex_token: String!
}

union sources_user_connections_plex_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PlexSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PlexSourceConnection | ValidationError | GenericError

union sources_user_connections_plex_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union sources_user_connections_saml_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserSAMLSourceConnectionList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserSAMLSourceConnectionList | ValidationError | GenericError

type PaginatedUserSAMLSourceConnectionList {
  pagination: Pagination!
  results: [UserSAMLSourceConnection]!
}

"""SAML Source Serializer"""
type UserSAMLSourceConnection {
  pk: Int!
  user: Int!
  source: Source!
  identifier: String!
}

union sources_user_connections_saml_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserSAMLSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserSAMLSourceConnection | ValidationError | GenericError

union sources_user_connections_saml_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_all_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedStageList | ValidationError | GenericError

type PaginatedStageList {
  pagination: Pagination!
  results: [Stage]!
}

union stages_all_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Stage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Stage | ValidationError | GenericError

union stages_all_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_all_types_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TypeCreate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TypeCreate | ValidationError | GenericError

union stages_all_user_settings_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserSetting") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserSetting | ValidationError | GenericError

union stages_authenticator_duo_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedAuthenticatorDuoStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedAuthenticatorDuoStageList | ValidationError | GenericError

type PaginatedAuthenticatorDuoStageList {
  pagination: Pagination!
  results: [AuthenticatorDuoStage]!
}

"""AuthenticatorDuoStage Serializer"""
type AuthenticatorDuoStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: String
  client_id: String!
  api_hostname: String!
  admin_integration_key: String
}

union stages_authenticator_duo_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorDuoStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorDuoStage | ValidationError | GenericError

union stages_authenticator_duo_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_authenticator_sms_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedAuthenticatorSMSStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedAuthenticatorSMSStageList | ValidationError | GenericError

type PaginatedAuthenticatorSMSStageList {
  pagination: Pagination!
  results: [AuthenticatorSMSStage]!
}

"""AuthenticatorSMSStage Serializer"""
type AuthenticatorSMSStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: String
  provider: ProviderEnum!
  from_number: String!
  account_sid: String!
  auth: String!
  auth_password: String
  auth_type: AuthTypeEnum
  """
  When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future.
  """
  verify_only: Boolean
  """Optionally modify the payload being sent to custom providers."""
  mapping: UUID
}

enum ProviderEnum {
  twilio
  generic
}

enum AuthTypeEnum {
  basic
  bearer
}

enum queryInput_stages_authenticator_sms_list_auth_type {
  basic
  bearer
}

enum queryInput_stages_authenticator_sms_list_provider {
  generic
  twilio
}

union stages_authenticator_sms_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorSMSStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorSMSStage | ValidationError | GenericError

union stages_authenticator_sms_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_authenticator_static_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedAuthenticatorStaticStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedAuthenticatorStaticStageList | ValidationError | GenericError

type PaginatedAuthenticatorStaticStageList {
  pagination: Pagination!
  results: [AuthenticatorStaticStage]!
}

"""AuthenticatorStaticStage Serializer"""
type AuthenticatorStaticStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: String
  token_count: NonNegativeInt
  token_length: NonNegativeInt
}

union stages_authenticator_static_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorStaticStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorStaticStage | ValidationError | GenericError

union stages_authenticator_static_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_authenticator_totp_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedAuthenticatorTOTPStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedAuthenticatorTOTPStageList | ValidationError | GenericError

type PaginatedAuthenticatorTOTPStageList {
  pagination: Pagination!
  results: [AuthenticatorTOTPStage]!
}

"""AuthenticatorTOTPStage Serializer"""
type AuthenticatorTOTPStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: String
  digits: DigitsEnum!
}

enum DigitsEnum {
  _6 @enum(subgraph: "Authentik", value: "\"6\"")
  _8 @enum(subgraph: "Authentik", value: "\"8\"")
}

enum queryInput_stages_authenticator_totp_list_digits {
  _6 @enum(subgraph: "Authentik", value: "\"6\"")
  _8 @enum(subgraph: "Authentik", value: "\"8\"")
}

union stages_authenticator_totp_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorTOTPStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorTOTPStage | ValidationError | GenericError

union stages_authenticator_totp_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_authenticator_validate_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedAuthenticatorValidateStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedAuthenticatorValidateStageList | ValidationError | GenericError

type PaginatedAuthenticatorValidateStageList {
  pagination: Pagination!
  results: [AuthenticatorValidateStage]!
}

"""AuthenticatorValidateStage Serializer"""
type AuthenticatorValidateStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  not_configured_action: NotConfiguredActionEnum
  """Device classes which can be used to authenticate"""
  device_classes: [DeviceClassesEnum]
  """
  Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again.
  """
  configuration_stages: [UUID]
  """
  If any of the user's device has been used within this threshold, this stage will be skipped
  """
  last_auth_threshold: String
  webauthn_user_verification: UserVerificationEnum
  webauthn_allowed_device_types: [UUID]
  webauthn_allowed_device_types_obj: [WebAuthnDeviceType]!
}

enum NotConfiguredActionEnum {
  skip
  deny
  configure
}

enum DeviceClassesEnum {
  static
  totp
  webauthn
  duo
  sms
}

enum UserVerificationEnum {
  required
  preferred
  discouraged
}

enum queryInput_stages_authenticator_validate_list_not_configured_action {
  configure
  deny
  skip
}

union stages_authenticator_validate_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorValidateStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorValidateStage | ValidationError | GenericError

union stages_authenticator_validate_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_authenticator_webauthn_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedAuthenticatorWebAuthnStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedAuthenticatorWebAuthnStageList | ValidationError | GenericError

type PaginatedAuthenticatorWebAuthnStageList {
  pagination: Pagination!
  results: [AuthenticatorWebAuthnStage]!
}

"""AuthenticatorWebAuthnStage Serializer"""
type AuthenticatorWebAuthnStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: String
  user_verification: UserVerificationEnum
  authenticator_attachment: AuthenticatorAttachmentEnum
  resident_key_requirement: ResidentKeyRequirementEnum
  device_type_restrictions: [UUID]
  device_type_restrictions_obj: [WebAuthnDeviceType]!
}

enum AuthenticatorAttachmentEnum {
  platform
  cross_platform @enum(subgraph: "Authentik", value: "\"cross-platform\"")
}

enum ResidentKeyRequirementEnum {
  discouraged
  preferred
  required
}

enum queryInput_stages_authenticator_webauthn_list_authenticator_attachment {
  cross_platform @enum(subgraph: "Authentik", value: "\"cross-platform\"")
  platform
}

enum queryInput_stages_authenticator_webauthn_list_resident_key_requirement {
  discouraged
  preferred
  required
}

enum queryInput_stages_authenticator_webauthn_list_user_verification {
  discouraged
  preferred
  required
}

union stages_authenticator_webauthn_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorWebAuthnStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorWebAuthnStage | ValidationError | GenericError

union stages_authenticator_webauthn_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_authenticator_webauthn_device_types_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedWebAuthnDeviceTypeList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedWebAuthnDeviceTypeList | ValidationError | GenericError

type PaginatedWebAuthnDeviceTypeList {
  pagination: Pagination!
  results: [WebAuthnDeviceType]!
}

union stages_authenticator_webauthn_device_types_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "WebAuthnDeviceType") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = WebAuthnDeviceType | ValidationError | GenericError

union stages_captcha_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedCaptchaStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedCaptchaStageList | ValidationError | GenericError

type PaginatedCaptchaStageList {
  pagination: Pagination!
  results: [CaptchaStage]!
}

"""CaptchaStage Serializer"""
type CaptchaStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """Public key, acquired your captcha Provider."""
  public_key: String!
  js_url: String
  api_url: String
}

union stages_captcha_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CaptchaStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CaptchaStage | ValidationError | GenericError

union stages_captcha_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_consent_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedConsentStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedConsentStageList | ValidationError | GenericError

type PaginatedConsentStageList {
  pagination: Pagination!
  results: [ConsentStage]!
}

"""ConsentStage Serializer"""
type ConsentStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  mode: ConsentStageModeEnum
  """
  Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).
  """
  consent_expire_in: String
}

enum ConsentStageModeEnum {
  always_require
  permanent
  expiring
}

enum queryInput_stages_consent_list_mode {
  always_require
  expiring
  permanent
}

union stages_consent_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ConsentStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ConsentStage | ValidationError | GenericError

union stages_consent_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_deny_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedDenyStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedDenyStageList | ValidationError | GenericError

type PaginatedDenyStageList {
  pagination: Pagination!
  results: [DenyStage]!
}

"""DenyStage Serializer"""
type DenyStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  deny_message: String
}

union stages_deny_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DenyStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DenyStage | ValidationError | GenericError

union stages_deny_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_dummy_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedDummyStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedDummyStageList | ValidationError | GenericError

type PaginatedDummyStageList {
  pagination: Pagination!
  results: [DummyStage]!
}

"""DummyStage Serializer"""
type DummyStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  throw_error: Boolean
}

union stages_dummy_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DummyStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DummyStage | ValidationError | GenericError

union stages_dummy_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_email_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedEmailStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedEmailStageList | ValidationError | GenericError

type PaginatedEmailStageList {
  pagination: Pagination!
  results: [EmailStage]!
}

"""EmailStage Serializer"""
type EmailStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """
  When enabled, global Email connection settings will be used and connection settings below will be ignored.
  """
  use_global_settings: Boolean
  host: String
  port: Int
  username: String
  use_tls: Boolean
  use_ssl: Boolean
  timeout: Int
  from_address: EmailAddress
  """Time in minutes the token sent is valid."""
  token_expiry: Int
  subject: String
  template: String
  """Activate users upon completion of stage."""
  activate_user_on_success: Boolean
}

union stages_email_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "EmailStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = EmailStage | ValidationError | GenericError

union stages_email_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_email_templates_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TypeCreate") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TypeCreate | ValidationError | GenericError

union stages_identification_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedIdentificationStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedIdentificationStageList | ValidationError | GenericError

type PaginatedIdentificationStageList {
  pagination: Pagination!
  results: [IdentificationStage]!
}

"""IdentificationStage Serializer"""
type IdentificationStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """
  Fields of the user object to match against. (Hold shift to select multiple options)
  """
  user_fields: [UserFieldsEnum]
  """
  When set, shows a password field, instead of showing the password field as seaprate step.
  """
  password_stage: UUID
  """When enabled, user fields are matched regardless of their casing."""
  case_insensitive_matching: Boolean
  """
  When a valid username/email has been entered, and this option is enabled, the user's username and avatar will be shown. Otherwise, the text that the user entered will be shown
  """
  show_matched_user: Boolean
  """Optional enrollment flow, which is linked at the bottom of the page."""
  enrollment_flow: UUID
  """Optional recovery flow, which is linked at the bottom of the page."""
  recovery_flow: UUID
  """Optional passwordless flow, which is linked at the bottom of the page."""
  passwordless_flow: UUID
  """Specify which sources should be shown."""
  sources: [UUID]
  show_source_labels: Boolean
  """
  When enabled, the stage will succeed and continue even when incorrect user info is entered.
  """
  pretend_user_exists: Boolean
}

enum UserFieldsEnum {
  email
  username
  upn
}

union stages_identification_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "IdentificationStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = IdentificationStage | ValidationError | GenericError

union stages_identification_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_invitation_invitations_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedInvitationList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedInvitationList | ValidationError | GenericError

type PaginatedInvitationList {
  pagination: Pagination!
  results: [Invitation]!
}

"""Invitation Serializer"""
type Invitation {
  pk: UUID!
  name: query_stages_invitation_invitations_list_oneOf_0_results_items_name!
  expires: DateTime
  fixed_data: JSON
  created_by: GroupMember!
  """When enabled, the invitation will be deleted after usage."""
  single_use: Boolean
  """When set, only the configured flow can use this invitation."""
  flow: UUID
  flow_obj: Flow!
}

scalar query_stages_invitation_invitations_list_oneOf_0_results_items_name @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union stages_invitation_invitations_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Invitation") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Invitation | ValidationError | GenericError

union stages_invitation_invitations_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_invitation_stages_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedInvitationStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedInvitationStageList | ValidationError | GenericError

type PaginatedInvitationStageList {
  pagination: Pagination!
  results: [InvitationStage]!
}

"""InvitationStage Serializer"""
type InvitationStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """
  If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given.
  """
  continue_flow_without_invitation: Boolean
}

union stages_invitation_stages_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "InvitationStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = InvitationStage | ValidationError | GenericError

union stages_invitation_stages_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_password_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPasswordStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPasswordStageList | ValidationError | GenericError

type PaginatedPasswordStageList {
  pagination: Pagination!
  results: [PasswordStage]!
}

"""PasswordStage Serializer"""
type PasswordStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """Selection of backends to test the password against."""
  backends: [BackendsEnum]!
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  """
  How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage.
  """
  failed_attempts_before_cancel: Int
}

enum BackendsEnum {
  authentik_core_auth_InbuiltBackend @enum(subgraph: "Authentik", value: "\"authentik.core.auth.InbuiltBackend\"")
  authentik_core_auth_TokenBackend @enum(subgraph: "Authentik", value: "\"authentik.core.auth.TokenBackend\"")
  authentik_sources_ldap_auth_LDAPBackend @enum(subgraph: "Authentik", value: "\"authentik.sources.ldap.auth.LDAPBackend\"")
}

union stages_password_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PasswordStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordStage | ValidationError | GenericError

union stages_password_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_prompt_prompts_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPromptList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPromptList | ValidationError | GenericError

type PaginatedPromptList {
  pagination: Pagination!
  results: [Prompt]!
}

"""Prompt Serializer"""
type Prompt {
  pk: UUID!
  name: String!
  """Name of the form field, also used to store the value"""
  field_key: String!
  label: String!
  type: PromptTypeEnum!
  required: Boolean
  """
  Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices.
  """
  placeholder: String
  """
  Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices.
  """
  initial_value: String
  order: Int
  promptstage_set: [Stage]
  sub_text: String
  placeholder_expression: Boolean
  initial_value_expression: Boolean
}

enum queryInput_stages_prompt_prompts_list_type {
  ak_locale @enum(subgraph: "Authentik", value: "\"ak-locale\"")
  checkbox
  date
  date_time @enum(subgraph: "Authentik", value: "\"date-time\"")
  dropdown
  email
  file
  hidden
  number
  password
  radio_button_group @enum(subgraph: "Authentik", value: "\"radio-button-group\"")
  separator
  static
  text
  text_area
  text_area_read_only
  text_read_only
  username
}

union stages_prompt_prompts_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Prompt") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Prompt | ValidationError | GenericError

union stages_prompt_prompts_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_prompt_stages_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedPromptStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedPromptStageList | ValidationError | GenericError

type PaginatedPromptStageList {
  pagination: Pagination!
  results: [PromptStage]!
}

"""PromptStage Serializer"""
type PromptStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  fields: [UUID]!
  validation_policies: [UUID]
}

union stages_prompt_stages_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PromptStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PromptStage | ValidationError | GenericError

union stages_prompt_stages_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_source_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedSourceStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedSourceStageList | ValidationError | GenericError

type PaginatedSourceStageList {
  pagination: Pagination!
  results: [SourceStage]!
}

"""SourceStage Serializer"""
type SourceStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  source: UUID!
  """
  Amount of time a user can take to return from the source to continue the flow (Format: hours=-1;minutes=-2;seconds=-3)
  """
  resume_timeout: String
}

union stages_source_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SourceStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SourceStage | ValidationError | GenericError

union stages_source_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_user_delete_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserDeleteStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserDeleteStageList | ValidationError | GenericError

type PaginatedUserDeleteStageList {
  pagination: Pagination!
  results: [UserDeleteStage]!
}

"""UserDeleteStage Serializer"""
type UserDeleteStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
}

union stages_user_delete_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserDeleteStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserDeleteStage | ValidationError | GenericError

union stages_user_delete_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_user_login_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserLoginStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserLoginStageList | ValidationError | GenericError

type PaginatedUserLoginStageList {
  pagination: Pagination!
  results: [UserLoginStage]!
}

"""UserLoginStage Serializer"""
type UserLoginStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  """
  Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
  """
  session_duration: String
  """Terminate all other sessions of the user logging in."""
  terminate_other_sessions: Boolean
  """
  Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)
  """
  remember_me_offset: String
  network_binding: NetworkBindingEnum
  geoip_binding: GeoipBindingEnum
}

enum NetworkBindingEnum {
  no_binding
  bind_asn
  bind_asn_network
  bind_asn_network_ip
}

enum GeoipBindingEnum {
  no_binding
  bind_continent
  bind_continent_country
  bind_continent_country_city
}

"""Bind sessions created by this stage to the configured GeoIP location"""
enum queryInput_stages_user_login_list_geoip_binding {
  bind_continent
  bind_continent_country
  bind_continent_country_city
  no_binding
}

"""Bind sessions created by this stage to the configured network"""
enum queryInput_stages_user_login_list_network_binding {
  bind_asn
  bind_asn_network
  bind_asn_network_ip
  no_binding
}

union stages_user_login_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserLoginStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserLoginStage | ValidationError | GenericError

union stages_user_login_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_user_logout_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserLogoutStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserLogoutStageList | ValidationError | GenericError

type PaginatedUserLogoutStageList {
  pagination: Pagination!
  results: [UserLogoutStage]!
}

"""UserLogoutStage Serializer"""
type UserLogoutStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
}

union stages_user_logout_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserLogoutStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserLogoutStage | ValidationError | GenericError

union stages_user_logout_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

union stages_user_write_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PaginatedUserWriteStageList") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PaginatedUserWriteStageList | ValidationError | GenericError

type PaginatedUserWriteStageList {
  pagination: Pagination!
  results: [UserWriteStage]!
}

"""UserWriteStage Serializer"""
type UserWriteStage {
  pk: UUID!
  name: String!
  """Get object type so that we know how to edit the object"""
  component: String!
  """Return object's verbose_name"""
  verbose_name: String!
  """Return object's plural verbose_name"""
  verbose_name_plural: String!
  """Return internal model name"""
  meta_model_name: String!
  flow_set: [FlowSet]
  user_creation_mode: UserCreationModeEnum
  """When set, newly created users are inactive and cannot login."""
  create_users_as_inactive: Boolean
  """Optionally add newly created users to this group."""
  create_users_group: UUID
  user_type: UserTypeEnum
  user_path_template: String
}

enum UserCreationModeEnum {
  never_create
  create_when_required
  always_create
}

enum queryInput_stages_user_write_list_user_creation_mode {
  always_create
  create_when_required
  never_create
}

enum queryInput_stages_user_write_list_user_type {
  external
  internal
  internal_service_account
  service_account
}

union stages_user_write_retrieve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserWriteStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserWriteStage | ValidationError | GenericError

union stages_user_write_used_by_list_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UsedBy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UsedBy | ValidationError | GenericError

type Mutation {
  """Settings view"""
  admin_settings_update(input: SettingsRequest_Input): admin_settings_update_response @httpOperation(subgraph: "Authentik", path: "/admin/settings/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Settings view"""
  admin_settings_partial_update(input: PatchedSettingsRequest_Input): admin_settings_partial_update_response @httpOperation(subgraph: "Authentik", path: "/admin/settings/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Get system information."""
  admin_system_create: admin_system_create_response @httpOperation(subgraph: "Authentik", path: "/admin/system/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """Viewset for Duo authenticator devices (for admins)"""
  authenticators_admin_duo_create(input: DuoDeviceRequest_Input): authenticators_admin_duo_create_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/duo/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Viewset for Duo authenticator devices (for admins)"""
  authenticators_admin_duo_update(
    """A unique integer value identifying this Duo Device."""
    id: Int!
    input: DuoDeviceRequest_Input
  ): authenticators_admin_duo_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/duo/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for Duo authenticator devices (for admins)"""
  authenticators_admin_duo_partial_update(
    """A unique integer value identifying this Duo Device."""
    id: Int!
    input: PatchedDuoDeviceRequest_Input
  ): authenticators_admin_duo_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/duo/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for Duo authenticator devices (for admins)"""
  authenticators_admin_duo_destroy(
    """A unique integer value identifying this Duo Device."""
    id: Int!
  ): authenticators_admin_duo_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/duo/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Viewset for sms authenticator devices (for admins)"""
  authenticators_admin_sms_create(input: SMSDeviceRequest_Input): authenticators_admin_sms_create_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/sms/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Viewset for sms authenticator devices (for admins)"""
  authenticators_admin_sms_update(
    """A unique integer value identifying this SMS Device."""
    id: Int!
    input: SMSDeviceRequest_Input
  ): authenticators_admin_sms_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/sms/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for sms authenticator devices (for admins)"""
  authenticators_admin_sms_partial_update(
    """A unique integer value identifying this SMS Device."""
    id: Int!
    input: PatchedSMSDeviceRequest_Input
  ): authenticators_admin_sms_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/sms/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for sms authenticator devices (for admins)"""
  authenticators_admin_sms_destroy(
    """A unique integer value identifying this SMS Device."""
    id: Int!
  ): authenticators_admin_sms_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/sms/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Viewset for static authenticator devices (for admins)"""
  authenticators_admin_static_create(input: StaticDeviceRequest_Input): authenticators_admin_static_create_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/static/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Viewset for static authenticator devices (for admins)"""
  authenticators_admin_static_update(
    """A unique integer value identifying this Static Device."""
    id: Int!
    input: StaticDeviceRequest_Input
  ): authenticators_admin_static_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/static/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for static authenticator devices (for admins)"""
  authenticators_admin_static_partial_update(
    """A unique integer value identifying this Static Device."""
    id: Int!
    input: PatchedStaticDeviceRequest_Input
  ): authenticators_admin_static_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/static/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for static authenticator devices (for admins)"""
  authenticators_admin_static_destroy(
    """A unique integer value identifying this Static Device."""
    id: Int!
  ): authenticators_admin_static_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/static/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Viewset for totp authenticator devices (for admins)"""
  authenticators_admin_totp_create(input: TOTPDeviceRequest_Input): authenticators_admin_totp_create_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/totp/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Viewset for totp authenticator devices (for admins)"""
  authenticators_admin_totp_update(
    """A unique integer value identifying this TOTP Device."""
    id: Int!
    input: TOTPDeviceRequest_Input
  ): authenticators_admin_totp_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/totp/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for totp authenticator devices (for admins)"""
  authenticators_admin_totp_partial_update(
    """A unique integer value identifying this TOTP Device."""
    id: Int!
    input: PatchedTOTPDeviceRequest_Input
  ): authenticators_admin_totp_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/totp/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for totp authenticator devices (for admins)"""
  authenticators_admin_totp_destroy(
    """A unique integer value identifying this TOTP Device."""
    id: Int!
  ): authenticators_admin_totp_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/totp/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Viewset for WebAuthn authenticator devices (for admins)"""
  authenticators_admin_webauthn_create(input: WebAuthnDeviceRequest_Input): authenticators_admin_webauthn_create_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/webauthn/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Viewset for WebAuthn authenticator devices (for admins)"""
  authenticators_admin_webauthn_update(
    """A unique integer value identifying this WebAuthn Device."""
    id: Int!
    input: WebAuthnDeviceRequest_Input
  ): authenticators_admin_webauthn_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/webauthn/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for WebAuthn authenticator devices (for admins)"""
  authenticators_admin_webauthn_partial_update(
    """A unique integer value identifying this WebAuthn Device."""
    id: Int!
    input: PatchedWebAuthnDeviceRequest_Input
  ): authenticators_admin_webauthn_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/webauthn/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for WebAuthn authenticator devices (for admins)"""
  authenticators_admin_webauthn_destroy(
    """A unique integer value identifying this WebAuthn Device."""
    id: Int!
  ): authenticators_admin_webauthn_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/admin/webauthn/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Viewset for Duo authenticator devices"""
  authenticators_duo_update(
    """A unique integer value identifying this Duo Device."""
    id: Int!
    input: DuoDeviceRequest_Input
  ): authenticators_duo_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/duo/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for Duo authenticator devices"""
  authenticators_duo_partial_update(
    """A unique integer value identifying this Duo Device."""
    id: Int!
    input: PatchedDuoDeviceRequest_Input
  ): authenticators_duo_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/duo/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for Duo authenticator devices"""
  authenticators_duo_destroy(
    """A unique integer value identifying this Duo Device."""
    id: Int!
  ): authenticators_duo_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/duo/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Viewset for sms authenticator devices"""
  authenticators_sms_update(
    """A unique integer value identifying this SMS Device."""
    id: Int!
    input: SMSDeviceRequest_Input
  ): authenticators_sms_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/sms/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for sms authenticator devices"""
  authenticators_sms_partial_update(
    """A unique integer value identifying this SMS Device."""
    id: Int!
    input: PatchedSMSDeviceRequest_Input
  ): authenticators_sms_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/sms/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for sms authenticator devices"""
  authenticators_sms_destroy(
    """A unique integer value identifying this SMS Device."""
    id: Int!
  ): authenticators_sms_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/sms/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Viewset for static authenticator devices"""
  authenticators_static_update(
    """A unique integer value identifying this Static Device."""
    id: Int!
    input: StaticDeviceRequest_Input
  ): authenticators_static_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/static/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for static authenticator devices"""
  authenticators_static_partial_update(
    """A unique integer value identifying this Static Device."""
    id: Int!
    input: PatchedStaticDeviceRequest_Input
  ): authenticators_static_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/static/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for static authenticator devices"""
  authenticators_static_destroy(
    """A unique integer value identifying this Static Device."""
    id: Int!
  ): authenticators_static_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/static/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Viewset for totp authenticator devices"""
  authenticators_totp_update(
    """A unique integer value identifying this TOTP Device."""
    id: Int!
    input: TOTPDeviceRequest_Input
  ): authenticators_totp_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/totp/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for totp authenticator devices"""
  authenticators_totp_partial_update(
    """A unique integer value identifying this TOTP Device."""
    id: Int!
    input: PatchedTOTPDeviceRequest_Input
  ): authenticators_totp_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/totp/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for totp authenticator devices"""
  authenticators_totp_destroy(
    """A unique integer value identifying this TOTP Device."""
    id: Int!
  ): authenticators_totp_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/totp/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Viewset for WebAuthn authenticator devices"""
  authenticators_webauthn_update(
    """A unique integer value identifying this WebAuthn Device."""
    id: Int!
    input: WebAuthnDeviceRequest_Input
  ): authenticators_webauthn_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/webauthn/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Viewset for WebAuthn authenticator devices"""
  authenticators_webauthn_partial_update(
    """A unique integer value identifying this WebAuthn Device."""
    id: Int!
    input: PatchedWebAuthnDeviceRequest_Input
  ): authenticators_webauthn_partial_update_response @httpOperation(subgraph: "Authentik", path: "/authenticators/webauthn/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Viewset for WebAuthn authenticator devices"""
  authenticators_webauthn_destroy(
    """A unique integer value identifying this WebAuthn Device."""
    id: Int!
  ): authenticators_webauthn_destroy_response @httpOperation(subgraph: "Authentik", path: "/authenticators/webauthn/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Application Viewset"""
  core_applications_create(input: ApplicationRequest_Input): core_applications_create_response @httpOperation(subgraph: "Authentik", path: "/core/applications/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Application Viewset"""
  core_applications_update(
    """Internal application name, used in URLs."""
    slug: String!
    input: ApplicationRequest_Input
  ): core_applications_update_response @httpOperation(subgraph: "Authentik", path: "/core/applications/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Application Viewset"""
  core_applications_partial_update(
    """Internal application name, used in URLs."""
    slug: String!
    input: PatchedApplicationRequest_Input
  ): core_applications_partial_update_response @httpOperation(subgraph: "Authentik", path: "/core/applications/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Application Viewset"""
  core_applications_destroy(
    """Internal application name, used in URLs."""
    slug: String!
  ): core_applications_destroy_response @httpOperation(subgraph: "Authentik", path: "/core/applications/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Set application icon"""
  core_applications_set_icon_create(
    """Internal application name, used in URLs."""
    slug: String!
    input: FileUploadRequest_Input
  ): GenericError @httpOperation(subgraph: "Authentik", path: "/core/applications/{args.slug}/set_icon/", operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]], httpMethod: POST)
  """Set application icon (as URL)"""
  core_applications_set_icon_url_create(
    """Internal application name, used in URLs."""
    slug: String!
    input: FilePathRequest_Input
  ): GenericError @httpOperation(subgraph: "Authentik", path: "/core/applications/{args.slug}/set_icon_url/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """AuthenticatedSession Viewset"""
  core_authenticated_sessions_destroy(
    """A UUID string identifying this Authenticated Session."""
    uuid: UUID!
  ): core_authenticated_sessions_destroy_response @httpOperation(subgraph: "Authentik", path: "/core/authenticated_sessions/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Brand Viewset"""
  core_brands_create(input: BrandRequest_Input): core_brands_create_response @httpOperation(subgraph: "Authentik", path: "/core/brands/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Brand Viewset"""
  core_brands_update(
    """A UUID string identifying this Brand."""
    brand_uuid: UUID!
    input: BrandRequest_Input
  ): core_brands_update_response @httpOperation(subgraph: "Authentik", path: "/core/brands/{args.brand_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Brand Viewset"""
  core_brands_partial_update(
    """A UUID string identifying this Brand."""
    brand_uuid: UUID!
    input: PatchedBrandRequest_Input
  ): core_brands_partial_update_response @httpOperation(subgraph: "Authentik", path: "/core/brands/{args.brand_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Brand Viewset"""
  core_brands_destroy(
    """A UUID string identifying this Brand."""
    brand_uuid: UUID!
  ): core_brands_destroy_response @httpOperation(subgraph: "Authentik", path: "/core/brands/{args.brand_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Group Viewset"""
  core_groups_create(input: GroupRequest_Input): core_groups_create_response @httpOperation(subgraph: "Authentik", path: "/core/groups/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Group Viewset"""
  core_groups_update(
    """A UUID string identifying this Group."""
    group_uuid: UUID!
    input: GroupRequest_Input
  ): core_groups_update_response @httpOperation(subgraph: "Authentik", path: "/core/groups/{args.group_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Group Viewset"""
  core_groups_partial_update(
    """A UUID string identifying this Group."""
    group_uuid: UUID!
    input: PatchedGroupRequest_Input
  ): core_groups_partial_update_response @httpOperation(subgraph: "Authentik", path: "/core/groups/{args.group_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Group Viewset"""
  core_groups_destroy(
    """A UUID string identifying this Group."""
    group_uuid: UUID!
  ): core_groups_destroy_response @httpOperation(subgraph: "Authentik", path: "/core/groups/{args.group_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Add user to group"""
  core_groups_add_user_create(
    """A UUID string identifying this Group."""
    group_uuid: UUID!
    input: UserAccountRequest_Input
  ): core_groups_add_user_create_response @httpOperation(subgraph: "Authentik", path: "/core/groups/{args.group_uuid}/add_user/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Add user to group"""
  core_groups_remove_user_create(
    """A UUID string identifying this Group."""
    group_uuid: UUID!
    input: UserAccountRequest_Input
  ): core_groups_remove_user_create_response @httpOperation(subgraph: "Authentik", path: "/core/groups/{args.group_uuid}/remove_user/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Token Viewset"""
  core_tokens_create(input: TokenRequest_Input): core_tokens_create_response @httpOperation(subgraph: "Authentik", path: "/core/tokens/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Token Viewset"""
  core_tokens_update(identifier: String!, input: TokenRequest_Input): core_tokens_update_response @httpOperation(subgraph: "Authentik", path: "/core/tokens/{args.identifier}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Token Viewset"""
  core_tokens_partial_update(identifier: String!, input: PatchedTokenRequest_Input): core_tokens_partial_update_response @httpOperation(subgraph: "Authentik", path: "/core/tokens/{args.identifier}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Token Viewset"""
  core_tokens_destroy(identifier: String!): core_tokens_destroy_response @httpOperation(subgraph: "Authentik", path: "/core/tokens/{args.identifier}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """
  Set token key. Action is logged as event. `authentik_core.set_token_key` permission
  is required.
  """
  core_tokens_set_key_create(identifier: String!, input: TokenSetKeyRequest_Input): core_tokens_set_key_create_response @httpOperation(subgraph: "Authentik", path: "/core/tokens/{args.identifier}/set_key/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Convert data into a blueprint, validate it and apply it"""
  core_transactional_applications_update(input: TransactionApplicationRequest_Input): core_transactional_applications_update_response @httpOperation(subgraph: "Authentik", path: "/core/transactional/applications/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """UserConsent Viewset"""
  core_user_consent_destroy(
    """A unique integer value identifying this User Consent."""
    id: Int!
  ): core_user_consent_destroy_response @httpOperation(subgraph: "Authentik", path: "/core/user_consent/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """User Viewset"""
  core_users_create(input: UserRequest_Input): core_users_create_response @httpOperation(subgraph: "Authentik", path: "/core/users/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """User Viewset"""
  core_users_update(
    """A unique integer value identifying this User."""
    id: Int!
    input: UserRequest_Input
  ): core_users_update_response @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """User Viewset"""
  core_users_partial_update(
    """A unique integer value identifying this User."""
    id: Int!
    input: PatchedUserRequest_Input
  ): core_users_partial_update_response @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """User Viewset"""
  core_users_destroy(
    """A unique integer value identifying this User."""
    id: Int!
  ): core_users_destroy_response @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Impersonate a user"""
  core_users_impersonate_create(
    """A unique integer value identifying this User."""
    id: Int!
  ): core_users_impersonate_create_response @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/impersonate/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """Create a temporary link that a user can use to recover their accounts"""
  core_users_recovery_create(
    """A unique integer value identifying this User."""
    id: Int!
  ): core_users_recovery_create_response @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/recovery/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """Create a temporary link that a user can use to recover their accounts"""
  core_users_recovery_email_create(
    """A unique integer value identifying this User."""
    id: Int!
    email_stage: String!
  ): core_users_recovery_email_create_response @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/recovery_email/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST, queryParamArgMap: "{\"email_stage\":\"email_stage\"}")
  """Set password for user"""
  core_users_set_password_create(
    """A unique integer value identifying this User."""
    id: Int!
    input: UserPasswordSetRequest_Input
  ): core_users_set_password_create_response @httpOperation(subgraph: "Authentik", path: "/core/users/{args.id}/set_password/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Create a new user account that is marked as a service account"""
  core_users_service_account_create(input: UserServiceAccountRequest_Input): core_users_service_account_create_response @httpOperation(subgraph: "Authentik", path: "/core/users/service_account/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """CertificateKeyPair Viewset"""
  crypto_certificatekeypairs_create(input: CertificateKeyPairRequest_Input): crypto_certificatekeypairs_create_response @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """CertificateKeyPair Viewset"""
  crypto_certificatekeypairs_update(
    """A UUID string identifying this Certificate-Key Pair."""
    kp_uuid: UUID!
    input: CertificateKeyPairRequest_Input
  ): crypto_certificatekeypairs_update_response @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/{args.kp_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """CertificateKeyPair Viewset"""
  crypto_certificatekeypairs_partial_update(
    """A UUID string identifying this Certificate-Key Pair."""
    kp_uuid: UUID!
    input: PatchedCertificateKeyPairRequest_Input
  ): crypto_certificatekeypairs_partial_update_response @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/{args.kp_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """CertificateKeyPair Viewset"""
  crypto_certificatekeypairs_destroy(
    """A UUID string identifying this Certificate-Key Pair."""
    kp_uuid: UUID!
  ): crypto_certificatekeypairs_destroy_response @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/{args.kp_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Generate a new, self-signed certificate-key pair"""
  crypto_certificatekeypairs_generate_create(input: CertificateGenerationRequest_Input): crypto_certificatekeypairs_generate_create_response @httpOperation(subgraph: "Authentik", path: "/crypto/certificatekeypairs/generate/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """License Viewset"""
  enterprise_license_create(input: LicenseRequest_Input): enterprise_license_create_response @httpOperation(subgraph: "Authentik", path: "/enterprise/license/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """License Viewset"""
  enterprise_license_update(
    """A UUID string identifying this License."""
    license_uuid: UUID!
    input: LicenseRequest_Input
  ): enterprise_license_update_response @httpOperation(subgraph: "Authentik", path: "/enterprise/license/{args.license_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """License Viewset"""
  enterprise_license_partial_update(
    """A UUID string identifying this License."""
    license_uuid: UUID!
    input: PatchedLicenseRequest_Input
  ): enterprise_license_partial_update_response @httpOperation(subgraph: "Authentik", path: "/enterprise/license/{args.license_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """License Viewset"""
  enterprise_license_destroy(
    """A UUID string identifying this License."""
    license_uuid: UUID!
  ): enterprise_license_destroy_response @httpOperation(subgraph: "Authentik", path: "/enterprise/license/{args.license_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Event Read-Only Viewset"""
  events_events_create(input: EventRequest_Input): events_events_create_response @httpOperation(subgraph: "Authentik", path: "/events/events/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Event Read-Only Viewset"""
  events_events_update(
    """A UUID string identifying this Event."""
    event_uuid: UUID!
    input: EventRequest_Input
  ): events_events_update_response @httpOperation(subgraph: "Authentik", path: "/events/events/{args.event_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Event Read-Only Viewset"""
  events_events_partial_update(
    """A UUID string identifying this Event."""
    event_uuid: UUID!
    input: PatchedEventRequest_Input
  ): events_events_partial_update_response @httpOperation(subgraph: "Authentik", path: "/events/events/{args.event_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Event Read-Only Viewset"""
  events_events_destroy(
    """A UUID string identifying this Event."""
    event_uuid: UUID!
  ): events_events_destroy_response @httpOperation(subgraph: "Authentik", path: "/events/events/{args.event_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Notification Viewset"""
  events_notifications_update(
    """A UUID string identifying this Notification."""
    uuid: UUID!
    input: NotificationRequest_Input
  ): events_notifications_update_response @httpOperation(subgraph: "Authentik", path: "/events/notifications/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Notification Viewset"""
  events_notifications_partial_update(
    """A UUID string identifying this Notification."""
    uuid: UUID!
    input: PatchedNotificationRequest_Input
  ): events_notifications_partial_update_response @httpOperation(subgraph: "Authentik", path: "/events/notifications/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Notification Viewset"""
  events_notifications_destroy(
    """A UUID string identifying this Notification."""
    uuid: UUID!
  ): events_notifications_destroy_response @httpOperation(subgraph: "Authentik", path: "/events/notifications/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Mark all the user's notifications as seen"""
  events_notifications_mark_all_seen_create: events_notifications_mark_all_seen_create_response @httpOperation(subgraph: "Authentik", path: "/events/notifications/mark_all_seen/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """NotificationRule Viewset"""
  events_rules_create(input: NotificationRuleRequest_Input): events_rules_create_response @httpOperation(subgraph: "Authentik", path: "/events/rules/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """NotificationRule Viewset"""
  events_rules_update(
    """A UUID string identifying this Notification Rule."""
    pbm_uuid: UUID!
    input: NotificationRuleRequest_Input
  ): events_rules_update_response @httpOperation(subgraph: "Authentik", path: "/events/rules/{args.pbm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """NotificationRule Viewset"""
  events_rules_partial_update(
    """A UUID string identifying this Notification Rule."""
    pbm_uuid: UUID!
    input: PatchedNotificationRuleRequest_Input
  ): events_rules_partial_update_response @httpOperation(subgraph: "Authentik", path: "/events/rules/{args.pbm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """NotificationRule Viewset"""
  events_rules_destroy(
    """A UUID string identifying this Notification Rule."""
    pbm_uuid: UUID!
  ): events_rules_destroy_response @httpOperation(subgraph: "Authentik", path: "/events/rules/{args.pbm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Run task"""
  events_system_tasks_run_create(
    """A UUID string identifying this System Task."""
    uuid: UUID!
  ): events_system_tasks_run_create_response @httpOperation(subgraph: "Authentik", path: "/events/system_tasks/{args.uuid}/run/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """NotificationTransport Viewset"""
  events_transports_create(input: NotificationTransportRequest_Input): events_transports_create_response @httpOperation(subgraph: "Authentik", path: "/events/transports/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """NotificationTransport Viewset"""
  events_transports_update(
    """A UUID string identifying this Notification Transport."""
    uuid: UUID!
    input: NotificationTransportRequest_Input
  ): events_transports_update_response @httpOperation(subgraph: "Authentik", path: "/events/transports/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """NotificationTransport Viewset"""
  events_transports_partial_update(
    """A UUID string identifying this Notification Transport."""
    uuid: UUID!
    input: PatchedNotificationTransportRequest_Input
  ): events_transports_partial_update_response @httpOperation(subgraph: "Authentik", path: "/events/transports/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """NotificationTransport Viewset"""
  events_transports_destroy(
    """A UUID string identifying this Notification Transport."""
    uuid: UUID!
  ): events_transports_destroy_response @httpOperation(subgraph: "Authentik", path: "/events/transports/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """
  Send example notification using selected transport. Requires
  Modify permissions.
  """
  events_transports_test_create(
    """A UUID string identifying this Notification Transport."""
    uuid: UUID!
  ): events_transports_test_create_response @httpOperation(subgraph: "Authentik", path: "/events/transports/{args.uuid}/test/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """FlowStageBinding Viewset"""
  flows_bindings_create(input: FlowStageBindingRequest_Input): flows_bindings_create_response @httpOperation(subgraph: "Authentik", path: "/flows/bindings/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """FlowStageBinding Viewset"""
  flows_bindings_update(
    """A UUID string identifying this Flow Stage Binding."""
    fsb_uuid: UUID!
    input: FlowStageBindingRequest_Input
  ): flows_bindings_update_response @httpOperation(subgraph: "Authentik", path: "/flows/bindings/{args.fsb_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """FlowStageBinding Viewset"""
  flows_bindings_partial_update(
    """A UUID string identifying this Flow Stage Binding."""
    fsb_uuid: UUID!
    input: PatchedFlowStageBindingRequest_Input
  ): flows_bindings_partial_update_response @httpOperation(subgraph: "Authentik", path: "/flows/bindings/{args.fsb_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """FlowStageBinding Viewset"""
  flows_bindings_destroy(
    """A UUID string identifying this Flow Stage Binding."""
    fsb_uuid: UUID!
  ): flows_bindings_destroy_response @httpOperation(subgraph: "Authentik", path: "/flows/bindings/{args.fsb_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """
  Solve the previously retrieved challenge and advanced to the next stage.
  """
  flows_executor_solve(
    flow_slug: String!
    """Querystring as received"""
    query: String!
    input: FlowChallengeResponseRequest_Input
  ): flows_executor_solve_response @httpOperation(subgraph: "Authentik", path: "/flows/executor/{args.flow_slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST, queryParamArgMap: "{\"query\":\"query\"}")
  """Flow Viewset"""
  flows_instances_create(input: FlowRequest_Input): flows_instances_create_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Flow Viewset"""
  flows_instances_update(
    """Visible in the URL."""
    slug: String!
    input: FlowRequest_Input
  ): flows_instances_update_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Flow Viewset"""
  flows_instances_partial_update(
    """Visible in the URL."""
    slug: String!
    input: PatchedFlowRequest_Input
  ): flows_instances_partial_update_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Flow Viewset"""
  flows_instances_destroy(
    """Visible in the URL."""
    slug: String!
  ): flows_instances_destroy_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Set Flow background"""
  flows_instances_set_background_create(
    """Visible in the URL."""
    slug: String!
    input: FileUploadRequest_Input
  ): GenericError @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/set_background/", operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]], httpMethod: POST)
  """Set Flow background (as URL)"""
  flows_instances_set_background_url_create(
    """Visible in the URL."""
    slug: String!
    input: FilePathRequest_Input
  ): GenericError @httpOperation(subgraph: "Authentik", path: "/flows/instances/{args.slug}/set_background_url/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Clear flow cache"""
  flows_instances_cache_clear_create: flows_instances_cache_clear_create_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/cache_clear/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """Import flow from .yaml file"""
  flows_instances_import_create(input: FileUploadRequest_Input): flows_instances_import_create_response @httpOperation(subgraph: "Authentik", path: "/flows/instances/import/", operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]], httpMethod: POST)
  """Blueprint instances"""
  managed_blueprints_create(input: BlueprintInstanceRequest_Input): managed_blueprints_create_response @httpOperation(subgraph: "Authentik", path: "/managed/blueprints/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Blueprint instances"""
  managed_blueprints_update(
    """A UUID string identifying this Blueprint Instance."""
    instance_uuid: UUID!
    input: BlueprintInstanceRequest_Input
  ): managed_blueprints_update_response @httpOperation(subgraph: "Authentik", path: "/managed/blueprints/{args.instance_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Blueprint instances"""
  managed_blueprints_partial_update(
    """A UUID string identifying this Blueprint Instance."""
    instance_uuid: UUID!
    input: PatchedBlueprintInstanceRequest_Input
  ): managed_blueprints_partial_update_response @httpOperation(subgraph: "Authentik", path: "/managed/blueprints/{args.instance_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Blueprint instances"""
  managed_blueprints_destroy(
    """A UUID string identifying this Blueprint Instance."""
    instance_uuid: UUID!
  ): managed_blueprints_destroy_response @httpOperation(subgraph: "Authentik", path: "/managed/blueprints/{args.instance_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Apply a blueprint"""
  managed_blueprints_apply_create(
    """A UUID string identifying this Blueprint Instance."""
    instance_uuid: UUID!
  ): managed_blueprints_apply_create_response @httpOperation(subgraph: "Authentik", path: "/managed/blueprints/{args.instance_uuid}/apply/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """AccessToken Viewset"""
  oauth2_access_tokens_destroy(
    """A unique integer value identifying this OAuth2 Access Token."""
    id: Int!
  ): oauth2_access_tokens_destroy_response @httpOperation(subgraph: "Authentik", path: "/oauth2/access_tokens/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """AuthorizationCode Viewset"""
  oauth2_authorization_codes_destroy(
    """A unique integer value identifying this Authorization Code."""
    id: Int!
  ): oauth2_authorization_codes_destroy_response @httpOperation(subgraph: "Authentik", path: "/oauth2/authorization_codes/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """RefreshToken Viewset"""
  oauth2_refresh_tokens_destroy(
    """A unique integer value identifying this OAuth2 Refresh Token."""
    id: Int!
  ): oauth2_refresh_tokens_destroy_response @httpOperation(subgraph: "Authentik", path: "/oauth2/refresh_tokens/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Outpost Viewset"""
  outposts_instances_create(input: OutpostRequest_Input): outposts_instances_create_response @httpOperation(subgraph: "Authentik", path: "/outposts/instances/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Outpost Viewset"""
  outposts_instances_update(
    """A UUID string identifying this Outpost."""
    uuid: UUID!
    input: OutpostRequest_Input
  ): outposts_instances_update_response @httpOperation(subgraph: "Authentik", path: "/outposts/instances/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Outpost Viewset"""
  outposts_instances_partial_update(
    """A UUID string identifying this Outpost."""
    uuid: UUID!
    input: PatchedOutpostRequest_Input
  ): outposts_instances_partial_update_response @httpOperation(subgraph: "Authentik", path: "/outposts/instances/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Outpost Viewset"""
  outposts_instances_destroy(
    """A UUID string identifying this Outpost."""
    uuid: UUID!
  ): outposts_instances_destroy_response @httpOperation(subgraph: "Authentik", path: "/outposts/instances/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """ServiceConnection Viewset"""
  outposts_service_connections_all_destroy(
    """A UUID string identifying this Outpost Service-Connection."""
    uuid: UUID!
  ): outposts_service_connections_all_destroy_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/all/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """DockerServiceConnection Viewset"""
  outposts_service_connections_docker_create(input: DockerServiceConnectionRequest_Input): outposts_service_connections_docker_create_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/docker/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """DockerServiceConnection Viewset"""
  outposts_service_connections_docker_update(
    """A UUID string identifying this Docker Service-Connection."""
    uuid: UUID!
    input: DockerServiceConnectionRequest_Input
  ): outposts_service_connections_docker_update_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/docker/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """DockerServiceConnection Viewset"""
  outposts_service_connections_docker_partial_update(
    """A UUID string identifying this Docker Service-Connection."""
    uuid: UUID!
    input: PatchedDockerServiceConnectionRequest_Input
  ): outposts_service_connections_docker_partial_update_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/docker/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """DockerServiceConnection Viewset"""
  outposts_service_connections_docker_destroy(
    """A UUID string identifying this Docker Service-Connection."""
    uuid: UUID!
  ): outposts_service_connections_docker_destroy_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/docker/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """KubernetesServiceConnection Viewset"""
  outposts_service_connections_kubernetes_create(input: KubernetesServiceConnectionRequest_Input): outposts_service_connections_kubernetes_create_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/kubernetes/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """KubernetesServiceConnection Viewset"""
  outposts_service_connections_kubernetes_update(
    """A UUID string identifying this Kubernetes Service-Connection."""
    uuid: UUID!
    input: KubernetesServiceConnectionRequest_Input
  ): outposts_service_connections_kubernetes_update_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/kubernetes/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """KubernetesServiceConnection Viewset"""
  outposts_service_connections_kubernetes_partial_update(
    """A UUID string identifying this Kubernetes Service-Connection."""
    uuid: UUID!
    input: PatchedKubernetesServiceConnectionRequest_Input
  ): outposts_service_connections_kubernetes_partial_update_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/kubernetes/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """KubernetesServiceConnection Viewset"""
  outposts_service_connections_kubernetes_destroy(
    """A UUID string identifying this Kubernetes Service-Connection."""
    uuid: UUID!
  ): outposts_service_connections_kubernetes_destroy_response @httpOperation(subgraph: "Authentik", path: "/outposts/service_connections/kubernetes/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Policy Viewset"""
  policies_all_destroy(
    """A UUID string identifying this Policy."""
    policy_uuid: UUID!
  ): policies_all_destroy_response @httpOperation(subgraph: "Authentik", path: "/policies/all/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Test policy"""
  policies_all_test_create(
    """A UUID string identifying this Policy."""
    policy_uuid: UUID!
    input: PolicyTestRequest_Input
  ): policies_all_test_create_response @httpOperation(subgraph: "Authentik", path: "/policies/all/{args.policy_uuid}/test/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Clear policy cache"""
  policies_all_cache_clear_create: policies_all_cache_clear_create_response @httpOperation(subgraph: "Authentik", path: "/policies/all/cache_clear/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """PolicyBinding Viewset"""
  policies_bindings_create(input: PolicyBindingRequest_Input): policies_bindings_create_response @httpOperation(subgraph: "Authentik", path: "/policies/bindings/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """PolicyBinding Viewset"""
  policies_bindings_update(
    """A UUID string identifying this Policy Binding."""
    policy_binding_uuid: UUID!
    input: PolicyBindingRequest_Input
  ): policies_bindings_update_response @httpOperation(subgraph: "Authentik", path: "/policies/bindings/{args.policy_binding_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """PolicyBinding Viewset"""
  policies_bindings_partial_update(
    """A UUID string identifying this Policy Binding."""
    policy_binding_uuid: UUID!
    input: PatchedPolicyBindingRequest_Input
  ): policies_bindings_partial_update_response @httpOperation(subgraph: "Authentik", path: "/policies/bindings/{args.policy_binding_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """PolicyBinding Viewset"""
  policies_bindings_destroy(
    """A UUID string identifying this Policy Binding."""
    policy_binding_uuid: UUID!
  ): policies_bindings_destroy_response @httpOperation(subgraph: "Authentik", path: "/policies/bindings/{args.policy_binding_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Dummy Viewset"""
  policies_dummy_create(input: DummyPolicyRequest_Input): policies_dummy_create_response @httpOperation(subgraph: "Authentik", path: "/policies/dummy/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Dummy Viewset"""
  policies_dummy_update(
    """A UUID string identifying this Dummy Policy."""
    policy_uuid: UUID!
    input: DummyPolicyRequest_Input
  ): policies_dummy_update_response @httpOperation(subgraph: "Authentik", path: "/policies/dummy/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Dummy Viewset"""
  policies_dummy_partial_update(
    """A UUID string identifying this Dummy Policy."""
    policy_uuid: UUID!
    input: PatchedDummyPolicyRequest_Input
  ): policies_dummy_partial_update_response @httpOperation(subgraph: "Authentik", path: "/policies/dummy/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Dummy Viewset"""
  policies_dummy_destroy(
    """A UUID string identifying this Dummy Policy."""
    policy_uuid: UUID!
  ): policies_dummy_destroy_response @httpOperation(subgraph: "Authentik", path: "/policies/dummy/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Event Matcher Policy Viewset"""
  policies_event_matcher_create(input: EventMatcherPolicyRequest_Input): policies_event_matcher_create_response @httpOperation(subgraph: "Authentik", path: "/policies/event_matcher/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Event Matcher Policy Viewset"""
  policies_event_matcher_update(
    """A UUID string identifying this Event Matcher Policy."""
    policy_uuid: UUID!
    input: EventMatcherPolicyRequest_Input
  ): policies_event_matcher_update_response @httpOperation(subgraph: "Authentik", path: "/policies/event_matcher/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Event Matcher Policy Viewset"""
  policies_event_matcher_partial_update(
    """A UUID string identifying this Event Matcher Policy."""
    policy_uuid: UUID!
    input: PatchedEventMatcherPolicyRequest_Input
  ): policies_event_matcher_partial_update_response @httpOperation(subgraph: "Authentik", path: "/policies/event_matcher/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Event Matcher Policy Viewset"""
  policies_event_matcher_destroy(
    """A UUID string identifying this Event Matcher Policy."""
    policy_uuid: UUID!
  ): policies_event_matcher_destroy_response @httpOperation(subgraph: "Authentik", path: "/policies/event_matcher/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Source Viewset"""
  policies_expression_create(input: ExpressionPolicyRequest_Input): policies_expression_create_response @httpOperation(subgraph: "Authentik", path: "/policies/expression/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Source Viewset"""
  policies_expression_update(
    """A UUID string identifying this Expression Policy."""
    policy_uuid: UUID!
    input: ExpressionPolicyRequest_Input
  ): policies_expression_update_response @httpOperation(subgraph: "Authentik", path: "/policies/expression/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Source Viewset"""
  policies_expression_partial_update(
    """A UUID string identifying this Expression Policy."""
    policy_uuid: UUID!
    input: PatchedExpressionPolicyRequest_Input
  ): policies_expression_partial_update_response @httpOperation(subgraph: "Authentik", path: "/policies/expression/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Source Viewset"""
  policies_expression_destroy(
    """A UUID string identifying this Expression Policy."""
    policy_uuid: UUID!
  ): policies_expression_destroy_response @httpOperation(subgraph: "Authentik", path: "/policies/expression/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Password Policy Viewset"""
  policies_password_create(input: PasswordPolicyRequest_Input): policies_password_create_response @httpOperation(subgraph: "Authentik", path: "/policies/password/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Password Policy Viewset"""
  policies_password_update(
    """A UUID string identifying this Password Policy."""
    policy_uuid: UUID!
    input: PasswordPolicyRequest_Input
  ): policies_password_update_response @httpOperation(subgraph: "Authentik", path: "/policies/password/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Password Policy Viewset"""
  policies_password_partial_update(
    """A UUID string identifying this Password Policy."""
    policy_uuid: UUID!
    input: PatchedPasswordPolicyRequest_Input
  ): policies_password_partial_update_response @httpOperation(subgraph: "Authentik", path: "/policies/password/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Password Policy Viewset"""
  policies_password_destroy(
    """A UUID string identifying this Password Policy."""
    policy_uuid: UUID!
  ): policies_password_destroy_response @httpOperation(subgraph: "Authentik", path: "/policies/password/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Password Expiry Viewset"""
  policies_password_expiry_create(input: PasswordExpiryPolicyRequest_Input): policies_password_expiry_create_response @httpOperation(subgraph: "Authentik", path: "/policies/password_expiry/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Password Expiry Viewset"""
  policies_password_expiry_update(
    """A UUID string identifying this Password Expiry Policy."""
    policy_uuid: UUID!
    input: PasswordExpiryPolicyRequest_Input
  ): policies_password_expiry_update_response @httpOperation(subgraph: "Authentik", path: "/policies/password_expiry/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Password Expiry Viewset"""
  policies_password_expiry_partial_update(
    """A UUID string identifying this Password Expiry Policy."""
    policy_uuid: UUID!
    input: PatchedPasswordExpiryPolicyRequest_Input
  ): policies_password_expiry_partial_update_response @httpOperation(subgraph: "Authentik", path: "/policies/password_expiry/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Password Expiry Viewset"""
  policies_password_expiry_destroy(
    """A UUID string identifying this Password Expiry Policy."""
    policy_uuid: UUID!
  ): policies_password_expiry_destroy_response @httpOperation(subgraph: "Authentik", path: "/policies/password_expiry/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Reputation Policy Viewset"""
  policies_reputation_create(input: ReputationPolicyRequest_Input): policies_reputation_create_response @httpOperation(subgraph: "Authentik", path: "/policies/reputation/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Reputation Policy Viewset"""
  policies_reputation_update(
    """A UUID string identifying this Reputation Policy."""
    policy_uuid: UUID!
    input: ReputationPolicyRequest_Input
  ): policies_reputation_update_response @httpOperation(subgraph: "Authentik", path: "/policies/reputation/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Reputation Policy Viewset"""
  policies_reputation_partial_update(
    """A UUID string identifying this Reputation Policy."""
    policy_uuid: UUID!
    input: PatchedReputationPolicyRequest_Input
  ): policies_reputation_partial_update_response @httpOperation(subgraph: "Authentik", path: "/policies/reputation/{args.policy_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Reputation Policy Viewset"""
  policies_reputation_destroy(
    """A UUID string identifying this Reputation Policy."""
    policy_uuid: UUID!
  ): policies_reputation_destroy_response @httpOperation(subgraph: "Authentik", path: "/policies/reputation/{args.policy_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Reputation Viewset"""
  policies_reputation_scores_destroy(
    """A UUID string identifying this Reputation Score."""
    reputation_uuid: UUID!
  ): policies_reputation_scores_destroy_response @httpOperation(subgraph: "Authentik", path: "/policies/reputation/scores/{args.reputation_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """PropertyMapping Viewset"""
  propertymappings_all_destroy(
    """A UUID string identifying this Property Mapping."""
    pm_uuid: UUID!
  ): propertymappings_all_destroy_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/all/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Test Property Mapping"""
  propertymappings_all_test_create(
    """A UUID string identifying this Property Mapping."""
    pm_uuid: UUID!
    format_result: Boolean
    input: PolicyTestRequest_Input
  ): propertymappings_all_test_create_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/all/{args.pm_uuid}/test/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST, queryParamArgMap: "{\"format_result\":\"format_result\"}")
  """LDAP PropertyMapping Viewset"""
  propertymappings_ldap_create(input: LDAPPropertyMappingRequest_Input): propertymappings_ldap_create_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/ldap/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """LDAP PropertyMapping Viewset"""
  propertymappings_ldap_update(
    """A UUID string identifying this LDAP Property Mapping."""
    pm_uuid: UUID!
    input: LDAPPropertyMappingRequest_Input
  ): propertymappings_ldap_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/ldap/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """LDAP PropertyMapping Viewset"""
  propertymappings_ldap_partial_update(
    """A UUID string identifying this LDAP Property Mapping."""
    pm_uuid: UUID!
    input: PatchedLDAPPropertyMappingRequest_Input
  ): propertymappings_ldap_partial_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/ldap/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """LDAP PropertyMapping Viewset"""
  propertymappings_ldap_destroy(
    """A UUID string identifying this LDAP Property Mapping."""
    pm_uuid: UUID!
  ): propertymappings_ldap_destroy_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/ldap/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """NotificationWebhookMapping Viewset"""
  propertymappings_notification_create(input: NotificationWebhookMappingRequest_Input): propertymappings_notification_create_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/notification/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """NotificationWebhookMapping Viewset"""
  propertymappings_notification_update(
    """A UUID string identifying this Webhook Mapping."""
    pm_uuid: UUID!
    input: NotificationWebhookMappingRequest_Input
  ): propertymappings_notification_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/notification/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """NotificationWebhookMapping Viewset"""
  propertymappings_notification_partial_update(
    """A UUID string identifying this Webhook Mapping."""
    pm_uuid: UUID!
    input: PatchedNotificationWebhookMappingRequest_Input
  ): propertymappings_notification_partial_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/notification/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """NotificationWebhookMapping Viewset"""
  propertymappings_notification_destroy(
    """A UUID string identifying this Webhook Mapping."""
    pm_uuid: UUID!
  ): propertymappings_notification_destroy_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/notification/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """RACPropertyMapping Viewset"""
  propertymappings_rac_create(input: RACPropertyMappingRequest_Input): propertymappings_rac_create_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/rac/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """RACPropertyMapping Viewset"""
  propertymappings_rac_update(
    """A UUID string identifying this RAC Property Mapping."""
    pm_uuid: UUID!
    input: RACPropertyMappingRequest_Input
  ): propertymappings_rac_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/rac/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """RACPropertyMapping Viewset"""
  propertymappings_rac_partial_update(
    """A UUID string identifying this RAC Property Mapping."""
    pm_uuid: UUID!
    input: PatchedRACPropertyMappingRequest_Input
  ): propertymappings_rac_partial_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/rac/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """RACPropertyMapping Viewset"""
  propertymappings_rac_destroy(
    """A UUID string identifying this RAC Property Mapping."""
    pm_uuid: UUID!
  ): propertymappings_rac_destroy_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/rac/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """SAMLPropertyMapping Viewset"""
  propertymappings_saml_create(input: SAMLPropertyMappingRequest_Input): propertymappings_saml_create_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/saml/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """SAMLPropertyMapping Viewset"""
  propertymappings_saml_update(
    """A UUID string identifying this SAML Property Mapping."""
    pm_uuid: UUID!
    input: SAMLPropertyMappingRequest_Input
  ): propertymappings_saml_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/saml/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """SAMLPropertyMapping Viewset"""
  propertymappings_saml_partial_update(
    """A UUID string identifying this SAML Property Mapping."""
    pm_uuid: UUID!
    input: PatchedSAMLPropertyMappingRequest_Input
  ): propertymappings_saml_partial_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/saml/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """SAMLPropertyMapping Viewset"""
  propertymappings_saml_destroy(
    """A UUID string identifying this SAML Property Mapping."""
    pm_uuid: UUID!
  ): propertymappings_saml_destroy_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/saml/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """SCIMMapping Viewset"""
  propertymappings_scim_create(input: SCIMMappingRequest_Input): propertymappings_scim_create_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scim/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """SCIMMapping Viewset"""
  propertymappings_scim_update(
    """A UUID string identifying this SCIM Mapping."""
    pm_uuid: UUID!
    input: SCIMMappingRequest_Input
  ): propertymappings_scim_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scim/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """SCIMMapping Viewset"""
  propertymappings_scim_partial_update(
    """A UUID string identifying this SCIM Mapping."""
    pm_uuid: UUID!
    input: PatchedSCIMMappingRequest_Input
  ): propertymappings_scim_partial_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scim/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """SCIMMapping Viewset"""
  propertymappings_scim_destroy(
    """A UUID string identifying this SCIM Mapping."""
    pm_uuid: UUID!
  ): propertymappings_scim_destroy_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scim/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """ScopeMapping Viewset"""
  propertymappings_scope_create(input: ScopeMappingRequest_Input): propertymappings_scope_create_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scope/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """ScopeMapping Viewset"""
  propertymappings_scope_update(
    """A UUID string identifying this Scope Mapping."""
    pm_uuid: UUID!
    input: ScopeMappingRequest_Input
  ): propertymappings_scope_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scope/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """ScopeMapping Viewset"""
  propertymappings_scope_partial_update(
    """A UUID string identifying this Scope Mapping."""
    pm_uuid: UUID!
    input: PatchedScopeMappingRequest_Input
  ): propertymappings_scope_partial_update_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scope/{args.pm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """ScopeMapping Viewset"""
  propertymappings_scope_destroy(
    """A UUID string identifying this Scope Mapping."""
    pm_uuid: UUID!
  ): propertymappings_scope_destroy_response @httpOperation(subgraph: "Authentik", path: "/propertymappings/scope/{args.pm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Provider Viewset"""
  providers_all_destroy(
    """A unique integer value identifying this provider."""
    id: Int!
  ): providers_all_destroy_response @httpOperation(subgraph: "Authentik", path: "/providers/all/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """LDAPProvider Viewset"""
  providers_ldap_create(input: LDAPProviderRequest_Input): providers_ldap_create_response @httpOperation(subgraph: "Authentik", path: "/providers/ldap/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """LDAPProvider Viewset"""
  providers_ldap_update(
    """A unique integer value identifying this LDAP Provider."""
    id: Int!
    input: LDAPProviderRequest_Input
  ): providers_ldap_update_response @httpOperation(subgraph: "Authentik", path: "/providers/ldap/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """LDAPProvider Viewset"""
  providers_ldap_partial_update(
    """A unique integer value identifying this LDAP Provider."""
    id: Int!
    input: PatchedLDAPProviderRequest_Input
  ): providers_ldap_partial_update_response @httpOperation(subgraph: "Authentik", path: "/providers/ldap/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """LDAPProvider Viewset"""
  providers_ldap_destroy(
    """A unique integer value identifying this LDAP Provider."""
    id: Int!
  ): providers_ldap_destroy_response @httpOperation(subgraph: "Authentik", path: "/providers/ldap/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """OAuth2Provider Viewset"""
  providers_oauth2_create(input: OAuth2ProviderRequest_Input): providers_oauth2_create_response @httpOperation(subgraph: "Authentik", path: "/providers/oauth2/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """OAuth2Provider Viewset"""
  providers_oauth2_update(
    """A unique integer value identifying this OAuth2/OpenID Provider."""
    id: Int!
    input: OAuth2ProviderRequest_Input
  ): providers_oauth2_update_response @httpOperation(subgraph: "Authentik", path: "/providers/oauth2/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """OAuth2Provider Viewset"""
  providers_oauth2_partial_update(
    """A unique integer value identifying this OAuth2/OpenID Provider."""
    id: Int!
    input: PatchedOAuth2ProviderRequest_Input
  ): providers_oauth2_partial_update_response @httpOperation(subgraph: "Authentik", path: "/providers/oauth2/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """OAuth2Provider Viewset"""
  providers_oauth2_destroy(
    """A unique integer value identifying this OAuth2/OpenID Provider."""
    id: Int!
  ): providers_oauth2_destroy_response @httpOperation(subgraph: "Authentik", path: "/providers/oauth2/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """ProxyProvider Viewset"""
  providers_proxy_create(input: ProxyProviderRequest_Input): providers_proxy_create_response @httpOperation(subgraph: "Authentik", path: "/providers/proxy/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """ProxyProvider Viewset"""
  providers_proxy_update(
    """A unique integer value identifying this Proxy Provider."""
    id: Int!
    input: ProxyProviderRequest_Input
  ): providers_proxy_update_response @httpOperation(subgraph: "Authentik", path: "/providers/proxy/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """ProxyProvider Viewset"""
  providers_proxy_partial_update(
    """A unique integer value identifying this Proxy Provider."""
    id: Int!
    input: PatchedProxyProviderRequest_Input
  ): providers_proxy_partial_update_response @httpOperation(subgraph: "Authentik", path: "/providers/proxy/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """ProxyProvider Viewset"""
  providers_proxy_destroy(
    """A unique integer value identifying this Proxy Provider."""
    id: Int!
  ): providers_proxy_destroy_response @httpOperation(subgraph: "Authentik", path: "/providers/proxy/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """RACProvider Viewset"""
  providers_rac_create(input: RACProviderRequest_Input): providers_rac_create_response @httpOperation(subgraph: "Authentik", path: "/providers/rac/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """RACProvider Viewset"""
  providers_rac_update(
    """A unique integer value identifying this RAC Provider."""
    id: Int!
    input: RACProviderRequest_Input
  ): providers_rac_update_response @httpOperation(subgraph: "Authentik", path: "/providers/rac/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """RACProvider Viewset"""
  providers_rac_partial_update(
    """A unique integer value identifying this RAC Provider."""
    id: Int!
    input: PatchedRACProviderRequest_Input
  ): providers_rac_partial_update_response @httpOperation(subgraph: "Authentik", path: "/providers/rac/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """RACProvider Viewset"""
  providers_rac_destroy(
    """A unique integer value identifying this RAC Provider."""
    id: Int!
  ): providers_rac_destroy_response @httpOperation(subgraph: "Authentik", path: "/providers/rac/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """RadiusProvider Viewset"""
  providers_radius_create(input: RadiusProviderRequest_Input): providers_radius_create_response @httpOperation(subgraph: "Authentik", path: "/providers/radius/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """RadiusProvider Viewset"""
  providers_radius_update(
    """A unique integer value identifying this Radius Provider."""
    id: Int!
    input: RadiusProviderRequest_Input
  ): providers_radius_update_response @httpOperation(subgraph: "Authentik", path: "/providers/radius/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """RadiusProvider Viewset"""
  providers_radius_partial_update(
    """A unique integer value identifying this Radius Provider."""
    id: Int!
    input: PatchedRadiusProviderRequest_Input
  ): providers_radius_partial_update_response @httpOperation(subgraph: "Authentik", path: "/providers/radius/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """RadiusProvider Viewset"""
  providers_radius_destroy(
    """A unique integer value identifying this Radius Provider."""
    id: Int!
  ): providers_radius_destroy_response @httpOperation(subgraph: "Authentik", path: "/providers/radius/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """SAMLProvider Viewset"""
  providers_saml_create(input: SAMLProviderRequest_Input): providers_saml_create_response @httpOperation(subgraph: "Authentik", path: "/providers/saml/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """SAMLProvider Viewset"""
  providers_saml_update(
    """A unique integer value identifying this SAML Provider."""
    id: Int!
    input: SAMLProviderRequest_Input
  ): providers_saml_update_response @httpOperation(subgraph: "Authentik", path: "/providers/saml/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """SAMLProvider Viewset"""
  providers_saml_partial_update(
    """A unique integer value identifying this SAML Provider."""
    id: Int!
    input: PatchedSAMLProviderRequest_Input
  ): providers_saml_partial_update_response @httpOperation(subgraph: "Authentik", path: "/providers/saml/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """SAMLProvider Viewset"""
  providers_saml_destroy(
    """A unique integer value identifying this SAML Provider."""
    id: Int!
  ): providers_saml_destroy_response @httpOperation(subgraph: "Authentik", path: "/providers/saml/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Create provider from SAML Metadata"""
  providers_saml_import_metadata_create(input: SAMLProviderImportRequest_Input): providers_saml_import_metadata_create_response @httpOperation(subgraph: "Authentik", path: "/providers/saml/import_metadata/", operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]], httpMethod: POST)
  """SCIMProvider Viewset"""
  providers_scim_create(input: SCIMProviderRequest_Input): providers_scim_create_response @httpOperation(subgraph: "Authentik", path: "/providers/scim/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """SCIMProvider Viewset"""
  providers_scim_update(
    """A unique integer value identifying this SCIM Provider."""
    id: Int!
    input: SCIMProviderRequest_Input
  ): providers_scim_update_response @httpOperation(subgraph: "Authentik", path: "/providers/scim/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """SCIMProvider Viewset"""
  providers_scim_partial_update(
    """A unique integer value identifying this SCIM Provider."""
    id: Int!
    input: PatchedSCIMProviderRequest_Input
  ): providers_scim_partial_update_response @httpOperation(subgraph: "Authentik", path: "/providers/scim/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """SCIMProvider Viewset"""
  providers_scim_destroy(
    """A unique integer value identifying this SCIM Provider."""
    id: Int!
  ): providers_scim_destroy_response @httpOperation(subgraph: "Authentik", path: "/providers/scim/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """ConnectionToken Viewset"""
  rac_connection_tokens_update(
    """A UUID string identifying this RAC Connection token."""
    connection_token_uuid: UUID!
    input: ConnectionTokenRequest_Input
  ): rac_connection_tokens_update_response @httpOperation(subgraph: "Authentik", path: "/rac/connection_tokens/{args.connection_token_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """ConnectionToken Viewset"""
  rac_connection_tokens_partial_update(
    """A UUID string identifying this RAC Connection token."""
    connection_token_uuid: UUID!
    input: PatchedConnectionTokenRequest_Input
  ): rac_connection_tokens_partial_update_response @httpOperation(subgraph: "Authentik", path: "/rac/connection_tokens/{args.connection_token_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """ConnectionToken Viewset"""
  rac_connection_tokens_destroy(
    """A UUID string identifying this RAC Connection token."""
    connection_token_uuid: UUID!
  ): rac_connection_tokens_destroy_response @httpOperation(subgraph: "Authentik", path: "/rac/connection_tokens/{args.connection_token_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Endpoint Viewset"""
  rac_endpoints_create(input: EndpointRequest_Input): rac_endpoints_create_response @httpOperation(subgraph: "Authentik", path: "/rac/endpoints/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Endpoint Viewset"""
  rac_endpoints_update(
    """A UUID string identifying this RAC Endpoint."""
    pbm_uuid: UUID!
    input: EndpointRequest_Input
  ): rac_endpoints_update_response @httpOperation(subgraph: "Authentik", path: "/rac/endpoints/{args.pbm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Endpoint Viewset"""
  rac_endpoints_partial_update(
    """A UUID string identifying this RAC Endpoint."""
    pbm_uuid: UUID!
    input: PatchedEndpointRequest_Input
  ): rac_endpoints_partial_update_response @httpOperation(subgraph: "Authentik", path: "/rac/endpoints/{args.pbm_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Endpoint Viewset"""
  rac_endpoints_destroy(
    """A UUID string identifying this RAC Endpoint."""
    pbm_uuid: UUID!
  ): rac_endpoints_destroy_response @httpOperation(subgraph: "Authentik", path: "/rac/endpoints/{args.pbm_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """
  Assign permission(s) to role. When `object_pk` is set, the permissions
  are only assigned to the specific object, otherwise they are assigned globally.
  """
  rbac_permissions_assigned_by_roles_assign_create(
    """A UUID string identifying this Role."""
    uuid: UUID!
    input: PermissionAssignRequest_Input
  ): rbac_permissions_assigned_by_roles_assign_create_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/assigned_by_roles/{args.uuid}/assign/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """
  Unassign permission(s) to role. When `object_pk` is set, the permissions
  are only assigned to the specific object, otherwise they are assigned globally.
  """
  rbac_permissions_assigned_by_roles_unassign_partial_update(
    """A UUID string identifying this Role."""
    uuid: UUID!
    input: PatchedPermissionAssignRequest_Input
  ): rbac_permissions_assigned_by_roles_unassign_partial_update_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/assigned_by_roles/{args.uuid}/unassign/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Assign permission(s) to user"""
  rbac_permissions_assigned_by_users_assign_create(
    """A unique integer value identifying this User."""
    id: Int!
    input: PermissionAssignRequest_Input
  ): rbac_permissions_assigned_by_users_assign_create_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/assigned_by_users/{args.id}/assign/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """
  Unassign permission(s) to user. When `object_pk` is set, the permissions
  are only assigned to the specific object, otherwise they are assigned globally.
  """
  rbac_permissions_assigned_by_users_unassign_partial_update(
    """A unique integer value identifying this User."""
    id: Int!
    input: PatchedPermissionAssignRequest_Input
  ): rbac_permissions_assigned_by_users_unassign_partial_update_response @httpOperation(subgraph: "Authentik", path: "/rbac/permissions/assigned_by_users/{args.id}/unassign/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Role viewset"""
  rbac_roles_create(input: RoleRequest_Input): rbac_roles_create_response @httpOperation(subgraph: "Authentik", path: "/rbac/roles/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Role viewset"""
  rbac_roles_update(
    """A UUID string identifying this Role."""
    uuid: UUID!
    input: RoleRequest_Input
  ): rbac_roles_update_response @httpOperation(subgraph: "Authentik", path: "/rbac/roles/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Role viewset"""
  rbac_roles_partial_update(
    """A UUID string identifying this Role."""
    uuid: UUID!
    input: PatchedRoleRequest_Input
  ): rbac_roles_partial_update_response @httpOperation(subgraph: "Authentik", path: "/rbac/roles/{args.uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Role viewset"""
  rbac_roles_destroy(
    """A UUID string identifying this Role."""
    uuid: UUID!
  ): rbac_roles_destroy_response @httpOperation(subgraph: "Authentik", path: "/rbac/roles/{args.uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Source Viewset"""
  sources_all_destroy(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_all_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/all/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Set source icon"""
  sources_all_set_icon_create(
    """Internal source name, used in URLs."""
    slug: String!
    input: FileUploadRequest_Input
  ): GenericError @httpOperation(subgraph: "Authentik", path: "/sources/all/{args.slug}/set_icon/", operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]], httpMethod: POST)
  """Set source icon (as URL)"""
  sources_all_set_icon_url_create(
    """Internal source name, used in URLs."""
    slug: String!
    input: FilePathRequest_Input
  ): GenericError @httpOperation(subgraph: "Authentik", path: "/sources/all/{args.slug}/set_icon_url/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """LDAP Source Viewset"""
  sources_ldap_create(input: LDAPSourceRequest_Input): sources_ldap_create_response @httpOperation(subgraph: "Authentik", path: "/sources/ldap/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """LDAP Source Viewset"""
  sources_ldap_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: LDAPSourceRequest_Input
  ): sources_ldap_update_response @httpOperation(subgraph: "Authentik", path: "/sources/ldap/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """LDAP Source Viewset"""
  sources_ldap_partial_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: PatchedLDAPSourceRequest_Input
  ): sources_ldap_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/ldap/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """LDAP Source Viewset"""
  sources_ldap_destroy(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_ldap_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/ldap/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Source Viewset"""
  sources_oauth_create(input: OAuthSourceRequest_Input): sources_oauth_create_response @httpOperation(subgraph: "Authentik", path: "/sources/oauth/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Source Viewset"""
  sources_oauth_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: OAuthSourceRequest_Input
  ): sources_oauth_update_response @httpOperation(subgraph: "Authentik", path: "/sources/oauth/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Source Viewset"""
  sources_oauth_partial_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: PatchedOAuthSourceRequest_Input
  ): sources_oauth_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/oauth/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Source Viewset"""
  sources_oauth_destroy(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_oauth_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/oauth/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Plex source Viewset"""
  sources_plex_create(input: PlexSourceRequest_Input): sources_plex_create_response @httpOperation(subgraph: "Authentik", path: "/sources/plex/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Plex source Viewset"""
  sources_plex_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: PlexSourceRequest_Input
  ): sources_plex_update_response @httpOperation(subgraph: "Authentik", path: "/sources/plex/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Plex source Viewset"""
  sources_plex_partial_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: PatchedPlexSourceRequest_Input
  ): sources_plex_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/plex/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Plex source Viewset"""
  sources_plex_destroy(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_plex_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/plex/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """
  Redeem a plex token, check it's access to resources against what's allowed
  for the source, and redirect to an authentication/enrollment flow.
  """
  sources_plex_redeem_token_create(slug: String, input: PlexTokenRedeemRequest_Input): RedirectChallenge @httpOperation(subgraph: "Authentik", path: "/sources/plex/redeem_token/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST, queryParamArgMap: "{\"slug\":\"slug\"}")
  """Redeem a plex token for an authenticated user, creating a connection"""
  sources_plex_redeem_token_authenticated_create(slug: String, input: PlexTokenRedeemRequest_Input): Void @httpOperation(subgraph: "Authentik", path: "/sources/plex/redeem_token_authenticated/", operationSpecificHeaders: [["Content-Type", "application/json"]], httpMethod: POST, queryParamArgMap: "{\"slug\":\"slug\"}")
  """SAMLSource Viewset"""
  sources_saml_create(input: SAMLSourceRequest_Input): sources_saml_create_response @httpOperation(subgraph: "Authentik", path: "/sources/saml/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """SAMLSource Viewset"""
  sources_saml_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: SAMLSourceRequest_Input
  ): sources_saml_update_response @httpOperation(subgraph: "Authentik", path: "/sources/saml/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """SAMLSource Viewset"""
  sources_saml_partial_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: PatchedSAMLSourceRequest_Input
  ): sources_saml_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/saml/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """SAMLSource Viewset"""
  sources_saml_destroy(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_saml_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/saml/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """SCIMSource Viewset"""
  sources_scim_create(input: SCIMSourceRequest_Input): sources_scim_create_response @httpOperation(subgraph: "Authentik", path: "/sources/scim/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """SCIMSource Viewset"""
  sources_scim_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: SCIMSourceRequest_Input
  ): sources_scim_update_response @httpOperation(subgraph: "Authentik", path: "/sources/scim/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """SCIMSource Viewset"""
  sources_scim_partial_update(
    """Internal source name, used in URLs."""
    slug: String!
    input: PatchedSCIMSourceRequest_Input
  ): sources_scim_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/scim/{args.slug}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """SCIMSource Viewset"""
  sources_scim_destroy(
    """Internal source name, used in URLs."""
    slug: String!
  ): sources_scim_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/scim/{args.slug}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """SCIMSourceGroup Viewset"""
  sources_scim_groups_create(input: SCIMSourceGroupRequest_Input): sources_scim_groups_create_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_groups/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """SCIMSourceGroup Viewset"""
  sources_scim_groups_update(
    """A unique value identifying this scim source group."""
    id: String!
    input: SCIMSourceGroupRequest_Input
  ): sources_scim_groups_update_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_groups/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """SCIMSourceGroup Viewset"""
  sources_scim_groups_partial_update(
    """A unique value identifying this scim source group."""
    id: String!
    input: PatchedSCIMSourceGroupRequest_Input
  ): sources_scim_groups_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_groups/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """SCIMSourceGroup Viewset"""
  sources_scim_groups_destroy(
    """A unique value identifying this scim source group."""
    id: String!
  ): sources_scim_groups_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_groups/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """SCIMSourceUser Viewset"""
  sources_scim_users_create(input: SCIMSourceUserRequest_Input): sources_scim_users_create_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_users/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """SCIMSourceUser Viewset"""
  sources_scim_users_update(
    """A unique value identifying this scim source user."""
    id: String!
    input: SCIMSourceUserRequest_Input
  ): sources_scim_users_update_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_users/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """SCIMSourceUser Viewset"""
  sources_scim_users_partial_update(
    """A unique value identifying this scim source user."""
    id: String!
    input: PatchedSCIMSourceUserRequest_Input
  ): sources_scim_users_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_users/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """SCIMSourceUser Viewset"""
  sources_scim_users_destroy(
    """A unique value identifying this scim source user."""
    id: String!
  ): sources_scim_users_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/scim_users/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """User-source connection Viewset"""
  sources_user_connections_all_update(
    """A unique integer value identifying this user source connection."""
    id: Int!
  ): sources_user_connections_all_update_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/all/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: PUT)
  """User-source connection Viewset"""
  sources_user_connections_all_partial_update(
    """A unique integer value identifying this user source connection."""
    id: Int!
  ): sources_user_connections_all_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/all/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: PATCH)
  """User-source connection Viewset"""
  sources_user_connections_all_destroy(
    """A unique integer value identifying this user source connection."""
    id: Int!
  ): sources_user_connections_all_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/all/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Source Viewset"""
  sources_user_connections_oauth_create(input: UserOAuthSourceConnectionRequest_Input): sources_user_connections_oauth_create_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/oauth/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Source Viewset"""
  sources_user_connections_oauth_update(
    """A unique integer value identifying this User OAuth Source Connection."""
    id: Int!
    input: UserOAuthSourceConnectionRequest_Input
  ): sources_user_connections_oauth_update_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/oauth/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Source Viewset"""
  sources_user_connections_oauth_partial_update(
    """A unique integer value identifying this User OAuth Source Connection."""
    id: Int!
    input: PatchedUserOAuthSourceConnectionRequest_Input
  ): sources_user_connections_oauth_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/oauth/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Source Viewset"""
  sources_user_connections_oauth_destroy(
    """A unique integer value identifying this User OAuth Source Connection."""
    id: Int!
  ): sources_user_connections_oauth_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/oauth/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Plex Source connection Serializer"""
  sources_user_connections_plex_create(input: PlexSourceConnectionRequest_Input): sources_user_connections_plex_create_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/plex/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Plex Source connection Serializer"""
  sources_user_connections_plex_update(
    """A unique integer value identifying this User Plex Source Connection."""
    id: Int!
    input: PlexSourceConnectionRequest_Input
  ): sources_user_connections_plex_update_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/plex/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Plex Source connection Serializer"""
  sources_user_connections_plex_partial_update(
    """A unique integer value identifying this User Plex Source Connection."""
    id: Int!
    input: PatchedPlexSourceConnectionRequest_Input
  ): sources_user_connections_plex_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/plex/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Plex Source connection Serializer"""
  sources_user_connections_plex_destroy(
    """A unique integer value identifying this User Plex Source Connection."""
    id: Int!
  ): sources_user_connections_plex_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/plex/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Source Viewset"""
  sources_user_connections_saml_create(input: UserSAMLSourceConnectionRequest_Input): sources_user_connections_saml_create_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/saml/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Source Viewset"""
  sources_user_connections_saml_update(
    """A unique integer value identifying this User SAML Source Connection."""
    id: Int!
    input: UserSAMLSourceConnectionRequest_Input
  ): sources_user_connections_saml_update_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/saml/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Source Viewset"""
  sources_user_connections_saml_partial_update(
    """A unique integer value identifying this User SAML Source Connection."""
    id: Int!
    input: PatchedUserSAMLSourceConnectionRequest_Input
  ): sources_user_connections_saml_partial_update_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/saml/{args.id}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Source Viewset"""
  sources_user_connections_saml_destroy(
    """A unique integer value identifying this User SAML Source Connection."""
    id: Int!
  ): sources_user_connections_saml_destroy_response @httpOperation(subgraph: "Authentik", path: "/sources/user_connections/saml/{args.id}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Stage Viewset"""
  stages_all_destroy(
    """A UUID string identifying this stage."""
    stage_uuid: UUID!
  ): stages_all_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/all/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """AuthenticatorDuoStage Viewset"""
  stages_authenticator_duo_create(input: AuthenticatorDuoStageRequest_Input): stages_authenticator_duo_create_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """AuthenticatorDuoStage Viewset"""
  stages_authenticator_duo_update(
    """A UUID string identifying this Duo Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: AuthenticatorDuoStageRequest_Input
  ): stages_authenticator_duo_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """AuthenticatorDuoStage Viewset"""
  stages_authenticator_duo_partial_update(
    """A UUID string identifying this Duo Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: PatchedAuthenticatorDuoStageRequest_Input
  ): stages_authenticator_duo_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """AuthenticatorDuoStage Viewset"""
  stages_authenticator_duo_destroy(
    """A UUID string identifying this Duo Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_duo_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Check enrollment status of user details in current session"""
  stages_authenticator_duo_enrollment_status_create(
    """A UUID string identifying this Duo Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_duo_enrollment_status_create_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/{args.stage_uuid}/enrollment_status/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """Import duo devices into authentik"""
  stages_authenticator_duo_import_device_manual_create(
    """A UUID string identifying this Duo Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: AuthenticatorDuoStageManualDeviceImportRequest_Input
  ): stages_authenticator_duo_import_device_manual_create_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/{args.stage_uuid}/import_device_manual/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Import duo devices into authentik"""
  stages_authenticator_duo_import_devices_automatic_create(
    """A UUID string identifying this Duo Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_duo_import_devices_automatic_create_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/duo/{args.stage_uuid}/import_devices_automatic/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: POST)
  """AuthenticatorSMSStage Viewset"""
  stages_authenticator_sms_create(input: AuthenticatorSMSStageRequest_Input): stages_authenticator_sms_create_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/sms/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """AuthenticatorSMSStage Viewset"""
  stages_authenticator_sms_update(
    """A UUID string identifying this SMS Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: AuthenticatorSMSStageRequest_Input
  ): stages_authenticator_sms_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/sms/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """AuthenticatorSMSStage Viewset"""
  stages_authenticator_sms_partial_update(
    """A UUID string identifying this SMS Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: PatchedAuthenticatorSMSStageRequest_Input
  ): stages_authenticator_sms_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/sms/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """AuthenticatorSMSStage Viewset"""
  stages_authenticator_sms_destroy(
    """A UUID string identifying this SMS Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_sms_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/sms/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """AuthenticatorStaticStage Viewset"""
  stages_authenticator_static_create(input: AuthenticatorStaticStageRequest_Input): stages_authenticator_static_create_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/static/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """AuthenticatorStaticStage Viewset"""
  stages_authenticator_static_update(
    """A UUID string identifying this Static Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: AuthenticatorStaticStageRequest_Input
  ): stages_authenticator_static_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/static/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """AuthenticatorStaticStage Viewset"""
  stages_authenticator_static_partial_update(
    """A UUID string identifying this Static Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: PatchedAuthenticatorStaticStageRequest_Input
  ): stages_authenticator_static_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/static/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """AuthenticatorStaticStage Viewset"""
  stages_authenticator_static_destroy(
    """A UUID string identifying this Static Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_static_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/static/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """AuthenticatorTOTPStage Viewset"""
  stages_authenticator_totp_create(input: AuthenticatorTOTPStageRequest_Input): stages_authenticator_totp_create_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/totp/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """AuthenticatorTOTPStage Viewset"""
  stages_authenticator_totp_update(
    """A UUID string identifying this TOTP Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: AuthenticatorTOTPStageRequest_Input
  ): stages_authenticator_totp_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/totp/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """AuthenticatorTOTPStage Viewset"""
  stages_authenticator_totp_partial_update(
    """A UUID string identifying this TOTP Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: PatchedAuthenticatorTOTPStageRequest_Input
  ): stages_authenticator_totp_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/totp/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """AuthenticatorTOTPStage Viewset"""
  stages_authenticator_totp_destroy(
    """A UUID string identifying this TOTP Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_totp_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/totp/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """AuthenticatorValidateStage Viewset"""
  stages_authenticator_validate_create(input: AuthenticatorValidateStageRequest_Input): stages_authenticator_validate_create_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/validate/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """AuthenticatorValidateStage Viewset"""
  stages_authenticator_validate_update(
    """A UUID string identifying this Authenticator Validation Stage."""
    stage_uuid: UUID!
    input: AuthenticatorValidateStageRequest_Input
  ): stages_authenticator_validate_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/validate/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """AuthenticatorValidateStage Viewset"""
  stages_authenticator_validate_partial_update(
    """A UUID string identifying this Authenticator Validation Stage."""
    stage_uuid: UUID!
    input: PatchedAuthenticatorValidateStageRequest_Input
  ): stages_authenticator_validate_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/validate/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """AuthenticatorValidateStage Viewset"""
  stages_authenticator_validate_destroy(
    """A UUID string identifying this Authenticator Validation Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_validate_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/validate/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """AuthenticatorWebAuthnStage Viewset"""
  stages_authenticator_webauthn_create(input: AuthenticatorWebAuthnStageRequest_Input): stages_authenticator_webauthn_create_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/webauthn/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """AuthenticatorWebAuthnStage Viewset"""
  stages_authenticator_webauthn_update(
    """A UUID string identifying this WebAuthn Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: AuthenticatorWebAuthnStageRequest_Input
  ): stages_authenticator_webauthn_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/webauthn/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """AuthenticatorWebAuthnStage Viewset"""
  stages_authenticator_webauthn_partial_update(
    """A UUID string identifying this WebAuthn Authenticator Setup Stage."""
    stage_uuid: UUID!
    input: PatchedAuthenticatorWebAuthnStageRequest_Input
  ): stages_authenticator_webauthn_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/webauthn/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """AuthenticatorWebAuthnStage Viewset"""
  stages_authenticator_webauthn_destroy(
    """A UUID string identifying this WebAuthn Authenticator Setup Stage."""
    stage_uuid: UUID!
  ): stages_authenticator_webauthn_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/authenticator/webauthn/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """CaptchaStage Viewset"""
  stages_captcha_create(input: CaptchaStageRequest_Input): stages_captcha_create_response @httpOperation(subgraph: "Authentik", path: "/stages/captcha/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """CaptchaStage Viewset"""
  stages_captcha_update(
    """A UUID string identifying this Captcha Stage."""
    stage_uuid: UUID!
    input: CaptchaStageRequest_Input
  ): stages_captcha_update_response @httpOperation(subgraph: "Authentik", path: "/stages/captcha/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """CaptchaStage Viewset"""
  stages_captcha_partial_update(
    """A UUID string identifying this Captcha Stage."""
    stage_uuid: UUID!
    input: PatchedCaptchaStageRequest_Input
  ): stages_captcha_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/captcha/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """CaptchaStage Viewset"""
  stages_captcha_destroy(
    """A UUID string identifying this Captcha Stage."""
    stage_uuid: UUID!
  ): stages_captcha_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/captcha/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """ConsentStage Viewset"""
  stages_consent_create(input: ConsentStageRequest_Input): stages_consent_create_response @httpOperation(subgraph: "Authentik", path: "/stages/consent/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """ConsentStage Viewset"""
  stages_consent_update(
    """A UUID string identifying this Consent Stage."""
    stage_uuid: UUID!
    input: ConsentStageRequest_Input
  ): stages_consent_update_response @httpOperation(subgraph: "Authentik", path: "/stages/consent/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """ConsentStage Viewset"""
  stages_consent_partial_update(
    """A UUID string identifying this Consent Stage."""
    stage_uuid: UUID!
    input: PatchedConsentStageRequest_Input
  ): stages_consent_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/consent/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """ConsentStage Viewset"""
  stages_consent_destroy(
    """A UUID string identifying this Consent Stage."""
    stage_uuid: UUID!
  ): stages_consent_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/consent/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """DenyStage Viewset"""
  stages_deny_create(input: DenyStageRequest_Input): stages_deny_create_response @httpOperation(subgraph: "Authentik", path: "/stages/deny/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """DenyStage Viewset"""
  stages_deny_update(
    """A UUID string identifying this Deny Stage."""
    stage_uuid: UUID!
    input: DenyStageRequest_Input
  ): stages_deny_update_response @httpOperation(subgraph: "Authentik", path: "/stages/deny/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """DenyStage Viewset"""
  stages_deny_partial_update(
    """A UUID string identifying this Deny Stage."""
    stage_uuid: UUID!
    input: PatchedDenyStageRequest_Input
  ): stages_deny_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/deny/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """DenyStage Viewset"""
  stages_deny_destroy(
    """A UUID string identifying this Deny Stage."""
    stage_uuid: UUID!
  ): stages_deny_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/deny/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """DummyStage Viewset"""
  stages_dummy_create(input: DummyStageRequest_Input): stages_dummy_create_response @httpOperation(subgraph: "Authentik", path: "/stages/dummy/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """DummyStage Viewset"""
  stages_dummy_update(
    """A UUID string identifying this Dummy Stage."""
    stage_uuid: UUID!
    input: DummyStageRequest_Input
  ): stages_dummy_update_response @httpOperation(subgraph: "Authentik", path: "/stages/dummy/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """DummyStage Viewset"""
  stages_dummy_partial_update(
    """A UUID string identifying this Dummy Stage."""
    stage_uuid: UUID!
    input: PatchedDummyStageRequest_Input
  ): stages_dummy_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/dummy/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """DummyStage Viewset"""
  stages_dummy_destroy(
    """A UUID string identifying this Dummy Stage."""
    stage_uuid: UUID!
  ): stages_dummy_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/dummy/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """EmailStage Viewset"""
  stages_email_create(input: EmailStageRequest_Input): stages_email_create_response @httpOperation(subgraph: "Authentik", path: "/stages/email/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """EmailStage Viewset"""
  stages_email_update(
    """A UUID string identifying this Email Stage."""
    stage_uuid: UUID!
    input: EmailStageRequest_Input
  ): stages_email_update_response @httpOperation(subgraph: "Authentik", path: "/stages/email/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """EmailStage Viewset"""
  stages_email_partial_update(
    """A UUID string identifying this Email Stage."""
    stage_uuid: UUID!
    input: PatchedEmailStageRequest_Input
  ): stages_email_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/email/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """EmailStage Viewset"""
  stages_email_destroy(
    """A UUID string identifying this Email Stage."""
    stage_uuid: UUID!
  ): stages_email_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/email/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """IdentificationStage Viewset"""
  stages_identification_create(input: IdentificationStageRequest_Input): stages_identification_create_response @httpOperation(subgraph: "Authentik", path: "/stages/identification/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """IdentificationStage Viewset"""
  stages_identification_update(
    """A UUID string identifying this Identification Stage."""
    stage_uuid: UUID!
    input: IdentificationStageRequest_Input
  ): stages_identification_update_response @httpOperation(subgraph: "Authentik", path: "/stages/identification/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """IdentificationStage Viewset"""
  stages_identification_partial_update(
    """A UUID string identifying this Identification Stage."""
    stage_uuid: UUID!
    input: PatchedIdentificationStageRequest_Input
  ): stages_identification_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/identification/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """IdentificationStage Viewset"""
  stages_identification_destroy(
    """A UUID string identifying this Identification Stage."""
    stage_uuid: UUID!
  ): stages_identification_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/identification/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Invitation Viewset"""
  stages_invitation_invitations_create(input: InvitationRequest_Input): stages_invitation_invitations_create_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/invitations/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Invitation Viewset"""
  stages_invitation_invitations_update(
    """A UUID string identifying this Invitation."""
    invite_uuid: UUID!
    input: InvitationRequest_Input
  ): stages_invitation_invitations_update_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/invitations/{args.invite_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Invitation Viewset"""
  stages_invitation_invitations_partial_update(
    """A UUID string identifying this Invitation."""
    invite_uuid: UUID!
    input: PatchedInvitationRequest_Input
  ): stages_invitation_invitations_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/invitations/{args.invite_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Invitation Viewset"""
  stages_invitation_invitations_destroy(
    """A UUID string identifying this Invitation."""
    invite_uuid: UUID!
  ): stages_invitation_invitations_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/invitations/{args.invite_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """InvitationStage Viewset"""
  stages_invitation_stages_create(input: InvitationStageRequest_Input): stages_invitation_stages_create_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/stages/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """InvitationStage Viewset"""
  stages_invitation_stages_update(
    """A UUID string identifying this Invitation Stage."""
    stage_uuid: UUID!
    input: InvitationStageRequest_Input
  ): stages_invitation_stages_update_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/stages/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """InvitationStage Viewset"""
  stages_invitation_stages_partial_update(
    """A UUID string identifying this Invitation Stage."""
    stage_uuid: UUID!
    input: PatchedInvitationStageRequest_Input
  ): stages_invitation_stages_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/stages/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """InvitationStage Viewset"""
  stages_invitation_stages_destroy(
    """A UUID string identifying this Invitation Stage."""
    stage_uuid: UUID!
  ): stages_invitation_stages_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/invitation/stages/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """PasswordStage Viewset"""
  stages_password_create(input: PasswordStageRequest_Input): stages_password_create_response @httpOperation(subgraph: "Authentik", path: "/stages/password/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """PasswordStage Viewset"""
  stages_password_update(
    """A UUID string identifying this Password Stage."""
    stage_uuid: UUID!
    input: PasswordStageRequest_Input
  ): stages_password_update_response @httpOperation(subgraph: "Authentik", path: "/stages/password/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """PasswordStage Viewset"""
  stages_password_partial_update(
    """A UUID string identifying this Password Stage."""
    stage_uuid: UUID!
    input: PatchedPasswordStageRequest_Input
  ): stages_password_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/password/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """PasswordStage Viewset"""
  stages_password_destroy(
    """A UUID string identifying this Password Stage."""
    stage_uuid: UUID!
  ): stages_password_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/password/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Prompt Viewset"""
  stages_prompt_prompts_create(input: PromptRequest_Input): stages_prompt_prompts_create_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/prompts/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """Prompt Viewset"""
  stages_prompt_prompts_update(
    """A UUID string identifying this Prompt."""
    prompt_uuid: UUID!
    input: PromptRequest_Input
  ): stages_prompt_prompts_update_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/prompts/{args.prompt_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """Prompt Viewset"""
  stages_prompt_prompts_partial_update(
    """A UUID string identifying this Prompt."""
    prompt_uuid: UUID!
    input: PatchedPromptRequest_Input
  ): stages_prompt_prompts_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/prompts/{args.prompt_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """Prompt Viewset"""
  stages_prompt_prompts_destroy(
    """A UUID string identifying this Prompt."""
    prompt_uuid: UUID!
  ): stages_prompt_prompts_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/prompts/{args.prompt_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """Preview a prompt as a challenge, just like a flow would receive"""
  stages_prompt_prompts_preview_create(input: PromptRequest_Input): stages_prompt_prompts_preview_create_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/prompts/preview/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """PromptStage Viewset"""
  stages_prompt_stages_create(input: PromptStageRequest_Input): stages_prompt_stages_create_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/stages/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """PromptStage Viewset"""
  stages_prompt_stages_update(
    """A UUID string identifying this Prompt Stage."""
    stage_uuid: UUID!
    input: PromptStageRequest_Input
  ): stages_prompt_stages_update_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/stages/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """PromptStage Viewset"""
  stages_prompt_stages_partial_update(
    """A UUID string identifying this Prompt Stage."""
    stage_uuid: UUID!
    input: PatchedPromptStageRequest_Input
  ): stages_prompt_stages_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/stages/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """PromptStage Viewset"""
  stages_prompt_stages_destroy(
    """A UUID string identifying this Prompt Stage."""
    stage_uuid: UUID!
  ): stages_prompt_stages_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/prompt/stages/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """SourceStage Viewset"""
  stages_source_create(input: SourceStageRequest_Input): stages_source_create_response @httpOperation(subgraph: "Authentik", path: "/stages/source/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """SourceStage Viewset"""
  stages_source_update(
    """A UUID string identifying this Source Stage."""
    stage_uuid: UUID!
    input: SourceStageRequest_Input
  ): stages_source_update_response @httpOperation(subgraph: "Authentik", path: "/stages/source/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """SourceStage Viewset"""
  stages_source_partial_update(
    """A UUID string identifying this Source Stage."""
    stage_uuid: UUID!
    input: PatchedSourceStageRequest_Input
  ): stages_source_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/source/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """SourceStage Viewset"""
  stages_source_destroy(
    """A UUID string identifying this Source Stage."""
    stage_uuid: UUID!
  ): stages_source_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/source/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """UserDeleteStage Viewset"""
  stages_user_delete_create(input: UserDeleteStageRequest_Input): stages_user_delete_create_response @httpOperation(subgraph: "Authentik", path: "/stages/user_delete/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """UserDeleteStage Viewset"""
  stages_user_delete_update(
    """A UUID string identifying this User Delete Stage."""
    stage_uuid: UUID!
    input: UserDeleteStageRequest_Input
  ): stages_user_delete_update_response @httpOperation(subgraph: "Authentik", path: "/stages/user_delete/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """UserDeleteStage Viewset"""
  stages_user_delete_partial_update(
    """A UUID string identifying this User Delete Stage."""
    stage_uuid: UUID!
    input: PatchedUserDeleteStageRequest_Input
  ): stages_user_delete_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/user_delete/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """UserDeleteStage Viewset"""
  stages_user_delete_destroy(
    """A UUID string identifying this User Delete Stage."""
    stage_uuid: UUID!
  ): stages_user_delete_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/user_delete/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """UserLoginStage Viewset"""
  stages_user_login_create(input: UserLoginStageRequest_Input): stages_user_login_create_response @httpOperation(subgraph: "Authentik", path: "/stages/user_login/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """UserLoginStage Viewset"""
  stages_user_login_update(
    """A UUID string identifying this User Login Stage."""
    stage_uuid: UUID!
    input: UserLoginStageRequest_Input
  ): stages_user_login_update_response @httpOperation(subgraph: "Authentik", path: "/stages/user_login/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """UserLoginStage Viewset"""
  stages_user_login_partial_update(
    """A UUID string identifying this User Login Stage."""
    stage_uuid: UUID!
    input: PatchedUserLoginStageRequest_Input
  ): stages_user_login_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/user_login/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """UserLoginStage Viewset"""
  stages_user_login_destroy(
    """A UUID string identifying this User Login Stage."""
    stage_uuid: UUID!
  ): stages_user_login_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/user_login/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """UserLogoutStage Viewset"""
  stages_user_logout_create(input: UserLogoutStageRequest_Input): stages_user_logout_create_response @httpOperation(subgraph: "Authentik", path: "/stages/user_logout/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """UserLogoutStage Viewset"""
  stages_user_logout_update(
    """A UUID string identifying this User Logout Stage."""
    stage_uuid: UUID!
    input: UserLogoutStageRequest_Input
  ): stages_user_logout_update_response @httpOperation(subgraph: "Authentik", path: "/stages/user_logout/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """UserLogoutStage Viewset"""
  stages_user_logout_partial_update(
    """A UUID string identifying this User Logout Stage."""
    stage_uuid: UUID!
    input: PatchedUserLogoutStageRequest_Input
  ): stages_user_logout_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/user_logout/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """UserLogoutStage Viewset"""
  stages_user_logout_destroy(
    """A UUID string identifying this User Logout Stage."""
    stage_uuid: UUID!
  ): stages_user_logout_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/user_logout/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
  """UserWriteStage Viewset"""
  stages_user_write_create(input: UserWriteStageRequest_Input): stages_user_write_create_response @httpOperation(subgraph: "Authentik", path: "/stages/user_write/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: POST)
  """UserWriteStage Viewset"""
  stages_user_write_update(
    """A UUID string identifying this User Write Stage."""
    stage_uuid: UUID!
    input: UserWriteStageRequest_Input
  ): stages_user_write_update_response @httpOperation(subgraph: "Authentik", path: "/stages/user_write/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PUT)
  """UserWriteStage Viewset"""
  stages_user_write_partial_update(
    """A UUID string identifying this User Write Stage."""
    stage_uuid: UUID!
    input: PatchedUserWriteStageRequest_Input
  ): stages_user_write_partial_update_response @httpOperation(subgraph: "Authentik", path: "/stages/user_write/{args.stage_uuid}/", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]], httpMethod: PATCH)
  """UserWriteStage Viewset"""
  stages_user_write_destroy(
    """A UUID string identifying this User Write Stage."""
    stage_uuid: UUID!
  ): stages_user_write_destroy_response @httpOperation(subgraph: "Authentik", path: "/stages/user_write/{args.stage_uuid}/", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: DELETE)
}

union admin_settings_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Settings") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Settings | ValidationError | GenericError

"""Settings Serializer"""
input SettingsRequest_Input {
  """Configure how authentik should show avatars for users."""
  avatars: NonEmptyString
  """Enable the ability for users to change their name."""
  default_user_change_name: Boolean
  """Enable the ability for users to change their email address."""
  default_user_change_email: Boolean
  """Enable the ability for users to change their username."""
  default_user_change_username: Boolean
  """
  Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2).
  """
  event_retention: NonEmptyString
  """The option configures the footer links on the flow executor pages."""
  footer_links: JSON
  """
  When enabled, all the events caused by a user will be deleted upon the user's deletion.
  """
  gdpr_compliance: Boolean
  """Globally enable/disable impersonation."""
  impersonation: Boolean
  """Default token duration"""
  default_token_duration: NonEmptyString
  """Default token length"""
  default_token_length: PositiveInt
}

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString

union admin_settings_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Settings") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Settings | ValidationError | GenericError

"""Settings Serializer"""
input PatchedSettingsRequest_Input {
  """Configure how authentik should show avatars for users."""
  avatars: NonEmptyString
  """Enable the ability for users to change their name."""
  default_user_change_name: Boolean
  """Enable the ability for users to change their email address."""
  default_user_change_email: Boolean
  """Enable the ability for users to change their username."""
  default_user_change_username: Boolean
  """
  Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2).
  """
  event_retention: NonEmptyString
  """The option configures the footer links on the flow executor pages."""
  footer_links: JSON
  """
  When enabled, all the events caused by a user will be deleted upon the user's deletion.
  """
  gdpr_compliance: Boolean
  """Globally enable/disable impersonation."""
  impersonation: Boolean
  """Default token duration"""
  default_token_duration: NonEmptyString
  """Default token length"""
  default_token_length: PositiveInt
}

union admin_system_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SystemInfo") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SystemInfo | ValidationError | GenericError

union authenticators_admin_duo_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "DuoDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DuoDevice | ValidationError | GenericError

"""Serializer for Duo authenticator devices"""
input DuoDeviceRequest_Input {
  """The human-readable name of this device."""
  name: mutationInput_authenticators_admin_duo_create_input_name!
}

"""The human-readable name of this device."""
scalar mutationInput_authenticators_admin_duo_create_input_name @length(subgraph: "Authentik", min: 1, max: 64)

union authenticators_admin_duo_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DuoDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DuoDevice | ValidationError | GenericError

union authenticators_admin_duo_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DuoDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DuoDevice | ValidationError | GenericError

"""Serializer for Duo authenticator devices"""
input PatchedDuoDeviceRequest_Input {
  """The human-readable name of this device."""
  name: mutationInput_authenticators_admin_duo_partial_update_input_name
}

"""The human-readable name of this device."""
scalar mutationInput_authenticators_admin_duo_partial_update_input_name @length(subgraph: "Authentik", min: 1, max: 64)

union authenticators_admin_duo_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union authenticators_admin_sms_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SMSDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SMSDevice | ValidationError | GenericError

"""Serializer for sms authenticator devices"""
input SMSDeviceRequest_Input {
  """The human-readable name of this device."""
  name: mutationInput_authenticators_admin_sms_create_input_name!
}

"""The human-readable name of this device."""
scalar mutationInput_authenticators_admin_sms_create_input_name @length(subgraph: "Authentik", min: 1, max: 64)

union authenticators_admin_sms_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SMSDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SMSDevice | ValidationError | GenericError

union authenticators_admin_sms_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SMSDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SMSDevice | ValidationError | GenericError

"""Serializer for sms authenticator devices"""
input PatchedSMSDeviceRequest_Input {
  """The human-readable name of this device."""
  name: mutationInput_authenticators_admin_sms_partial_update_input_name
}

"""The human-readable name of this device."""
scalar mutationInput_authenticators_admin_sms_partial_update_input_name @length(subgraph: "Authentik", min: 1, max: 64)

union authenticators_admin_sms_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union authenticators_admin_static_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "StaticDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = StaticDevice | ValidationError | GenericError

"""Serializer for static authenticator devices"""
input StaticDeviceRequest_Input {
  """The human-readable name of this device."""
  name: mutationInput_authenticators_admin_static_create_input_name!
}

"""The human-readable name of this device."""
scalar mutationInput_authenticators_admin_static_create_input_name @length(subgraph: "Authentik", min: 1, max: 64)

union authenticators_admin_static_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "StaticDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = StaticDevice | ValidationError | GenericError

union authenticators_admin_static_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "StaticDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = StaticDevice | ValidationError | GenericError

"""Serializer for static authenticator devices"""
input PatchedStaticDeviceRequest_Input {
  """The human-readable name of this device."""
  name: mutationInput_authenticators_admin_static_partial_update_input_name
}

"""The human-readable name of this device."""
scalar mutationInput_authenticators_admin_static_partial_update_input_name @length(subgraph: "Authentik", min: 1, max: 64)

union authenticators_admin_static_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union authenticators_admin_totp_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "TOTPDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TOTPDevice | ValidationError | GenericError

"""Serializer for totp authenticator devices"""
input TOTPDeviceRequest_Input {
  """The human-readable name of this device."""
  name: mutationInput_authenticators_admin_totp_create_input_name!
}

"""The human-readable name of this device."""
scalar mutationInput_authenticators_admin_totp_create_input_name @length(subgraph: "Authentik", min: 1, max: 64)

union authenticators_admin_totp_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TOTPDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TOTPDevice | ValidationError | GenericError

union authenticators_admin_totp_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TOTPDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TOTPDevice | ValidationError | GenericError

"""Serializer for totp authenticator devices"""
input PatchedTOTPDeviceRequest_Input {
  """The human-readable name of this device."""
  name: mutationInput_authenticators_admin_totp_partial_update_input_name
}

"""The human-readable name of this device."""
scalar mutationInput_authenticators_admin_totp_partial_update_input_name @length(subgraph: "Authentik", min: 1, max: 64)

union authenticators_admin_totp_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union authenticators_admin_webauthn_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "WebAuthnDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = WebAuthnDevice | ValidationError | GenericError

"""Serializer for WebAuthn authenticator devices"""
input WebAuthnDeviceRequest_Input {
  name: mutationInput_authenticators_admin_webauthn_create_input_name!
}

scalar mutationInput_authenticators_admin_webauthn_create_input_name @length(subgraph: "Authentik", min: 1, max: 200)

union authenticators_admin_webauthn_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "WebAuthnDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = WebAuthnDevice | ValidationError | GenericError

union authenticators_admin_webauthn_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "WebAuthnDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = WebAuthnDevice | ValidationError | GenericError

"""Serializer for WebAuthn authenticator devices"""
input PatchedWebAuthnDeviceRequest_Input {
  name: mutationInput_authenticators_admin_webauthn_partial_update_input_name
}

scalar mutationInput_authenticators_admin_webauthn_partial_update_input_name @length(subgraph: "Authentik", min: 1, max: 200)

union authenticators_admin_webauthn_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union authenticators_duo_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DuoDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DuoDevice | ValidationError | GenericError

union authenticators_duo_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DuoDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DuoDevice | ValidationError | GenericError

union authenticators_duo_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union authenticators_sms_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SMSDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SMSDevice | ValidationError | GenericError

union authenticators_sms_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SMSDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SMSDevice | ValidationError | GenericError

union authenticators_sms_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union authenticators_static_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "StaticDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = StaticDevice | ValidationError | GenericError

union authenticators_static_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "StaticDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = StaticDevice | ValidationError | GenericError

union authenticators_static_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union authenticators_totp_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TOTPDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TOTPDevice | ValidationError | GenericError

union authenticators_totp_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TOTPDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TOTPDevice | ValidationError | GenericError

union authenticators_totp_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union authenticators_webauthn_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "WebAuthnDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = WebAuthnDevice | ValidationError | GenericError

union authenticators_webauthn_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "WebAuthnDevice") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = WebAuthnDevice | ValidationError | GenericError

union authenticators_webauthn_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_applications_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Application") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Application | ValidationError | GenericError

"""Application Serializer"""
input ApplicationRequest_Input {
  """Application's display Name."""
  name: NonEmptyString!
  slug: mutationInput_core_applications_create_input_slug!
  provider: Int
  backchannel_providers: [Int]
  """Open launch URL in a new browser tab or window."""
  open_in_new_tab: Boolean
  meta_launch_url: URL
  meta_description: String
  meta_publisher: String
  policy_engine_mode: PolicyEngineMode
  group: String
}

scalar mutationInput_core_applications_create_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union core_applications_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Application") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Application | ValidationError | GenericError

union core_applications_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Application") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Application | ValidationError | GenericError

"""Application Serializer"""
input PatchedApplicationRequest_Input {
  """Application's display Name."""
  name: NonEmptyString
  slug: mutationInput_core_applications_partial_update_input_slug
  provider: Int
  backchannel_providers: [Int]
  """Open launch URL in a new browser tab or window."""
  open_in_new_tab: Boolean
  meta_launch_url: URL
  meta_description: String
  meta_publisher: String
  policy_engine_mode: PolicyEngineMode
  group: String
}

scalar mutationInput_core_applications_partial_update_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union core_applications_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

"""Serializer to upload file"""
input FileUploadRequest_Input {
  file: File
  clear: Boolean
}

"""Serializer to upload file"""
input FilePathRequest_Input {
  url: NonEmptyString!
}

union core_authenticated_sessions_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_brands_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Brand") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Brand | ValidationError | GenericError

"""Brand Serializer"""
input BrandRequest_Input {
  """
  Domain that activates this brand. Can be a superset, i.e. `a.b` for `aa.b` and `ba.b`
  """
  domain: NonEmptyString!
  default: Boolean
  branding_title: NonEmptyString
  branding_logo: NonEmptyString
  branding_favicon: NonEmptyString
  flow_authentication: UUID
  flow_invalidation: UUID
  flow_recovery: UUID
  flow_unenrollment: UUID
  flow_user_settings: UUID
  flow_device_code: UUID
  """Web Certificate used by the authentik Core webserver."""
  web_certificate: UUID
  attributes: JSON
}

union core_brands_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Brand") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Brand | ValidationError | GenericError

union core_brands_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Brand") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Brand | ValidationError | GenericError

"""Brand Serializer"""
input PatchedBrandRequest_Input {
  """
  Domain that activates this brand. Can be a superset, i.e. `a.b` for `aa.b` and `ba.b`
  """
  domain: NonEmptyString
  default: Boolean
  branding_title: NonEmptyString
  branding_logo: NonEmptyString
  branding_favicon: NonEmptyString
  flow_authentication: UUID
  flow_invalidation: UUID
  flow_recovery: UUID
  flow_unenrollment: UUID
  flow_user_settings: UUID
  flow_device_code: UUID
  """Web Certificate used by the authentik Core webserver."""
  web_certificate: UUID
  attributes: JSON
}

union core_brands_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_groups_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Group") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Group | ValidationError | GenericError

"""Group Serializer"""
input GroupRequest_Input {
  name: mutationInput_core_groups_create_input_name!
  """Users added to this group will be superusers."""
  is_superuser: Boolean
  parent: UUID
  users: [Int]
  attributes: JSON
  roles: [UUID]
}

scalar mutationInput_core_groups_create_input_name @length(subgraph: "Authentik", min: 1, max: 80)

union core_groups_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Group") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Group | ValidationError | GenericError

union core_groups_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Group") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Group | ValidationError | GenericError

"""Group Serializer"""
input PatchedGroupRequest_Input {
  name: mutationInput_core_groups_partial_update_input_name
  """Users added to this group will be superusers."""
  is_superuser: Boolean
  parent: UUID
  users: [Int]
  attributes: JSON
  roles: [UUID]
}

scalar mutationInput_core_groups_partial_update_input_name @length(subgraph: "Authentik", min: 1, max: 80)

union core_groups_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_groups_add_user_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

"""Account adding/removing operations"""
input UserAccountRequest_Input {
  pk: Int!
}

union core_groups_remove_user_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_tokens_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Token") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Token | ValidationError | GenericError

"""Token Serializer"""
input TokenRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  identifier: mutationInput_core_tokens_create_input_identifier!
  intent: IntentEnum
  user: Int
  description: String
  expires: DateTime
  expiring: Boolean
}

scalar mutationInput_core_tokens_create_input_identifier @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union core_tokens_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Token") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Token | ValidationError | GenericError

union core_tokens_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Token") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Token | ValidationError | GenericError

"""Token Serializer"""
input PatchedTokenRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  identifier: mutationInput_core_tokens_partial_update_input_identifier
  intent: IntentEnum
  user: Int
  description: String
  expires: DateTime
  expiring: Boolean
}

scalar mutationInput_core_tokens_partial_update_input_identifier @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union core_tokens_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_tokens_set_key_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | GenericError

input TokenSetKeyRequest_Input {
  key: NonEmptyString!
}

union core_transactional_applications_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "TransactionApplicationResponse") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = TransactionApplicationResponse | ValidationError | GenericError

"""Transactional creation response"""
type TransactionApplicationResponse {
  applied: Boolean!
  logs: [String]!
}

"""
Serializer for creating a provider and an application in one transaction
"""
input TransactionApplicationRequest_Input {
  app: ApplicationRequest_Input!
  provider_model: ProviderModelEnum!
  provider: modelRequest_Input!
}

enum ProviderModelEnum {
  authentik_providers_ldap_ldapprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_ldap.ldapprovider\"")
  authentik_providers_oauth2_oauth2provider @enum(subgraph: "Authentik", value: "\"authentik_providers_oauth2.oauth2provider\"")
  authentik_providers_proxy_proxyprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_proxy.proxyprovider\"")
  authentik_providers_rac_racprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_rac.racprovider\"")
  authentik_providers_radius_radiusprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_radius.radiusprovider\"")
  authentik_providers_saml_samlprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_saml.samlprovider\"")
  authentik_providers_scim_scimprovider @enum(subgraph: "Authentik", value: "\"authentik_providers_scim.scimprovider\"")
}

input modelRequest_Input @oneOf(subgraph: "Authentik") {
  LDAPProviderRequest_Input: LDAPProviderRequest_Input
  OAuth2ProviderRequest_Input: OAuth2ProviderRequest_Input
  ProxyProviderRequest_Input: ProxyProviderRequest_Input
  RACProviderRequest_Input: RACProviderRequest_Input
  RadiusProviderRequest_Input: RadiusProviderRequest_Input
  SAMLProviderRequest_Input: SAMLProviderRequest_Input
  SCIMProviderRequest_Input: SCIMProviderRequest_Input
}

"""LDAPProvider Serializer"""
input LDAPProviderRequest_Input {
  name: NonEmptyString!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  """DN under which objects are accessible."""
  base_dn: NonEmptyString
  """
  Users in this group can do search queries. If not set, every user can execute search queries.
  """
  search_group: UUID
  certificate: UUID
  tls_server_name: String
  """
  The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber
  """
  uid_start_number: Int
  """
  The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber
  """
  gid_start_number: Int
  search_mode: LDAPAPIAccessMode
  bind_mode: LDAPAPIAccessMode
  """
  When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
  """
  mfa_support: Boolean
}

"""OAuth2Provider Serializer"""
input OAuth2ProviderRequest_Input {
  name: NonEmptyString!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  client_type: ClientTypeEnum
  client_id: mutationInput_core_transactional_applications_update_input_provider_oneOf_1_client_id
  client_secret: mutationInput_core_transactional_applications_update_input_provider_oneOf_1_client_secret
  """
  Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  access_code_validity: NonEmptyString
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  access_token_validity: NonEmptyString
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  refresh_token_validity: NonEmptyString
  """
  Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint.
  """
  include_claims_in_id_token: Boolean
  """
  Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.
  """
  signing_key: UUID
  """Enter each URI on a new line."""
  redirect_uris: String
  sub_mode: SubModeEnum
  issuer_mode: IssuerModeEnum
  jwks_sources: [UUID]
}

scalar mutationInput_core_transactional_applications_update_input_provider_oneOf_1_client_id @length(subgraph: "Authentik", min: 1, max: 255)

scalar mutationInput_core_transactional_applications_update_input_provider_oneOf_1_client_secret @length(subgraph: "Authentik", max: 255)

"""ProxyProvider Serializer"""
input ProxyProviderRequest_Input {
  name: NonEmptyString!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  internal_host: URL
  external_host: URL!
  """Validate SSL Certificates of upstream servers"""
  internal_host_ssl_validation: Boolean
  certificate: UUID
  """
  Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
  """
  skip_path_regex: String
  """
  Set a custom HTTP-Basic Authentication header based on values from authentik.
  """
  basic_auth_enabled: Boolean
  """
  User/Group Attribute used for the password part of the HTTP-Basic Header.
  """
  basic_auth_password_attribute: String
  """
  User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
  """
  basic_auth_user_attribute: String
  mode: ProxyMode
  """
  When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
  """
  intercept_header_auth: Boolean
  cookie_domain: String
  jwks_sources: [UUID]
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  access_token_validity: NonEmptyString
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  refresh_token_validity: NonEmptyString
}

"""RACProvider Serializer"""
input RACProviderRequest_Input {
  name: NonEmptyString!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  settings: JSON
  """
  Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
  """
  connection_expiry: NonEmptyString
  """When set to true, connection tokens will be deleted upon disconnect."""
  delete_token_on_disconnect: Boolean
}

"""RadiusProvider Serializer"""
input RadiusProviderRequest_Input {
  name: NonEmptyString!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  """
  List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.
  """
  client_networks: NonEmptyString
  """Shared secret between clients and server to hash packets."""
  shared_secret: NonEmptyString
  """
  When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
  """
  mfa_support: Boolean
}

"""SAMLProvider Serializer"""
input SAMLProviderRequest_Input {
  name: NonEmptyString!
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID!
  property_mappings: [UUID]
  acs_url: URL!
  """
  Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.
  """
  audience: String
  """Also known as EntityID"""
  issuer: NonEmptyString
  """
  Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3).
  """
  assertion_valid_not_before: NonEmptyString
  """
  Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  assertion_valid_not_on_or_after: NonEmptyString
  """
  Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  session_valid_not_on_or_after: NonEmptyString
  """
  Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered
  """
  name_id_mapping: UUID
  digest_algorithm: DigestAlgorithmEnum
  signature_algorithm: SignatureAlgorithmEnum
  """Keypair used to sign outgoing Responses going to the Service Provider."""
  signing_kp: UUID
  """
  When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
  """
  verification_kp: UUID
  """
  This determines how authentik sends the response back to the Service Provider.
  """
  sp_binding: JSON
  """Default relay_state value for IDP-initiated logins"""
  default_relay_state: String
}

"""SCIMProvider Serializer"""
input SCIMProviderRequest_Input {
  name: NonEmptyString!
  property_mappings: [UUID]
  """Property mappings used for group creation/updating."""
  property_mappings_group: [UUID]
  """Base URL to SCIM requests, usually ends in /v2"""
  url: NonEmptyString!
  """Authentication token"""
  token: NonEmptyString!
  exclude_users_service_account: Boolean
  filter_group: UUID
}

union core_user_consent_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_users_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "User") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = User | ValidationError | GenericError

"""User Serializer"""
input UserRequest_Input {
  username: mutationInput_core_users_create_input_username!
  """User's display name."""
  name: String!
  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean
  last_login: DateTime
  groups: [UUID]
  email: EmailAddress
  attributes: JSON
  path: NonEmptyString
  type: UserTypeEnum
}

scalar mutationInput_core_users_create_input_username @length(subgraph: "Authentik", min: 1, max: 150)

union core_users_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "User") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = User | ValidationError | GenericError

union core_users_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "User") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = User | ValidationError | GenericError

"""User Serializer"""
input PatchedUserRequest_Input {
  username: mutationInput_core_users_partial_update_input_username
  """User's display name."""
  name: String
  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  is_active: Boolean
  last_login: DateTime
  groups: [UUID]
  email: EmailAddress
  attributes: JSON
  path: NonEmptyString
  type: UserTypeEnum
}

scalar mutationInput_core_users_partial_update_input_username @length(subgraph: "Authentik", min: 1, max: 150)

union core_users_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_users_impersonate_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_users_recovery_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Link") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Link | ValidationError | GenericError

union core_users_recovery_email_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union core_users_set_password_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | GenericError

input UserPasswordSetRequest_Input {
  password: NonEmptyString!
}

union core_users_service_account_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserServiceAccountResponse") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserServiceAccountResponse | ValidationError | GenericError

type UserServiceAccountResponse {
  username: String!
  token: String!
  user_uid: String!
  user_pk: Int!
  group_pk: String
}

input UserServiceAccountRequest_Input {
  name: NonEmptyString!
  create_group: Boolean
  expiring: Boolean = true
  """If not provided, valid for 360 days"""
  expires: DateTime
}

union crypto_certificatekeypairs_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "CertificateKeyPair") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CertificateKeyPair | ValidationError | GenericError

"""CertificateKeyPair Serializer"""
input CertificateKeyPairRequest_Input {
  name: NonEmptyString!
  """PEM-encoded Certificate data"""
  certificate_data: NonEmptyString!
  """
  Optional Private Key. If this is set, you can use this keypair for encryption.
  """
  key_data: String
}

union crypto_certificatekeypairs_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CertificateKeyPair") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CertificateKeyPair | ValidationError | GenericError

union crypto_certificatekeypairs_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CertificateKeyPair") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CertificateKeyPair | ValidationError | GenericError

"""CertificateKeyPair Serializer"""
input PatchedCertificateKeyPairRequest_Input {
  name: NonEmptyString
  """PEM-encoded Certificate data"""
  certificate_data: NonEmptyString
  """
  Optional Private Key. If this is set, you can use this keypair for encryption.
  """
  key_data: String
}

union crypto_certificatekeypairs_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union crypto_certificatekeypairs_generate_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CertificateKeyPair") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CertificateKeyPair | GenericError

"""Certificate generation parameters"""
input CertificateGenerationRequest_Input {
  common_name: NonEmptyString!
  subject_alt_name: String
  validity_days: Int!
  alg: AlgEnum
}

enum AlgEnum {
  rsa
  ecdsa
}

union enterprise_license_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "License") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = License | ValidationError | GenericError

"""License Serializer"""
input LicenseRequest_Input {
  key: NonEmptyString!
}

union enterprise_license_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "License") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = License | ValidationError | GenericError

union enterprise_license_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "License") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = License | ValidationError | GenericError

"""License Serializer"""
input PatchedLicenseRequest_Input {
  key: NonEmptyString
}

union enterprise_license_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union events_events_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Event") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Event | ValidationError | GenericError

"""Event Serializer"""
input EventRequest_Input {
  user: JSON
  action: EventActions!
  app: NonEmptyString!
  context: JSON
  client_ip: NonEmptyString
  expires: DateTime
  brand: JSON
}

union events_events_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Event") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Event | ValidationError | GenericError

union events_events_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Event") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Event | ValidationError | GenericError

"""Event Serializer"""
input PatchedEventRequest_Input {
  user: JSON
  action: EventActions
  app: NonEmptyString
  context: JSON
  client_ip: NonEmptyString
  expires: DateTime
  brand: JSON
}

union events_events_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union events_notifications_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Notification") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Notification | ValidationError | GenericError

"""Notification Serializer"""
input NotificationRequest_Input {
  event: EventRequest_Input
  seen: Boolean
}

union events_notifications_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Notification") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Notification | ValidationError | GenericError

"""Notification Serializer"""
input PatchedNotificationRequest_Input {
  event: EventRequest_Input
  seen: Boolean
}

union events_notifications_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union events_notifications_mark_all_seen_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union events_rules_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "NotificationRule") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationRule | ValidationError | GenericError

"""NotificationRule Serializer"""
input NotificationRuleRequest_Input {
  name: NonEmptyString!
  """
  Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI.
  """
  transports: [UUID]
  severity: SeverityEnum
  """
  Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.
  """
  group: UUID
}

union events_rules_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationRule") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationRule | ValidationError | GenericError

union events_rules_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationRule") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationRule | ValidationError | GenericError

"""NotificationRule Serializer"""
input PatchedNotificationRuleRequest_Input {
  name: NonEmptyString
  """
  Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI.
  """
  transports: [UUID]
  severity: SeverityEnum
  """
  Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.
  """
  group: UUID
}

union events_rules_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union events_system_tasks_run_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union events_transports_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "NotificationTransport") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationTransport | ValidationError | GenericError

"""NotificationTransport Serializer"""
input NotificationTransportRequest_Input {
  name: NonEmptyString!
  mode: NotificationTransportModeEnum
  webhook_url: URL
  webhook_mapping: UUID
  """
  Only send notification once, for example when sending a webhook into a chat channel.
  """
  send_once: Boolean
}

union events_transports_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationTransport") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationTransport | ValidationError | GenericError

union events_transports_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationTransport") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationTransport | ValidationError | GenericError

"""NotificationTransport Serializer"""
input PatchedNotificationTransportRequest_Input {
  name: NonEmptyString
  mode: NotificationTransportModeEnum
  webhook_url: URL
  webhook_mapping: UUID
  """
  Only send notification once, for example when sending a webhook into a chat channel.
  """
  send_once: Boolean
}

union events_transports_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union events_transports_test_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationTransportTest") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationTransportTest | ValidationError | GenericError

"""Notification test serializer"""
type NotificationTransportTest {
  messages: [String]!
}

union flows_bindings_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "FlowStageBinding") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = FlowStageBinding | ValidationError | GenericError

"""FlowStageBinding Serializer"""
input FlowStageBindingRequest_Input {
  target: UUID!
  stage: UUID!
  """Evaluate policies during the Flow planning process."""
  evaluate_on_plan: Boolean
  """Evaluate policies when the Stage is present to the user."""
  re_evaluate_policies: Boolean
  order: Int!
  policy_engine_mode: PolicyEngineMode
  invalid_response_action: InvalidResponseActionEnum
}

union flows_bindings_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "FlowStageBinding") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = FlowStageBinding | ValidationError | GenericError

union flows_bindings_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "FlowStageBinding") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = FlowStageBinding | ValidationError | GenericError

"""FlowStageBinding Serializer"""
input PatchedFlowStageBindingRequest_Input {
  target: UUID
  stage: UUID
  """Evaluate policies during the Flow planning process."""
  evaluate_on_plan: Boolean
  """Evaluate policies when the Stage is present to the user."""
  re_evaluate_policies: Boolean
  order: Int
  policy_engine_mode: PolicyEngineMode
  invalid_response_action: InvalidResponseActionEnum
}

union flows_bindings_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union flows_executor_solve_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AccessDeniedChallenge | AppleLoginChallenge | AuthenticatorDuoChallenge | AuthenticatorSMSChallenge | AuthenticatorStaticChallenge | AuthenticatorTOTPChallenge | AuthenticatorValidationChallenge | AuthenticatorWebAuthnChallenge | AutosubmitChallenge | CaptchaChallenge | ConsentChallenge | EmailChallenge | FlowErrorChallenge | IdentificationChallenge | OAuthDeviceCodeChallenge | OAuthDeviceCodeFinishChallenge | PasswordChallenge | PlexAuthenticationChallenge | PromptChallenge | RedirectChallenge | ShellChallenge | UserLoginChallenge | ValidationError | GenericError

input FlowChallengeResponseRequest_Input @oneOf(subgraph: "Authentik") {
  AppleChallengeResponseRequest_Input: AppleChallengeResponseRequest_Input
  AuthenticatorDuoChallengeResponseRequest_Input: AuthenticatorDuoChallengeResponseRequest_Input
  AuthenticatorSMSChallengeResponseRequest_Input: AuthenticatorSMSChallengeResponseRequest_Input
  AuthenticatorStaticChallengeResponseRequest_Input: AuthenticatorStaticChallengeResponseRequest_Input
  AuthenticatorTOTPChallengeResponseRequest_Input: AuthenticatorTOTPChallengeResponseRequest_Input
  AuthenticatorValidationChallengeResponseRequest_Input: AuthenticatorValidationChallengeResponseRequest_Input
  AuthenticatorWebAuthnChallengeResponseRequest_Input: AuthenticatorWebAuthnChallengeResponseRequest_Input
  AutoSubmitChallengeResponseRequest_Input: AutoSubmitChallengeResponseRequest_Input
  CaptchaChallengeResponseRequest_Input: CaptchaChallengeResponseRequest_Input
  ConsentChallengeResponseRequest_Input: ConsentChallengeResponseRequest_Input
  EmailChallengeResponseRequest_Input: EmailChallengeResponseRequest_Input
  IdentificationChallengeResponseRequest_Input: IdentificationChallengeResponseRequest_Input
  OAuthDeviceCodeChallengeResponseRequest_Input: OAuthDeviceCodeChallengeResponseRequest_Input
  OAuthDeviceCodeFinishChallengeResponseRequest_Input: OAuthDeviceCodeFinishChallengeResponseRequest_Input
  PasswordChallengeResponseRequest_Input: PasswordChallengeResponseRequest_Input
  PlexAuthenticationChallengeResponseRequest_Input: PlexAuthenticationChallengeResponseRequest_Input
  PromptChallengeResponseRequest_Input: PromptChallengeResponseRequest_Input
  UserLoginChallengeResponseRequest_Input: UserLoginChallengeResponseRequest_Input
}

"""Pseudo class for apple response"""
input AppleChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-source-oauth-apple"
}

"""Pseudo class for duo response"""
input AuthenticatorDuoChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-authenticator-duo"
}

"""SMS Challenge response, device is set by get_response_instance"""
input AuthenticatorSMSChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-authenticator-sms"
  code: Int
  phone_number: NonEmptyString
}

"""Pseudo class for static response"""
input AuthenticatorStaticChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-authenticator-static"
}

"""TOTP Challenge response, device is set by get_response_instance"""
input AuthenticatorTOTPChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-authenticator-totp"
  code: Int!
}

"""Challenge used for Code-based and WebAuthn authenticators"""
input AuthenticatorValidationChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-authenticator-validate"
  selected_challenge: DeviceChallengeRequest_Input
  selected_stage: NonEmptyString
  code: NonEmptyString
  webauthn: JSON
  duo: Int
}

"""Single device challenge"""
input DeviceChallengeRequest_Input {
  device_class: NonEmptyString!
  device_uid: NonEmptyString!
  challenge: JSON!
}

"""WebAuthn Challenge response"""
input AuthenticatorWebAuthnChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-authenticator-webauthn"
  response: JSON!
}

"""Pseudo class for autosubmit response"""
input AutoSubmitChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-autosubmit"
}

"""Validate captcha token"""
input CaptchaChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-captcha"
  token: NonEmptyString!
}

"""Consent challenge response, any valid response request is valid"""
input ConsentChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-consent"
  token: NonEmptyString!
}

"""
Email challenge resposen. No fields. This challenge is
always declared invalid to give the user a chance to retry
"""
input EmailChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-email"
}

"""Identification challenge"""
input IdentificationChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-identification"
  uid_field: NonEmptyString!
  password: String
}

"""Response that includes the user-entered device code"""
input OAuthDeviceCodeChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-provider-oauth2-device-code"
  code: Int!
}

"""Response that device has been authenticated and tab can be closed"""
input OAuthDeviceCodeFinishChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-provider-oauth2-device-code-finish"
}

"""Password challenge response"""
input PasswordChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-password"
  password: NonEmptyString!
}

"""Pseudo class for plex response"""
input PlexAuthenticationChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-source-plex"
}

"""
Validate response, fields are dynamically created based
on the stage
"""
input PromptChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-prompt"
}

"""User login challenge"""
input UserLoginChallengeResponseRequest_Input {
  component: NonEmptyString = "ak-stage-user-login"
  remember_me: Boolean!
}

union flows_instances_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Flow") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Flow | ValidationError | GenericError

"""Flow Serializer"""
input FlowRequest_Input {
  name: NonEmptyString!
  slug: mutationInput_flows_instances_create_input_slug!
  """Shown as the Title in Flow pages."""
  title: NonEmptyString!
  designation: FlowDesignationEnum!
  policy_engine_mode: PolicyEngineMode
  """
  Enable compatibility mode, increases compatibility with password managers on mobile devices.
  """
  compatibility_mode: Boolean
  layout: FlowLayoutEnum
  denied_action: DeniedActionEnum
  authentication: AuthenticationEnum
}

scalar mutationInput_flows_instances_create_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union flows_instances_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Flow") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Flow | ValidationError | GenericError

union flows_instances_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Flow") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Flow | ValidationError | GenericError

"""Flow Serializer"""
input PatchedFlowRequest_Input {
  name: NonEmptyString
  slug: mutationInput_flows_instances_partial_update_input_slug
  """Shown as the Title in Flow pages."""
  title: NonEmptyString
  designation: FlowDesignationEnum
  policy_engine_mode: PolicyEngineMode
  """
  Enable compatibility mode, increases compatibility with password managers on mobile devices.
  """
  compatibility_mode: Boolean
  layout: FlowLayoutEnum
  denied_action: DeniedActionEnum
  authentication: AuthenticationEnum
}

scalar mutationInput_flows_instances_partial_update_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union flows_instances_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union flows_instances_cache_clear_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | GenericError

union flows_instances_import_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "FlowImportResult") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "FlowImportResult") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = FlowImportResult | GenericError

"""Logs of an attempted flow import"""
type FlowImportResult {
  logs: [LogEvent]!
  success: Boolean!
}

union managed_blueprints_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "BlueprintInstance") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = BlueprintInstance | ValidationError | GenericError

"""Info about a single blueprint instance file"""
input BlueprintInstanceRequest_Input {
  name: NonEmptyString!
  path: String
  context: JSON
  enabled: Boolean
  content: String
}

union managed_blueprints_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "BlueprintInstance") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = BlueprintInstance | ValidationError | GenericError

union managed_blueprints_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "BlueprintInstance") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = BlueprintInstance | ValidationError | GenericError

"""Info about a single blueprint instance file"""
input PatchedBlueprintInstanceRequest_Input {
  name: NonEmptyString
  path: String
  context: JSON
  enabled: Boolean
  content: String
}

union managed_blueprints_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union managed_blueprints_apply_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "BlueprintInstance") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = BlueprintInstance | ValidationError | GenericError

union oauth2_access_tokens_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union oauth2_authorization_codes_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union oauth2_refresh_tokens_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union outposts_instances_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Outpost") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Outpost | ValidationError | GenericError

"""Outpost Serializer"""
input OutpostRequest_Input {
  name: NonEmptyString!
  type: OutpostTypeEnum!
  providers: [Int]!
  """
  Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
  """
  service_connection: UUID
  config: JSON!
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
}

union outposts_instances_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Outpost") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Outpost | ValidationError | GenericError

union outposts_instances_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Outpost") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Outpost | ValidationError | GenericError

"""Outpost Serializer"""
input PatchedOutpostRequest_Input {
  name: NonEmptyString
  type: OutpostTypeEnum
  providers: [Int]
  """
  Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
  """
  service_connection: UUID
  config: JSON
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
}

union outposts_instances_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union outposts_service_connections_all_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union outposts_service_connections_docker_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "DockerServiceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DockerServiceConnection | ValidationError | GenericError

"""DockerServiceConnection Serializer"""
input DockerServiceConnectionRequest_Input {
  name: NonEmptyString!
  """
  If enabled, use the local connection. Required Docker socket/Kubernetes Integration
  """
  local: Boolean
  """
  Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system.
  """
  url: NonEmptyString!
  """
  CA which the endpoint's Certificate is verified against. Can be left empty for no validation.
  """
  tls_verification: UUID
  """
  Certificate/Key used for authentication. Can be left empty for no authentication.
  """
  tls_authentication: UUID
}

union outposts_service_connections_docker_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DockerServiceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DockerServiceConnection | ValidationError | GenericError

union outposts_service_connections_docker_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DockerServiceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DockerServiceConnection | ValidationError | GenericError

"""DockerServiceConnection Serializer"""
input PatchedDockerServiceConnectionRequest_Input {
  name: NonEmptyString
  """
  If enabled, use the local connection. Required Docker socket/Kubernetes Integration
  """
  local: Boolean
  """
  Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system.
  """
  url: NonEmptyString
  """
  CA which the endpoint's Certificate is verified against. Can be left empty for no validation.
  """
  tls_verification: UUID
  """
  Certificate/Key used for authentication. Can be left empty for no authentication.
  """
  tls_authentication: UUID
}

union outposts_service_connections_docker_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union outposts_service_connections_kubernetes_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "KubernetesServiceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = KubernetesServiceConnection | ValidationError | GenericError

"""KubernetesServiceConnection Serializer"""
input KubernetesServiceConnectionRequest_Input {
  name: NonEmptyString!
  """
  If enabled, use the local connection. Required Docker socket/Kubernetes Integration
  """
  local: Boolean
  """
  Paste your kubeconfig here. authentik will automatically use the currently selected context.
  """
  kubeconfig: JSON
  """Verify SSL Certificates of the Kubernetes API endpoint"""
  verify_ssl: Boolean
}

union outposts_service_connections_kubernetes_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "KubernetesServiceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = KubernetesServiceConnection | ValidationError | GenericError

union outposts_service_connections_kubernetes_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "KubernetesServiceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = KubernetesServiceConnection | ValidationError | GenericError

"""KubernetesServiceConnection Serializer"""
input PatchedKubernetesServiceConnectionRequest_Input {
  name: NonEmptyString
  """
  If enabled, use the local connection. Required Docker socket/Kubernetes Integration
  """
  local: Boolean
  """
  Paste your kubeconfig here. authentik will automatically use the currently selected context.
  """
  kubeconfig: JSON
  """Verify SSL Certificates of the Kubernetes API endpoint"""
  verify_ssl: Boolean
}

union outposts_service_connections_kubernetes_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union policies_all_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union policies_all_test_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PolicyTestResult") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PolicyTestResult | GenericError

"""Test policy execution for a user with context"""
input PolicyTestRequest_Input {
  user: Int!
  context: JSON
}

union policies_all_cache_clear_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | GenericError

union policies_bindings_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "PolicyBinding") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PolicyBinding | ValidationError | GenericError

"""PolicyBinding Serializer"""
input PolicyBindingRequest_Input {
  policy: UUID
  group: UUID
  user: Int
  target: UUID!
  """Negates the outcome of the policy. Messages are unaffected."""
  negate: Boolean
  enabled: Boolean
  order: Int!
  """Timeout after which Policy execution is terminated."""
  timeout: NonNegativeInt
  """Result if the Policy execution fails."""
  failure_result: Boolean
}

union policies_bindings_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PolicyBinding") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PolicyBinding | ValidationError | GenericError

union policies_bindings_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PolicyBinding") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PolicyBinding | ValidationError | GenericError

"""PolicyBinding Serializer"""
input PatchedPolicyBindingRequest_Input {
  policy: UUID
  group: UUID
  user: Int
  target: UUID
  """Negates the outcome of the policy. Messages are unaffected."""
  negate: Boolean
  enabled: Boolean
  order: Int
  """Timeout after which Policy execution is terminated."""
  timeout: NonNegativeInt
  """Result if the Policy execution fails."""
  failure_result: Boolean
}

union policies_bindings_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union policies_dummy_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "DummyPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DummyPolicy | ValidationError | GenericError

"""Dummy Policy Serializer"""
input DummyPolicyRequest_Input {
  name: NonEmptyString!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  result: Boolean
  wait_min: Int
  wait_max: Int
}

union policies_dummy_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DummyPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DummyPolicy | ValidationError | GenericError

union policies_dummy_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DummyPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DummyPolicy | ValidationError | GenericError

"""Dummy Policy Serializer"""
input PatchedDummyPolicyRequest_Input {
  name: NonEmptyString
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  result: Boolean
  wait_min: Int
  wait_max: Int
}

union policies_dummy_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union policies_event_matcher_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "EventMatcherPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = EventMatcherPolicy | ValidationError | GenericError

"""Event Matcher Policy Serializer"""
input EventMatcherPolicyRequest_Input {
  name: NonEmptyString!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  action: EventActions
  """
  Matches Event's Client IP (strict matching, for network matching use an Expression Policy)
  """
  client_ip: NonEmptyString
  app: AppEnum
  model: ModelEnum
}

union policies_event_matcher_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "EventMatcherPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = EventMatcherPolicy | ValidationError | GenericError

union policies_event_matcher_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "EventMatcherPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = EventMatcherPolicy | ValidationError | GenericError

"""Event Matcher Policy Serializer"""
input PatchedEventMatcherPolicyRequest_Input {
  name: NonEmptyString
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  action: EventActions
  """
  Matches Event's Client IP (strict matching, for network matching use an Expression Policy)
  """
  client_ip: NonEmptyString
  app: AppEnum
  model: ModelEnum
}

union policies_event_matcher_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union policies_expression_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "ExpressionPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ExpressionPolicy | ValidationError | GenericError

"""Group Membership Policy Serializer"""
input ExpressionPolicyRequest_Input {
  name: NonEmptyString!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  expression: NonEmptyString!
}

union policies_expression_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ExpressionPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ExpressionPolicy | ValidationError | GenericError

union policies_expression_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ExpressionPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ExpressionPolicy | ValidationError | GenericError

"""Group Membership Policy Serializer"""
input PatchedExpressionPolicyRequest_Input {
  name: NonEmptyString
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  expression: NonEmptyString
}

union policies_expression_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union policies_password_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "PasswordPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordPolicy | ValidationError | GenericError

"""Password Policy Serializer"""
input PasswordPolicyRequest_Input {
  name: NonEmptyString!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  """Field key to check, field keys defined in Prompt stages are available."""
  password_field: NonEmptyString
  amount_digits: NonNegativeInt
  amount_uppercase: NonNegativeInt
  amount_lowercase: NonNegativeInt
  amount_symbols: NonNegativeInt
  length_min: NonNegativeInt
  symbol_charset: NonEmptyString
  error_message: String
  check_static_rules: Boolean
  check_have_i_been_pwned: Boolean
  check_zxcvbn: Boolean
  """How many times the password hash is allowed to be on haveibeenpwned"""
  hibp_allowed_count: NonNegativeInt
  """
  If the zxcvbn score is equal or less than this value, the policy will fail.
  """
  zxcvbn_score_threshold: NonNegativeInt
}

union policies_password_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PasswordPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordPolicy | ValidationError | GenericError

union policies_password_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PasswordPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordPolicy | ValidationError | GenericError

"""Password Policy Serializer"""
input PatchedPasswordPolicyRequest_Input {
  name: NonEmptyString
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  """Field key to check, field keys defined in Prompt stages are available."""
  password_field: NonEmptyString
  amount_digits: NonNegativeInt
  amount_uppercase: NonNegativeInt
  amount_lowercase: NonNegativeInt
  amount_symbols: NonNegativeInt
  length_min: NonNegativeInt
  symbol_charset: NonEmptyString
  error_message: String
  check_static_rules: Boolean
  check_have_i_been_pwned: Boolean
  check_zxcvbn: Boolean
  """How many times the password hash is allowed to be on haveibeenpwned"""
  hibp_allowed_count: NonNegativeInt
  """
  If the zxcvbn score is equal or less than this value, the policy will fail.
  """
  zxcvbn_score_threshold: NonNegativeInt
}

union policies_password_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union policies_password_expiry_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "PasswordExpiryPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordExpiryPolicy | ValidationError | GenericError

"""Password Expiry Policy Serializer"""
input PasswordExpiryPolicyRequest_Input {
  name: NonEmptyString!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  days: Int!
  deny_only: Boolean
}

union policies_password_expiry_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PasswordExpiryPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordExpiryPolicy | ValidationError | GenericError

union policies_password_expiry_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PasswordExpiryPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordExpiryPolicy | ValidationError | GenericError

"""Password Expiry Policy Serializer"""
input PatchedPasswordExpiryPolicyRequest_Input {
  name: NonEmptyString
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  days: Int
  deny_only: Boolean
}

union policies_password_expiry_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union policies_reputation_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "ReputationPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ReputationPolicy | ValidationError | GenericError

"""Reputation Policy Serializer"""
input ReputationPolicyRequest_Input {
  name: NonEmptyString!
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  check_ip: Boolean
  check_username: Boolean
  threshold: Int
}

union policies_reputation_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ReputationPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ReputationPolicy | ValidationError | GenericError

union policies_reputation_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ReputationPolicy") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ReputationPolicy | ValidationError | GenericError

"""Reputation Policy Serializer"""
input PatchedReputationPolicyRequest_Input {
  name: NonEmptyString
  """
  When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
  """
  execution_logging: Boolean
  check_ip: Boolean
  check_username: Boolean
  threshold: Int
}

union policies_reputation_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union policies_reputation_scores_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union propertymappings_all_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union propertymappings_all_test_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PropertyMappingTestResult") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PropertyMappingTestResult | GenericError

"""Result of a Property-mapping test"""
type PropertyMappingTestResult {
  result: String!
  successful: Boolean!
}

union propertymappings_ldap_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "LDAPPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPPropertyMapping | ValidationError | GenericError

"""LDAP PropertyMapping Serializer"""
input LDAPPropertyMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString!
  expression: NonEmptyString!
  object_field: NonEmptyString!
}

union propertymappings_ldap_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPPropertyMapping | ValidationError | GenericError

union propertymappings_ldap_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPPropertyMapping | ValidationError | GenericError

"""LDAP PropertyMapping Serializer"""
input PatchedLDAPPropertyMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString
  expression: NonEmptyString
  object_field: NonEmptyString
}

union propertymappings_ldap_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union propertymappings_notification_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "NotificationWebhookMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationWebhookMapping | ValidationError | GenericError

"""NotificationWebhookMapping Serializer"""
input NotificationWebhookMappingRequest_Input {
  name: NonEmptyString!
  expression: NonEmptyString!
}

union propertymappings_notification_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationWebhookMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationWebhookMapping | ValidationError | GenericError

union propertymappings_notification_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "NotificationWebhookMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = NotificationWebhookMapping | ValidationError | GenericError

"""NotificationWebhookMapping Serializer"""
input PatchedNotificationWebhookMappingRequest_Input {
  name: NonEmptyString
  expression: NonEmptyString
}

union propertymappings_notification_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union propertymappings_rac_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "RACPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RACPropertyMapping | ValidationError | GenericError

"""RACPropertyMapping Serializer"""
input RACPropertyMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString!
  expression: String
  static_settings: JSON!
}

union propertymappings_rac_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RACPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RACPropertyMapping | ValidationError | GenericError

union propertymappings_rac_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RACPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RACPropertyMapping | ValidationError | GenericError

"""RACPropertyMapping Serializer"""
input PatchedRACPropertyMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString
  expression: String
  static_settings: JSON
}

union propertymappings_rac_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union propertymappings_saml_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SAMLPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLPropertyMapping | ValidationError | GenericError

"""SAMLPropertyMapping Serializer"""
input SAMLPropertyMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString!
  expression: NonEmptyString!
  saml_name: NonEmptyString!
  friendly_name: String
}

union propertymappings_saml_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLPropertyMapping | ValidationError | GenericError

union propertymappings_saml_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLPropertyMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLPropertyMapping | ValidationError | GenericError

"""SAMLPropertyMapping Serializer"""
input PatchedSAMLPropertyMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString
  expression: NonEmptyString
  saml_name: NonEmptyString
  friendly_name: String
}

union propertymappings_saml_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union propertymappings_scim_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SCIMMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMMapping | ValidationError | GenericError

"""SCIMMapping Serializer"""
input SCIMMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString!
  expression: NonEmptyString!
}

union propertymappings_scim_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMMapping | ValidationError | GenericError

union propertymappings_scim_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMMapping | ValidationError | GenericError

"""SCIMMapping Serializer"""
input PatchedSCIMMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString
  expression: NonEmptyString
}

union propertymappings_scim_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union propertymappings_scope_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "ScopeMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ScopeMapping | ValidationError | GenericError

"""ScopeMapping Serializer"""
input ScopeMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString!
  expression: NonEmptyString!
  """Scope name requested by the client"""
  scope_name: NonEmptyString!
  """
  Description shown to the user when consenting. If left empty, the user won't be informed.
  """
  description: String
}

union propertymappings_scope_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ScopeMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ScopeMapping | ValidationError | GenericError

union propertymappings_scope_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ScopeMapping") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ScopeMapping | ValidationError | GenericError

"""ScopeMapping Serializer"""
input PatchedScopeMappingRequest_Input {
  """
  Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
  """
  managed: NonEmptyString
  name: NonEmptyString
  expression: NonEmptyString
  """Scope name requested by the client"""
  scope_name: NonEmptyString
  """
  Description shown to the user when consenting. If left empty, the user won't be informed.
  """
  description: String
}

union propertymappings_scope_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union providers_all_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union providers_ldap_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "LDAPProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPProvider | ValidationError | GenericError

union providers_ldap_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPProvider | ValidationError | GenericError

union providers_ldap_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPProvider | ValidationError | GenericError

"""LDAPProvider Serializer"""
input PatchedLDAPProviderRequest_Input {
  name: NonEmptyString
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID
  property_mappings: [UUID]
  """DN under which objects are accessible."""
  base_dn: NonEmptyString
  """
  Users in this group can do search queries. If not set, every user can execute search queries.
  """
  search_group: UUID
  certificate: UUID
  tls_server_name: String
  """
  The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber
  """
  uid_start_number: Int
  """
  The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber
  """
  gid_start_number: Int
  search_mode: LDAPAPIAccessMode
  bind_mode: LDAPAPIAccessMode
  """
  When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
  """
  mfa_support: Boolean
}

union providers_ldap_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union providers_oauth2_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "OAuth2Provider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OAuth2Provider | ValidationError | GenericError

union providers_oauth2_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "OAuth2Provider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OAuth2Provider | ValidationError | GenericError

union providers_oauth2_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "OAuth2Provider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OAuth2Provider | ValidationError | GenericError

"""OAuth2Provider Serializer"""
input PatchedOAuth2ProviderRequest_Input {
  name: NonEmptyString
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID
  property_mappings: [UUID]
  client_type: ClientTypeEnum
  client_id: mutationInput_providers_oauth2_partial_update_input_client_id
  client_secret: mutationInput_providers_oauth2_partial_update_input_client_secret
  """
  Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  access_code_validity: NonEmptyString
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  access_token_validity: NonEmptyString
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  refresh_token_validity: NonEmptyString
  """
  Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint.
  """
  include_claims_in_id_token: Boolean
  """
  Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.
  """
  signing_key: UUID
  """Enter each URI on a new line."""
  redirect_uris: String
  sub_mode: SubModeEnum
  issuer_mode: IssuerModeEnum
  jwks_sources: [UUID]
}

scalar mutationInput_providers_oauth2_partial_update_input_client_id @length(subgraph: "Authentik", min: 1, max: 255)

scalar mutationInput_providers_oauth2_partial_update_input_client_secret @length(subgraph: "Authentik", max: 255)

union providers_oauth2_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union providers_proxy_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "ProxyProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ProxyProvider | ValidationError | GenericError

union providers_proxy_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ProxyProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ProxyProvider | ValidationError | GenericError

union providers_proxy_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ProxyProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ProxyProvider | ValidationError | GenericError

"""ProxyProvider Serializer"""
input PatchedProxyProviderRequest_Input {
  name: NonEmptyString
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID
  property_mappings: [UUID]
  internal_host: URL
  external_host: URL
  """Validate SSL Certificates of upstream servers"""
  internal_host_ssl_validation: Boolean
  certificate: UUID
  """
  Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
  """
  skip_path_regex: String
  """
  Set a custom HTTP-Basic Authentication header based on values from authentik.
  """
  basic_auth_enabled: Boolean
  """
  User/Group Attribute used for the password part of the HTTP-Basic Header.
  """
  basic_auth_password_attribute: String
  """
  User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
  """
  basic_auth_user_attribute: String
  mode: ProxyMode
  """
  When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
  """
  intercept_header_auth: Boolean
  cookie_domain: String
  jwks_sources: [UUID]
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  access_token_validity: NonEmptyString
  """
  Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  refresh_token_validity: NonEmptyString
}

union providers_proxy_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union providers_rac_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "RACProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RACProvider | ValidationError | GenericError

union providers_rac_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RACProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RACProvider | ValidationError | GenericError

union providers_rac_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RACProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RACProvider | ValidationError | GenericError

"""RACProvider Serializer"""
input PatchedRACProviderRequest_Input {
  name: NonEmptyString
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID
  property_mappings: [UUID]
  settings: JSON
  """
  Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
  """
  connection_expiry: NonEmptyString
  """When set to true, connection tokens will be deleted upon disconnect."""
  delete_token_on_disconnect: Boolean
}

union providers_rac_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union providers_radius_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "RadiusProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RadiusProvider | ValidationError | GenericError

union providers_radius_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RadiusProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RadiusProvider | ValidationError | GenericError

union providers_radius_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "RadiusProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = RadiusProvider | ValidationError | GenericError

"""RadiusProvider Serializer"""
input PatchedRadiusProviderRequest_Input {
  name: NonEmptyString
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID
  property_mappings: [UUID]
  """
  List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.
  """
  client_networks: NonEmptyString
  """Shared secret between clients and server to hash packets."""
  shared_secret: NonEmptyString
  """
  When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
  """
  mfa_support: Boolean
}

union providers_radius_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union providers_saml_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SAMLProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLProvider | ValidationError | GenericError

union providers_saml_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLProvider | ValidationError | GenericError

union providers_saml_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLProvider | ValidationError | GenericError

"""SAMLProvider Serializer"""
input PatchedSAMLProviderRequest_Input {
  name: NonEmptyString
  """
  Flow used for authentication when the associated application is accessed by an un-authenticated user.
  """
  authentication_flow: UUID
  """Flow used when authorizing this provider."""
  authorization_flow: UUID
  property_mappings: [UUID]
  acs_url: URL
  """
  Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.
  """
  audience: String
  """Also known as EntityID"""
  issuer: NonEmptyString
  """
  Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3).
  """
  assertion_valid_not_before: NonEmptyString
  """
  Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  assertion_valid_not_on_or_after: NonEmptyString
  """
  Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
  """
  session_valid_not_on_or_after: NonEmptyString
  """
  Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered
  """
  name_id_mapping: UUID
  digest_algorithm: DigestAlgorithmEnum
  signature_algorithm: SignatureAlgorithmEnum
  """Keypair used to sign outgoing Responses going to the Service Provider."""
  signing_kp: UUID
  """
  When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
  """
  verification_kp: UUID
  """
  This determines how authentik sends the response back to the Service Provider.
  """
  sp_binding: JSON
  """Default relay_state value for IDP-initiated logins"""
  default_relay_state: String
}

union providers_saml_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union providers_saml_import_metadata_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | GenericError

"""Import saml provider from XML Metadata"""
input SAMLProviderImportRequest_Input {
  name: NonEmptyString!
  authorization_flow: UUID!
  file: File!
}

union providers_scim_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SCIMProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMProvider | ValidationError | GenericError

union providers_scim_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMProvider | ValidationError | GenericError

union providers_scim_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMProvider") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMProvider | ValidationError | GenericError

"""SCIMProvider Serializer"""
input PatchedSCIMProviderRequest_Input {
  name: NonEmptyString
  property_mappings: [UUID]
  """Property mappings used for group creation/updating."""
  property_mappings_group: [UUID]
  """Base URL to SCIM requests, usually ends in /v2"""
  url: NonEmptyString
  """Authentication token"""
  token: NonEmptyString
  exclude_users_service_account: Boolean
  filter_group: UUID
}

union providers_scim_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union rac_connection_tokens_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ConnectionToken") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ConnectionToken | ValidationError | GenericError

"""ConnectionToken Serializer"""
input ConnectionTokenRequest_Input {
  pk: UUID
  provider: Int!
  endpoint: UUID!
}

union rac_connection_tokens_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ConnectionToken") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ConnectionToken | ValidationError | GenericError

"""ConnectionToken Serializer"""
input PatchedConnectionTokenRequest_Input {
  pk: UUID
  provider: Int
  endpoint: UUID
}

union rac_connection_tokens_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union rac_endpoints_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Endpoint") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Endpoint | ValidationError | GenericError

"""Endpoint Serializer"""
input EndpointRequest_Input {
  name: NonEmptyString!
  provider: Int!
  protocol: ProtocolEnum!
  host: NonEmptyString!
  settings: JSON
  property_mappings: [UUID]
  auth_mode: AuthModeEnum!
  maximum_connections: Int
}

union rac_endpoints_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Endpoint") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Endpoint | ValidationError | GenericError

union rac_endpoints_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Endpoint") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Endpoint | ValidationError | GenericError

"""Endpoint Serializer"""
input PatchedEndpointRequest_Input {
  name: NonEmptyString
  provider: Int
  protocol: ProtocolEnum
  host: NonEmptyString
  settings: JSON
  property_mappings: [UUID]
  auth_mode: AuthModeEnum
  maximum_connections: Int
}

union rac_endpoints_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union rbac_permissions_assigned_by_roles_assign_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

"""Request to assign a new permission"""
input PermissionAssignRequest_Input {
  permissions: [NonEmptyString]!
  model: ModelEnum
  object_pk: NonEmptyString
}

union rbac_permissions_assigned_by_roles_unassign_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

"""Request to assign a new permission"""
input PatchedPermissionAssignRequest_Input {
  permissions: [NonEmptyString]
  model: ModelEnum
  object_pk: NonEmptyString
}

union rbac_permissions_assigned_by_users_assign_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union rbac_permissions_assigned_by_users_unassign_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union rbac_roles_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Role") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Role | ValidationError | GenericError

"""Role serializer"""
input RoleRequest_Input {
  name: mutationInput_rbac_roles_create_input_name!
}

scalar mutationInput_rbac_roles_create_input_name @length(subgraph: "Authentik", min: 1, max: 150)

union rbac_roles_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Role") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Role | ValidationError | GenericError

union rbac_roles_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Role") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Role | ValidationError | GenericError

"""Role serializer"""
input PatchedRoleRequest_Input {
  name: mutationInput_rbac_roles_partial_update_input_name
}

scalar mutationInput_rbac_roles_partial_update_input_name @length(subgraph: "Authentik", min: 1, max: 150)

union rbac_roles_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_all_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_ldap_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "LDAPSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPSource | ValidationError | GenericError

"""LDAP Source Serializer"""
input LDAPSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString!
  slug: mutationInput_sources_ldap_create_input_slug!
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
  server_uri: URL!
  """
  Optionally verify the LDAP Server's Certificate against the CA Chain in this keypair.
  """
  peer_certificate: UUID
  """
  Client certificate to authenticate against the LDAP Server's Certificate.
  """
  client_certificate: UUID
  bind_cn: String
  bind_password: String
  start_tls: Boolean
  sni: Boolean
  base_dn: NonEmptyString!
  """Prepended to Base DN for User-queries."""
  additional_user_dn: String
  """Prepended to Base DN for Group-queries."""
  additional_group_dn: String
  """Consider Objects matching this filter to be Users."""
  user_object_filter: NonEmptyString
  """Consider Objects matching this filter to be Groups."""
  group_object_filter: NonEmptyString
  """Field which contains members of a group."""
  group_membership_field: NonEmptyString
  """Field which contains a unique Identifier."""
  object_uniqueness_field: NonEmptyString
  """Update internal authentik password when login succeeds with LDAP"""
  password_login_update_internal_password: Boolean
  sync_users: Boolean
  """
  When a user changes their password, sync it back to LDAP. This can only be enabled on a single LDAP source.
  """
  sync_users_password: Boolean
  sync_groups: Boolean
  sync_parent_group: UUID
  property_mappings: [UUID]
  """Property mappings used for group creation/updating."""
  property_mappings_group: [UUID]
}

scalar mutationInput_sources_ldap_create_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_ldap_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPSource | ValidationError | GenericError

union sources_ldap_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "LDAPSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = LDAPSource | ValidationError | GenericError

"""LDAP Source Serializer"""
input PatchedLDAPSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString
  slug: mutationInput_sources_ldap_partial_update_input_slug
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
  server_uri: URL
  """
  Optionally verify the LDAP Server's Certificate against the CA Chain in this keypair.
  """
  peer_certificate: UUID
  """
  Client certificate to authenticate against the LDAP Server's Certificate.
  """
  client_certificate: UUID
  bind_cn: String
  bind_password: String
  start_tls: Boolean
  sni: Boolean
  base_dn: NonEmptyString
  """Prepended to Base DN for User-queries."""
  additional_user_dn: String
  """Prepended to Base DN for Group-queries."""
  additional_group_dn: String
  """Consider Objects matching this filter to be Users."""
  user_object_filter: NonEmptyString
  """Consider Objects matching this filter to be Groups."""
  group_object_filter: NonEmptyString
  """Field which contains members of a group."""
  group_membership_field: NonEmptyString
  """Field which contains a unique Identifier."""
  object_uniqueness_field: NonEmptyString
  """Update internal authentik password when login succeeds with LDAP"""
  password_login_update_internal_password: Boolean
  sync_users: Boolean
  """
  When a user changes their password, sync it back to LDAP. This can only be enabled on a single LDAP source.
  """
  sync_users_password: Boolean
  sync_groups: Boolean
  sync_parent_group: UUID
  property_mappings: [UUID]
  """Property mappings used for group creation/updating."""
  property_mappings_group: [UUID]
}

scalar mutationInput_sources_ldap_partial_update_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_ldap_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_oauth_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "OAuthSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OAuthSource | ValidationError | GenericError

"""OAuth Source Serializer"""
input OAuthSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString!
  slug: mutationInput_sources_oauth_create_input_slug!
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
  provider_type: ProviderTypeEnum!
  """
  URL used to request the initial token. This URL is only required for OAuth 1.
  """
  request_token_url: mutationInput_sources_oauth_create_input_request_token_url
  """URL the user is redirect to to conest the flow."""
  authorization_url: mutationInput_sources_oauth_create_input_authorization_url
  """URL used by authentik to retrieve tokens."""
  access_token_url: mutationInput_sources_oauth_create_input_access_token_url
  """URL used by authentik to get user information."""
  profile_url: mutationInput_sources_oauth_create_input_profile_url
  consumer_key: NonEmptyString!
  consumer_secret: NonEmptyString!
  additional_scopes: String
  oidc_well_known_url: String
  oidc_jwks_url: String
  oidc_jwks: JSON
}

scalar mutationInput_sources_oauth_create_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

"""
URL used to request the initial token. This URL is only required for OAuth 1.
"""
scalar mutationInput_sources_oauth_create_input_request_token_url @length(subgraph: "Authentik", max: 255)

"""URL the user is redirect to to conest the flow."""
scalar mutationInput_sources_oauth_create_input_authorization_url @length(subgraph: "Authentik", max: 255)

"""URL used by authentik to retrieve tokens."""
scalar mutationInput_sources_oauth_create_input_access_token_url @length(subgraph: "Authentik", max: 255)

"""URL used by authentik to get user information."""
scalar mutationInput_sources_oauth_create_input_profile_url @length(subgraph: "Authentik", max: 255)

union sources_oauth_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "OAuthSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OAuthSource | ValidationError | GenericError

union sources_oauth_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "OAuthSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = OAuthSource | ValidationError | GenericError

"""OAuth Source Serializer"""
input PatchedOAuthSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString
  slug: mutationInput_sources_oauth_partial_update_input_slug
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
  provider_type: ProviderTypeEnum
  """
  URL used to request the initial token. This URL is only required for OAuth 1.
  """
  request_token_url: mutationInput_sources_oauth_partial_update_input_request_token_url
  """URL the user is redirect to to conest the flow."""
  authorization_url: mutationInput_sources_oauth_partial_update_input_authorization_url
  """URL used by authentik to retrieve tokens."""
  access_token_url: mutationInput_sources_oauth_partial_update_input_access_token_url
  """URL used by authentik to get user information."""
  profile_url: mutationInput_sources_oauth_partial_update_input_profile_url
  consumer_key: NonEmptyString
  consumer_secret: NonEmptyString
  additional_scopes: String
  oidc_well_known_url: String
  oidc_jwks_url: String
  oidc_jwks: JSON
}

scalar mutationInput_sources_oauth_partial_update_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

"""
URL used to request the initial token. This URL is only required for OAuth 1.
"""
scalar mutationInput_sources_oauth_partial_update_input_request_token_url @length(subgraph: "Authentik", max: 255)

"""URL the user is redirect to to conest the flow."""
scalar mutationInput_sources_oauth_partial_update_input_authorization_url @length(subgraph: "Authentik", max: 255)

"""URL used by authentik to retrieve tokens."""
scalar mutationInput_sources_oauth_partial_update_input_access_token_url @length(subgraph: "Authentik", max: 255)

"""URL used by authentik to get user information."""
scalar mutationInput_sources_oauth_partial_update_input_profile_url @length(subgraph: "Authentik", max: 255)

union sources_oauth_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_plex_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "PlexSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PlexSource | ValidationError | GenericError

"""Plex Source Serializer"""
input PlexSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString!
  slug: mutationInput_sources_plex_create_input_slug!
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
  """Client identifier used to talk to Plex."""
  client_id: NonEmptyString
  """
  Which servers a user has to be a member of to be granted access. Empty list allows every server.
  """
  allowed_servers: [NonEmptyString]
  """Allow friends to authenticate, even if you don't share a server."""
  allow_friends: Boolean
  """Plex token used to check friends"""
  plex_token: NonEmptyString!
}

scalar mutationInput_sources_plex_create_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_plex_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PlexSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PlexSource | ValidationError | GenericError

union sources_plex_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PlexSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PlexSource | ValidationError | GenericError

"""Plex Source Serializer"""
input PatchedPlexSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString
  slug: mutationInput_sources_plex_partial_update_input_slug
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
  """Client identifier used to talk to Plex."""
  client_id: NonEmptyString
  """
  Which servers a user has to be a member of to be granted access. Empty list allows every server.
  """
  allowed_servers: [NonEmptyString]
  """Allow friends to authenticate, even if you don't share a server."""
  allow_friends: Boolean
  """Plex token used to check friends"""
  plex_token: NonEmptyString
}

scalar mutationInput_sources_plex_partial_update_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_plex_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

"""Serializer to redeem a plex token"""
input PlexTokenRedeemRequest_Input {
  plex_token: NonEmptyString!
}

union sources_saml_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SAMLSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLSource | ValidationError | GenericError

"""SAMLSource Serializer"""
input SAMLSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString!
  slug: mutationInput_sources_saml_create_input_slug!
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
  """Flow used before authentication."""
  pre_authentication_flow: UUID!
  """Also known as Entity ID. Defaults the Metadata URL."""
  issuer: String
  """URL that the initial Login request is sent to."""
  sso_url: URL!
  """Optional URL if your IDP supports Single-Logout."""
  slo_url: URL
  """
  Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.
  """
  allow_idp_initiated: Boolean
  name_id_policy: NameIdPolicyEnum
  binding_type: BindingTypeEnum
  """
  When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
  """
  verification_kp: UUID
  """
  Keypair used to sign outgoing Responses going to the Identity Provider.
  """
  signing_kp: UUID
  digest_algorithm: DigestAlgorithmEnum
  signature_algorithm: SignatureAlgorithmEnum
  """
  Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).
  """
  temporary_user_delete_after: NonEmptyString
}

scalar mutationInput_sources_saml_create_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_saml_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLSource | ValidationError | GenericError

union sources_saml_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SAMLSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SAMLSource | ValidationError | GenericError

"""SAMLSource Serializer"""
input PatchedSAMLSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString
  slug: mutationInput_sources_saml_partial_update_input_slug
  enabled: Boolean
  """Flow to use when authenticating existing users."""
  authentication_flow: UUID
  """Flow to use when enrolling new users."""
  enrollment_flow: UUID
  policy_engine_mode: PolicyEngineMode
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
  """Flow used before authentication."""
  pre_authentication_flow: UUID
  """Also known as Entity ID. Defaults the Metadata URL."""
  issuer: String
  """URL that the initial Login request is sent to."""
  sso_url: URL
  """Optional URL if your IDP supports Single-Logout."""
  slo_url: URL
  """
  Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.
  """
  allow_idp_initiated: Boolean
  name_id_policy: NameIdPolicyEnum
  binding_type: BindingTypeEnum
  """
  When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
  """
  verification_kp: UUID
  """
  Keypair used to sign outgoing Responses going to the Identity Provider.
  """
  signing_kp: UUID
  digest_algorithm: DigestAlgorithmEnum
  signature_algorithm: SignatureAlgorithmEnum
  """
  Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).
  """
  temporary_user_delete_after: NonEmptyString
}

scalar mutationInput_sources_saml_partial_update_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_saml_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_scim_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SCIMSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSource | ValidationError | GenericError

"""SCIMSource Serializer"""
input SCIMSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString!
  slug: mutationInput_sources_scim_create_input_slug!
  enabled: Boolean
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
}

scalar mutationInput_sources_scim_create_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_scim_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSource | ValidationError | GenericError

union sources_scim_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSource") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSource | ValidationError | GenericError

"""SCIMSource Serializer"""
input PatchedSCIMSourceRequest_Input {
  """Source's display Name."""
  name: NonEmptyString
  slug: mutationInput_sources_scim_partial_update_input_slug
  enabled: Boolean
  user_matching_mode: UserMatchingModeEnum
  user_path_template: NonEmptyString
}

scalar mutationInput_sources_scim_partial_update_input_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union sources_scim_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_scim_groups_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SCIMSourceGroup") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSourceGroup | ValidationError | GenericError

"""SCIMSourceGroup Serializer"""
input SCIMSourceGroupRequest_Input {
  id: NonEmptyString!
  group: UUID!
  source: UUID!
  attributes: JSON
}

union sources_scim_groups_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSourceGroup") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSourceGroup | ValidationError | GenericError

union sources_scim_groups_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSourceGroup") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSourceGroup | ValidationError | GenericError

"""SCIMSourceGroup Serializer"""
input PatchedSCIMSourceGroupRequest_Input {
  id: NonEmptyString
  group: UUID
  source: UUID
  attributes: JSON
}

union sources_scim_groups_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_scim_users_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SCIMSourceUser") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSourceUser | ValidationError | GenericError

"""SCIMSourceUser Serializer"""
input SCIMSourceUserRequest_Input {
  id: NonEmptyString!
  user: Int!
  source: UUID!
  attributes: JSON
}

union sources_scim_users_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSourceUser") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSourceUser | ValidationError | GenericError

union sources_scim_users_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SCIMSourceUser") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SCIMSourceUser | ValidationError | GenericError

"""SCIMSourceUser Serializer"""
input PatchedSCIMSourceUserRequest_Input {
  id: NonEmptyString
  user: Int
  source: UUID
  attributes: JSON
}

union sources_scim_users_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_user_connections_all_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserSourceConnection | ValidationError | GenericError

union sources_user_connections_all_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserSourceConnection | ValidationError | GenericError

union sources_user_connections_all_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_user_connections_oauth_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "UserOAuthSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserOAuthSourceConnection | ValidationError | GenericError

"""OAuth Source Serializer"""
input UserOAuthSourceConnectionRequest_Input {
  user: Int!
  identifier: mutationInput_sources_user_connections_oauth_create_input_identifier!
  access_token: String
}

scalar mutationInput_sources_user_connections_oauth_create_input_identifier @length(subgraph: "Authentik", min: 1, max: 255)

union sources_user_connections_oauth_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserOAuthSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserOAuthSourceConnection | ValidationError | GenericError

union sources_user_connections_oauth_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserOAuthSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserOAuthSourceConnection | ValidationError | GenericError

"""OAuth Source Serializer"""
input PatchedUserOAuthSourceConnectionRequest_Input {
  user: Int
  identifier: mutationInput_sources_user_connections_oauth_partial_update_input_identifier
  access_token: String
}

scalar mutationInput_sources_user_connections_oauth_partial_update_input_identifier @length(subgraph: "Authentik", min: 1, max: 255)

union sources_user_connections_oauth_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_user_connections_plex_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "PlexSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PlexSourceConnection | ValidationError | GenericError

"""Plex Source connection Serializer"""
input PlexSourceConnectionRequest_Input {
  identifier: NonEmptyString!
  plex_token: NonEmptyString!
}

union sources_user_connections_plex_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PlexSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PlexSourceConnection | ValidationError | GenericError

union sources_user_connections_plex_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PlexSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PlexSourceConnection | ValidationError | GenericError

"""Plex Source connection Serializer"""
input PatchedPlexSourceConnectionRequest_Input {
  identifier: NonEmptyString
  plex_token: NonEmptyString
}

union sources_user_connections_plex_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union sources_user_connections_saml_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "UserSAMLSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserSAMLSourceConnection | ValidationError | GenericError

"""SAML Source Serializer"""
input UserSAMLSourceConnectionRequest_Input {
  user: Int!
  identifier: NonEmptyString!
}

union sources_user_connections_saml_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserSAMLSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserSAMLSourceConnection | ValidationError | GenericError

union sources_user_connections_saml_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserSAMLSourceConnection") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserSAMLSourceConnection | ValidationError | GenericError

"""SAML Source Serializer"""
input PatchedUserSAMLSourceConnectionRequest_Input {
  user: Int
  identifier: NonEmptyString
}

union sources_user_connections_saml_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_all_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_authenticator_duo_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "AuthenticatorDuoStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorDuoStage | ValidationError | GenericError

"""AuthenticatorDuoStage Serializer"""
input AuthenticatorDuoStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  client_id: NonEmptyString!
  client_secret: NonEmptyString!
  api_hostname: NonEmptyString!
  admin_integration_key: String
  admin_secret_key: String
}

"""Stripped down flow serializer"""
input FlowSetRequest_Input {
  name: NonEmptyString!
  slug: mutationInput_stages_authenticator_duo_create_input_flow_set_items_slug!
  """Shown as the Title in Flow pages."""
  title: NonEmptyString!
  designation: FlowDesignationEnum!
  policy_engine_mode: PolicyEngineMode
  """
  Enable compatibility mode, increases compatibility with password managers on mobile devices.
  """
  compatibility_mode: Boolean
  layout: FlowLayoutEnum
  denied_action: DeniedActionEnum
}

scalar mutationInput_stages_authenticator_duo_create_input_flow_set_items_slug @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union stages_authenticator_duo_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorDuoStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorDuoStage | ValidationError | GenericError

union stages_authenticator_duo_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorDuoStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorDuoStage | ValidationError | GenericError

"""AuthenticatorDuoStage Serializer"""
input PatchedAuthenticatorDuoStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  client_id: NonEmptyString
  client_secret: NonEmptyString
  api_hostname: NonEmptyString
  admin_integration_key: String
  admin_secret_key: String
}

union stages_authenticator_duo_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_authenticator_duo_enrollment_status_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DuoDeviceEnrollmentStatus") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DuoDeviceEnrollmentStatus | ValidationError | GenericError

type DuoDeviceEnrollmentStatus {
  duo_response: DuoResponseEnum!
}

enum DuoResponseEnum {
  success
  waiting
  invalid
}

union stages_authenticator_duo_import_device_manual_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | GenericError

input AuthenticatorDuoStageManualDeviceImportRequest_Input {
  duo_user_id: NonEmptyString!
  username: NonEmptyString!
}

union stages_authenticator_duo_import_devices_automatic_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorDuoStageDeviceImportResponse") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorDuoStageDeviceImportResponse | GenericError

type AuthenticatorDuoStageDeviceImportResponse {
  count: Int!
  error: String!
}

union stages_authenticator_sms_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "AuthenticatorSMSStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorSMSStage | ValidationError | GenericError

"""AuthenticatorSMSStage Serializer"""
input AuthenticatorSMSStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  provider: ProviderEnum!
  from_number: NonEmptyString!
  account_sid: NonEmptyString!
  auth: NonEmptyString!
  auth_password: String
  auth_type: AuthTypeEnum
  """
  When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future.
  """
  verify_only: Boolean
  """Optionally modify the payload being sent to custom providers."""
  mapping: UUID
}

union stages_authenticator_sms_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorSMSStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorSMSStage | ValidationError | GenericError

union stages_authenticator_sms_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorSMSStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorSMSStage | ValidationError | GenericError

"""AuthenticatorSMSStage Serializer"""
input PatchedAuthenticatorSMSStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  provider: ProviderEnum
  from_number: NonEmptyString
  account_sid: NonEmptyString
  auth: NonEmptyString
  auth_password: String
  auth_type: AuthTypeEnum
  """
  When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future.
  """
  verify_only: Boolean
  """Optionally modify the payload being sent to custom providers."""
  mapping: UUID
}

union stages_authenticator_sms_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_authenticator_static_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "AuthenticatorStaticStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorStaticStage | ValidationError | GenericError

"""AuthenticatorStaticStage Serializer"""
input AuthenticatorStaticStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  token_count: NonNegativeInt
  token_length: NonNegativeInt
}

union stages_authenticator_static_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorStaticStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorStaticStage | ValidationError | GenericError

union stages_authenticator_static_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorStaticStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorStaticStage | ValidationError | GenericError

"""AuthenticatorStaticStage Serializer"""
input PatchedAuthenticatorStaticStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  token_count: NonNegativeInt
  token_length: NonNegativeInt
}

union stages_authenticator_static_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_authenticator_totp_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "AuthenticatorTOTPStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorTOTPStage | ValidationError | GenericError

"""AuthenticatorTOTPStage Serializer"""
input AuthenticatorTOTPStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  digits: DigitsEnum!
}

union stages_authenticator_totp_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorTOTPStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorTOTPStage | ValidationError | GenericError

union stages_authenticator_totp_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorTOTPStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorTOTPStage | ValidationError | GenericError

"""AuthenticatorTOTPStage Serializer"""
input PatchedAuthenticatorTOTPStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  digits: DigitsEnum
}

union stages_authenticator_totp_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_authenticator_validate_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "AuthenticatorValidateStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorValidateStage | ValidationError | GenericError

"""AuthenticatorValidateStage Serializer"""
input AuthenticatorValidateStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  not_configured_action: NotConfiguredActionEnum
  """Device classes which can be used to authenticate"""
  device_classes: [DeviceClassesEnum]
  """
  Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again.
  """
  configuration_stages: [UUID]
  """
  If any of the user's device has been used within this threshold, this stage will be skipped
  """
  last_auth_threshold: NonEmptyString
  webauthn_user_verification: UserVerificationEnum
  webauthn_allowed_device_types: [UUID]
}

union stages_authenticator_validate_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorValidateStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorValidateStage | ValidationError | GenericError

union stages_authenticator_validate_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorValidateStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorValidateStage | ValidationError | GenericError

"""AuthenticatorValidateStage Serializer"""
input PatchedAuthenticatorValidateStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  not_configured_action: NotConfiguredActionEnum
  """Device classes which can be used to authenticate"""
  device_classes: [DeviceClassesEnum]
  """
  Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again.
  """
  configuration_stages: [UUID]
  """
  If any of the user's device has been used within this threshold, this stage will be skipped
  """
  last_auth_threshold: NonEmptyString
  webauthn_user_verification: UserVerificationEnum
  webauthn_allowed_device_types: [UUID]
}

union stages_authenticator_validate_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_authenticator_webauthn_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "AuthenticatorWebAuthnStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorWebAuthnStage | ValidationError | GenericError

"""AuthenticatorWebAuthnStage Serializer"""
input AuthenticatorWebAuthnStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  user_verification: UserVerificationEnum
  authenticator_attachment: AuthenticatorAttachmentEnum
  resident_key_requirement: ResidentKeyRequirementEnum
  device_type_restrictions: [UUID]
}

union stages_authenticator_webauthn_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorWebAuthnStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorWebAuthnStage | ValidationError | GenericError

union stages_authenticator_webauthn_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "AuthenticatorWebAuthnStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = AuthenticatorWebAuthnStage | ValidationError | GenericError

"""AuthenticatorWebAuthnStage Serializer"""
input PatchedAuthenticatorWebAuthnStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  friendly_name: NonEmptyString
  user_verification: UserVerificationEnum
  authenticator_attachment: AuthenticatorAttachmentEnum
  resident_key_requirement: ResidentKeyRequirementEnum
  device_type_restrictions: [UUID]
}

union stages_authenticator_webauthn_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_captcha_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "CaptchaStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CaptchaStage | ValidationError | GenericError

"""CaptchaStage Serializer"""
input CaptchaStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """Public key, acquired your captcha Provider."""
  public_key: NonEmptyString!
  """Private key, acquired your captcha Provider."""
  private_key: NonEmptyString!
  js_url: NonEmptyString
  api_url: NonEmptyString
}

union stages_captcha_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CaptchaStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CaptchaStage | ValidationError | GenericError

union stages_captcha_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "CaptchaStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = CaptchaStage | ValidationError | GenericError

"""CaptchaStage Serializer"""
input PatchedCaptchaStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """Public key, acquired your captcha Provider."""
  public_key: NonEmptyString
  """Private key, acquired your captcha Provider."""
  private_key: NonEmptyString
  js_url: NonEmptyString
  api_url: NonEmptyString
}

union stages_captcha_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_consent_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "ConsentStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ConsentStage | ValidationError | GenericError

"""ConsentStage Serializer"""
input ConsentStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  mode: ConsentStageModeEnum
  """
  Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).
  """
  consent_expire_in: NonEmptyString
}

union stages_consent_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ConsentStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ConsentStage | ValidationError | GenericError

union stages_consent_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "ConsentStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = ConsentStage | ValidationError | GenericError

"""ConsentStage Serializer"""
input PatchedConsentStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  mode: ConsentStageModeEnum
  """
  Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).
  """
  consent_expire_in: NonEmptyString
}

union stages_consent_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_deny_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "DenyStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DenyStage | ValidationError | GenericError

"""DenyStage Serializer"""
input DenyStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  deny_message: String
}

union stages_deny_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DenyStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DenyStage | ValidationError | GenericError

union stages_deny_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DenyStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DenyStage | ValidationError | GenericError

"""DenyStage Serializer"""
input PatchedDenyStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  deny_message: String
}

union stages_deny_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_dummy_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "DummyStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DummyStage | ValidationError | GenericError

"""DummyStage Serializer"""
input DummyStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  throw_error: Boolean
}

union stages_dummy_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DummyStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DummyStage | ValidationError | GenericError

union stages_dummy_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "DummyStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = DummyStage | ValidationError | GenericError

"""DummyStage Serializer"""
input PatchedDummyStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  throw_error: Boolean
}

union stages_dummy_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_email_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "EmailStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = EmailStage | ValidationError | GenericError

"""EmailStage Serializer"""
input EmailStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """
  When enabled, global Email connection settings will be used and connection settings below will be ignored.
  """
  use_global_settings: Boolean
  host: NonEmptyString
  port: Int
  username: String
  password: String
  use_tls: Boolean
  use_ssl: Boolean
  timeout: Int
  from_address: EmailAddress
  """Time in minutes the token sent is valid."""
  token_expiry: Int
  subject: NonEmptyString
  template: NonEmptyString
  """Activate users upon completion of stage."""
  activate_user_on_success: Boolean
}

union stages_email_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "EmailStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = EmailStage | ValidationError | GenericError

union stages_email_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "EmailStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = EmailStage | ValidationError | GenericError

"""EmailStage Serializer"""
input PatchedEmailStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """
  When enabled, global Email connection settings will be used and connection settings below will be ignored.
  """
  use_global_settings: Boolean
  host: NonEmptyString
  port: Int
  username: String
  password: String
  use_tls: Boolean
  use_ssl: Boolean
  timeout: Int
  from_address: EmailAddress
  """Time in minutes the token sent is valid."""
  token_expiry: Int
  subject: NonEmptyString
  template: NonEmptyString
  """Activate users upon completion of stage."""
  activate_user_on_success: Boolean
}

union stages_email_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_identification_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "IdentificationStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = IdentificationStage | ValidationError | GenericError

"""IdentificationStage Serializer"""
input IdentificationStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """
  Fields of the user object to match against. (Hold shift to select multiple options)
  """
  user_fields: [UserFieldsEnum]
  """
  When set, shows a password field, instead of showing the password field as seaprate step.
  """
  password_stage: UUID
  """When enabled, user fields are matched regardless of their casing."""
  case_insensitive_matching: Boolean
  """
  When a valid username/email has been entered, and this option is enabled, the user's username and avatar will be shown. Otherwise, the text that the user entered will be shown
  """
  show_matched_user: Boolean
  """Optional enrollment flow, which is linked at the bottom of the page."""
  enrollment_flow: UUID
  """Optional recovery flow, which is linked at the bottom of the page."""
  recovery_flow: UUID
  """Optional passwordless flow, which is linked at the bottom of the page."""
  passwordless_flow: UUID
  """Specify which sources should be shown."""
  sources: [UUID]
  show_source_labels: Boolean
  """
  When enabled, the stage will succeed and continue even when incorrect user info is entered.
  """
  pretend_user_exists: Boolean
}

union stages_identification_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "IdentificationStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = IdentificationStage | ValidationError | GenericError

union stages_identification_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "IdentificationStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = IdentificationStage | ValidationError | GenericError

"""IdentificationStage Serializer"""
input PatchedIdentificationStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """
  Fields of the user object to match against. (Hold shift to select multiple options)
  """
  user_fields: [UserFieldsEnum]
  """
  When set, shows a password field, instead of showing the password field as seaprate step.
  """
  password_stage: UUID
  """When enabled, user fields are matched regardless of their casing."""
  case_insensitive_matching: Boolean
  """
  When a valid username/email has been entered, and this option is enabled, the user's username and avatar will be shown. Otherwise, the text that the user entered will be shown
  """
  show_matched_user: Boolean
  """Optional enrollment flow, which is linked at the bottom of the page."""
  enrollment_flow: UUID
  """Optional recovery flow, which is linked at the bottom of the page."""
  recovery_flow: UUID
  """Optional passwordless flow, which is linked at the bottom of the page."""
  passwordless_flow: UUID
  """Specify which sources should be shown."""
  sources: [UUID]
  show_source_labels: Boolean
  """
  When enabled, the stage will succeed and continue even when incorrect user info is entered.
  """
  pretend_user_exists: Boolean
}

union stages_identification_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_invitation_invitations_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Invitation") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Invitation | ValidationError | GenericError

"""Invitation Serializer"""
input InvitationRequest_Input {
  name: mutationInput_stages_invitation_invitations_create_input_name!
  expires: DateTime
  fixed_data: JSON
  """When enabled, the invitation will be deleted after usage."""
  single_use: Boolean
  """When set, only the configured flow can use this invitation."""
  flow: UUID
}

scalar mutationInput_stages_invitation_invitations_create_input_name @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union stages_invitation_invitations_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Invitation") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Invitation | ValidationError | GenericError

union stages_invitation_invitations_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Invitation") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Invitation | ValidationError | GenericError

"""Invitation Serializer"""
input PatchedInvitationRequest_Input {
  name: mutationInput_stages_invitation_invitations_partial_update_input_name
  expires: DateTime
  fixed_data: JSON
  """When enabled, the invitation will be deleted after usage."""
  single_use: Boolean
  """When set, only the configured flow can use this invitation."""
  flow: UUID
}

scalar mutationInput_stages_invitation_invitations_partial_update_input_name @regexp(subgraph: "Authentik", pattern: "^[-a-zA-Z0-9_]+$") @typescript(subgraph: "Authentik", type: "string")

union stages_invitation_invitations_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_invitation_stages_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "InvitationStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = InvitationStage | ValidationError | GenericError

"""InvitationStage Serializer"""
input InvitationStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """
  If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given.
  """
  continue_flow_without_invitation: Boolean
}

union stages_invitation_stages_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "InvitationStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = InvitationStage | ValidationError | GenericError

union stages_invitation_stages_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "InvitationStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = InvitationStage | ValidationError | GenericError

"""InvitationStage Serializer"""
input PatchedInvitationStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """
  If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given.
  """
  continue_flow_without_invitation: Boolean
}

union stages_invitation_stages_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_password_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "PasswordStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordStage | ValidationError | GenericError

"""PasswordStage Serializer"""
input PasswordStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """Selection of backends to test the password against."""
  backends: [BackendsEnum]!
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  """
  How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage.
  """
  failed_attempts_before_cancel: Int
}

union stages_password_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PasswordStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordStage | ValidationError | GenericError

union stages_password_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PasswordStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PasswordStage | ValidationError | GenericError

"""PasswordStage Serializer"""
input PatchedPasswordStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """Selection of backends to test the password against."""
  backends: [BackendsEnum]
  """
  Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
  """
  configure_flow: UUID
  """
  How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage.
  """
  failed_attempts_before_cancel: Int
}

union stages_password_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_prompt_prompts_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "Prompt") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Prompt | ValidationError | GenericError

"""Prompt Serializer"""
input PromptRequest_Input {
  name: NonEmptyString!
  """Name of the form field, also used to store the value"""
  field_key: NonEmptyString!
  label: NonEmptyString!
  type: PromptTypeEnum!
  required: Boolean
  """
  Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices.
  """
  placeholder: String
  """
  Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices.
  """
  initial_value: String
  order: Int
  promptstage_set: [StageRequest_Input]
  sub_text: String
  placeholder_expression: Boolean
  initial_value_expression: Boolean
}

"""Stage Serializer"""
input StageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
}

union stages_prompt_prompts_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Prompt") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Prompt | ValidationError | GenericError

union stages_prompt_prompts_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "Prompt") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Prompt | ValidationError | GenericError

"""Prompt Serializer"""
input PatchedPromptRequest_Input {
  name: NonEmptyString
  """Name of the form field, also used to store the value"""
  field_key: NonEmptyString
  label: NonEmptyString
  type: PromptTypeEnum
  required: Boolean
  """
  Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices.
  """
  placeholder: String
  """
  Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices.
  """
  initial_value: String
  order: Int
  promptstage_set: [StageRequest_Input]
  sub_text: String
  placeholder_expression: Boolean
  initial_value_expression: Boolean
}

union stages_prompt_prompts_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_prompt_prompts_preview_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PromptChallenge") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PromptChallenge | ValidationError | GenericError

union stages_prompt_stages_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "PromptStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PromptStage | ValidationError | GenericError

"""PromptStage Serializer"""
input PromptStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  fields: [UUID]!
  validation_policies: [UUID]
}

union stages_prompt_stages_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PromptStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PromptStage | ValidationError | GenericError

union stages_prompt_stages_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "PromptStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = PromptStage | ValidationError | GenericError

"""PromptStage Serializer"""
input PatchedPromptStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  fields: [UUID]
  validation_policies: [UUID]
}

union stages_prompt_stages_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_source_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "SourceStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SourceStage | ValidationError | GenericError

"""SourceStage Serializer"""
input SourceStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  source: UUID!
  """
  Amount of time a user can take to return from the source to continue the flow (Format: hours=-1;minutes=-2;seconds=-3)
  """
  resume_timeout: NonEmptyString
}

union stages_source_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SourceStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SourceStage | ValidationError | GenericError

union stages_source_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "SourceStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = SourceStage | ValidationError | GenericError

"""SourceStage Serializer"""
input PatchedSourceStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  source: UUID
  """
  Amount of time a user can take to return from the source to continue the flow (Format: hours=-1;minutes=-2;seconds=-3)
  """
  resume_timeout: NonEmptyString
}

union stages_source_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_user_delete_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "UserDeleteStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserDeleteStage | ValidationError | GenericError

"""UserDeleteStage Serializer"""
input UserDeleteStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
}

union stages_user_delete_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserDeleteStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserDeleteStage | ValidationError | GenericError

union stages_user_delete_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserDeleteStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserDeleteStage | ValidationError | GenericError

"""UserDeleteStage Serializer"""
input PatchedUserDeleteStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
}

union stages_user_delete_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_user_login_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "UserLoginStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserLoginStage | ValidationError | GenericError

"""UserLoginStage Serializer"""
input UserLoginStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  """
  Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
  """
  session_duration: NonEmptyString
  """Terminate all other sessions of the user logging in."""
  terminate_other_sessions: Boolean
  """
  Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)
  """
  remember_me_offset: NonEmptyString
  network_binding: NetworkBindingEnum
  geoip_binding: GeoipBindingEnum
}

union stages_user_login_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserLoginStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserLoginStage | ValidationError | GenericError

union stages_user_login_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserLoginStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserLoginStage | ValidationError | GenericError

"""UserLoginStage Serializer"""
input PatchedUserLoginStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  """
  Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
  """
  session_duration: NonEmptyString
  """Terminate all other sessions of the user logging in."""
  terminate_other_sessions: Boolean
  """
  Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)
  """
  remember_me_offset: NonEmptyString
  network_binding: NetworkBindingEnum
  geoip_binding: GeoipBindingEnum
}

union stages_user_login_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_user_logout_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "UserLogoutStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserLogoutStage | ValidationError | GenericError

"""UserLogoutStage Serializer"""
input UserLogoutStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
}

union stages_user_logout_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserLogoutStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserLogoutStage | ValidationError | GenericError

union stages_user_logout_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserLogoutStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserLogoutStage | ValidationError | GenericError

"""UserLogoutStage Serializer"""
input PatchedUserLogoutStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
}

union stages_user_logout_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

union stages_user_write_create_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 201, typeName: "UserWriteStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserWriteStage | ValidationError | GenericError

"""UserWriteStage Serializer"""
input UserWriteStageRequest_Input {
  name: NonEmptyString!
  flow_set: [FlowSetRequest_Input]
  user_creation_mode: UserCreationModeEnum
  """When set, newly created users are inactive and cannot login."""
  create_users_as_inactive: Boolean
  """Optionally add newly created users to this group."""
  create_users_group: UUID
  user_type: UserTypeEnum
  user_path_template: String
}

union stages_user_write_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserWriteStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserWriteStage | ValidationError | GenericError

union stages_user_write_partial_update_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 200, typeName: "UserWriteStage") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = UserWriteStage | ValidationError | GenericError

"""UserWriteStage Serializer"""
input PatchedUserWriteStageRequest_Input {
  name: NonEmptyString
  flow_set: [FlowSetRequest_Input]
  user_creation_mode: UserCreationModeEnum
  """When set, newly created users are inactive and cannot login."""
  create_users_as_inactive: Boolean
  """Optionally add newly created users to this group."""
  create_users_group: UUID
  user_type: UserTypeEnum
  user_path_template: String
}

union stages_user_write_destroy_response @statusCodeTypeName(subgraph: "Authentik", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "Authentik", statusCode: 400, typeName: "ValidationError") @statusCodeTypeName(subgraph: "Authentik", statusCode: 403, typeName: "GenericError") = Void_container | ValidationError | GenericError

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}