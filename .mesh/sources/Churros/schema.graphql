schema {
  query: Query
  subscription: Subscription
}

"""
Announcement is a way to get a message accross the entire site, such as for maintenance announcements.
"""
type ChurrosAnnouncement implements ChurrosNode {
  body: String!
  bodyHtml: String!
  by: ChurrosUser
  createdAt: DateTime!
  endsAt: DateTime!
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  startsAt: DateTime!
  title: String!
  updatedAt: DateTime!
  userId: ID
  warning: Boolean!
}

"""
Une réponse à un formulaire. Les réponses peuvent être de plusieurs types différents (en fonction de la question).
"""
interface ChurrosAnswer {
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  question: ChurrosQuestion!
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
}

"""Réponse de type `Date` (voir [`QuestionKind`](#QuestionKind))"""
type ChurrosAnswerDate implements ChurrosAnswer {
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  """Question à laquelle la réponse est associée"""
  question: ChurrosQuestionScalar!
  """Réponse donnée, brute (sous forme de texte)"""
  rawValue: String
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
  """Réponse donnée"""
  value: DateTime
}

"""Réponse de type `FileUpload` (voir [`QuestionKind`](#QuestionKind))"""
type ChurrosAnswerFileUpload implements ChurrosAnswer {
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  """Question à laquelle la réponse est associée"""
  question: ChurrosQuestionFileUpload!
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
  """Réponse donnée"""
  value: String
}

input ChurrosAnswerInput {
  """
  
  Réponse à la question. Pour les questions à une seule réponse, ne mettre qu'un seul élément.
      
  - Pour les questions de type `Date`, utiliser le format `YYYY-mm-dd`
  - Pour les questions de type `Time`, utiliser le format `HH:MM:ss`
  - Pour les questions de type `Scale`, utiliser simplement le nombre répondu par l'utilisateur·ice
  - Pour les questions de type `FileUpload`, utiliser la mutation [`answerFileQuestion`](#mutation/answerFileQuestion)
        
  """
  answer: [String!]!
  """ID de la question à laquelle répondre"""
  question: ID!
}

"""Réponse de type `LongText` (voir [`QuestionKind`](#QuestionKind))"""
type ChurrosAnswerLongText implements ChurrosAnswer {
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  """Question à laquelle la réponse est associée"""
  question: ChurrosQuestionScalar!
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
  """Réponse donnée"""
  value: String
}

"""Réponse de type `Number` (voir [`QuestionKind`](#QuestionKind))"""
type ChurrosAnswerNumber implements ChurrosAnswer {
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  """Question à laquelle la réponse est associée"""
  question: ChurrosQuestionScalar!
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
  """Réponse donnée"""
  value: Float
}

"""Réponse de type `Scale` (voir [`QuestionKind`](#QuestionKind))"""
type ChurrosAnswerScale implements ChurrosAnswer {
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  """Réponse donnée, entre 0 et 1"""
  normalizedValue: Float
  """Question à laquelle la réponse est associée"""
  question: ChurrosQuestionScale!
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
  """Réponse donnée"""
  value: Int
}

type ChurrosAnswerSearchResult {
  answer: ChurrosAnswer!
  id: ID!
  rank: Float
  similarity: Float!
}

"""
Réponse de type `SelectMultiple` (voir [`QuestionKind`](#QuestionKind))
"""
type ChurrosAnswerSelectMultiple implements ChurrosAnswer {
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  """Question à laquelle la réponse est associée"""
  question: ChurrosQuestionSelectMultiple!
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
  """Réponse donnée"""
  value: [String!]
}

"""Réponse de type `SelectOne` (voir [`QuestionKind`](#QuestionKind))"""
type ChurrosAnswerSelectOne implements ChurrosAnswer {
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  """Question à laquelle la réponse est associée"""
  question: ChurrosQuestionSelectOne!
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
  """Réponse donnée"""
  value: String
}

"""Réponse de type `Text` (voir [`QuestionKind`](#QuestionKind))"""
type ChurrosAnswerText implements ChurrosAnswer {
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  """Question à laquelle la réponse est associée"""
  question: ChurrosQuestionScalar!
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
  """Réponse donnée"""
  value: String
}

"""Réponse de type `Time` (voir [`QuestionKind`](#QuestionKind))"""
type ChurrosAnswerTime implements ChurrosAnswer {
  answer: ChurrosAnswer!
  answerString: String!
  """Réservation associée à la réponse"""
  booking: ChurrosRegistration
  checkboxIsMarked: Boolean
  """Date de création de la réponse"""
  createdAt: DateTime!
  """Utilisateur ayant répondu à la question"""
  createdBy: ChurrosUser
  """Formulaire auquel appartient la question"""
  form: ChurrosForm!
  """Préfixe de l'identifiant: `answer:`"""
  id: ID!
  """Question à laquelle la réponse est associée"""
  question: ChurrosQuestionScalar!
  """Réponse donnée, brute (sous forme de texte)"""
  rawValue: String
  """Section du formulaire auquel appartient la question"""
  section: ChurrosFormSection!
  """Date de dernière mise à jour de la réponse"""
  updatedAt: DateTime!
  """Réponse donnée"""
  value: DateTime
}

"""Formats d'export des réponses"""
enum ChurrosAnswersExportFormats {
  """
  Format CSV (séparateur de colonnes: virgule, séparateur de lignes: saut de ligne)
  """
  CSV
  """
  Format TSV (séparateur de colonnes: tabulation, séparateur de lignes: saut de ligne)
  """
  TSV
}

"""
Représente toutes les réponses d'un·e utilisateur·ice à un formulaire. Pratique pour grouper les réponses afin de les afficher dans un tableau
"""
type ChurrosAnswersOfUser {
  answers: [ChurrosAnswer!]!
  """Correspond à la date de dernière réponse parmis les réponses"""
  date: DateTime!
  user: ChurrosUser!
}

"""
Des données temporelles pour construire des graphiques d'atteintes de rate limiting. La résolution temporelle est d'une minute.
"""
type ChurrosApiRateLimitHits {
  """Le nombre d'erreurs de rate-limiting à cette date"""
  count: Int!
  """La date à laquelle les requêtes ont été faites"""
  date: DateTime!
  """Le nom de la query ou mutation ou subscription"""
  queryName: String!
  """Le type de requête effectuée"""
  queryType: String!
  timestamp: Int!
  user: ChurrosUser
}

"""
Des données temporelles pour construire des graphiques d'utilisation de l'API au cours du temps. La résolution temporelle est d'une minute.
"""
type ChurrosApiUsage {
  """Le nombre de requêtes faites à cette date"""
  count: Int!
  """La date à laquelle les requêtes ont été faites"""
  date: DateTime!
  """Le nom de la query ou mutation ou subscription"""
  queryName: String!
  """Le type de requête effectuée"""
  queryType: ChurrosApiUsageQueryType!
  timestamp: Int!
  user: ChurrosUser
}

"""Type de requête effectuée sur l'API"""
enum ChurrosApiUsageQueryType {
  """Modification de données, ou autre action diverses"""
  Mutation
  """Récupération de données"""
  Query
  """
  Abonnement à des données pour être informé en temps réel des changements
  """
  Subscription
}

"""An article is a post in a group"""
type ChurrosArticle implements ChurrosCommentable & ChurrosNode & ChurrosPictured & ChurrosReactable {
  author: ChurrosUser
  authorId: ID
  body: String!
  bodyHtml: String!
  bodyPreview: String!
  """
  Vrai si l'utilisateur·ice connecté·e peut éditer le post (en considérant qu'iel ne va pas changer l'auteur·ice ou le groupe du post)
  """
  canBeEdited: Boolean!
  comments(after: String, before: String, first: Int, last: Int): ChurrosCommentsConnection!
  createdAt: DateTime!
  event: ChurrosEvent
  eventId: ID
  group: ChurrosGroup!
  groupId: ID!
  id: ID!
  links: [ChurrosLink!]!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  myReactions: ChurrosBooleanMap!
  notifiedAt: DateTime
  pictureFile: String!
  """Le nom du fichier de l'image, en thème sombre"""
  pictureFileDark: String!
  """L'URL publique de l'image"""
  pictureURL(
    """Utiliser l'image en thème sombre"""
    dark: Boolean! = false
  ): String!
  published: Boolean!
  publishedAt: DateTime!
  reacted(emoji: String!): Boolean!
  reactionCounts: ChurrosCounts!
  reactions(emoji: String!): Int!
  """Un nom lisible sans espaces, adaptés pour des URLs."""
  slug: String!
  title: String!
  uid: String! @deprecated(reason: "Use `slug` instead. This field was never universally unique.")
  visibility: ChurrosVisibility!
}

type ChurrosArticleSearchResultType {
  article: ChurrosArticle!
  highlightedTitle: String!
  id: ID!
  rank: Float
  similarity: Float!
}

type ChurrosAwaitingValidationError {
  message: String!
}

"""A bar week is a week during which some groups takeover the bar staff"""
type ChurrosBarWeek implements ChurrosNode {
  description: String!
  descriptionHtml: String!
  endsAt: DateTime!
  groups: [ChurrosGroup!]!
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  """Un nom lisible sans espaces, adaptés pour des URLs."""
  slug: String!
  startsAt: DateTime!
  uid: String! @deprecated(reason: "Use `slug` instead. This field was never universally unique.")
}

scalar ChurrosBooleanMap

type ChurrosBuildInfo {
  """Le hash du commit utilisé pour build l'API"""
  commit: String!
  """La version actuelle de l'API (et de l'application)"""
  version: String!
}

"""A release in the changelog"""
type ChurrosChangelogRelease {
  """The changes of the release, grouped by category"""
  changes: ChurrosReleaseChangesMaps!
  """The date of the release"""
  date: DateTime
  """A short description of the release"""
  description: String!
  """A short description of the release, in HTML. Safe from XSS."""
  descriptionHtml: String!
  """The version of the release"""
  version: String!
}

type ChurrosComment implements ChurrosNode & ChurrosReactable {
  author: ChurrosUser
  authorId: ID
  body: String!
  bodyHtml: String!
  createdAt: DateTime!
  document: ChurrosDocument
  documentId: ID
  id: ID!
  inReplyTo: ChurrosComment
  inReplyToId: ID
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  reacted(emoji: String!): Boolean!
  reactions(emoji: String!): Int!
  replies: [ChurrosComment!]!
  updatedAt: DateTime!
}

"""Une resource pouvant être commentée par les utilisateur·ice·s"""
interface ChurrosCommentable {
  comments(after: String, before: String, first: Int, last: Int): ChurrosCommentsConnection!
  """L’identifiant de la resource commentée"""
  id: ID!
}

type ChurrosCommentsConnection {
  edges: [ChurrosCommentsEdge!]!
  nodes: [ChurrosComment!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosCommentsEdge {
  cursor: String!
  node: ChurrosComment!
}

union ChurrosCompleteSignupResult = ChurrosUser | ChurrosUserCandidate

type ChurrosContributionOption {
  descriptionHtml: String!
  id: ID!
  name: String!
  offeredIn: ChurrosSchool!
  paysFor: [ChurrosStudentAssociation!]!
  price: Float!
}

scalar ChurrosCounts

"""A credential is a way to authenticate a user"""
type ChurrosCredential {
  active: Boolean!
  createdAt: DateTime!
  expiresAt: DateTime
  id: ID!
  name: String!
  token: String!
  type: ChurrosCredentialType!
  user: ChurrosUser!
  userAgent: String!
}

enum ChurrosCredentialType {
  Google
  Password
  Token
}

type ChurrosDatabaseHealthCheck {
  prisma: Boolean!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type ChurrosDocument implements ChurrosCommentable & ChurrosNode & ChurrosReactable {
  comments(after: String, before: String, first: Int, last: Int): ChurrosCommentsConnection!
  createdAt: DateTime!
  description: String!
  descriptionHtml: String!
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  """
  Liste de chemins vers les fichiers représentant le sujet (ou la fiche de révision)
  """
  paperPaths: [String!]!
  reacted(emoji: String!): Boolean!
  reactions(emoji: String!): Int!
  schoolYear: Int!
  """Un nom lisible sans espaces, adaptés pour des URLs."""
  slug: String!
  """Liste de chemins vers les fichiers représentant la correction."""
  solutionPaths: [String!]!
  subject: ChurrosSubject
  subjectId: ID
  title: String!
  type: ChurrosDocumentType!
  uid: String! @deprecated(reason: "Use `slug` instead. This field was never universally unique.")
  updatedAt: DateTime!
  uploader: ChurrosUser
  uploaderId: ID
}

type ChurrosDocumentSearchResult {
  document: ChurrosDocument!
  id: ID!
  rank: Int
  similarity: Float!
}

enum ChurrosDocumentType {
  CourseNotes
  CourseSlides
  Exam
  Exercises
  GradedExercises
  Miscellaneous
  Practical
  PracticalExam
  Summary
}

"""A email validation request"""
type ChurrosEmailChange {
  createdAt: DateTime!
  email: String!
  id: ID!
  pending: Boolean!
  updatedAt: DateTime!
  user: ChurrosUser!
  userId: ID!
}

"""
The most basic error object, based on the base JavaScript Error object.
"""
type ChurrosError implements ChurrosErrorInterface {
  message: String!
}

"""Basic interface for all error types to implement."""
interface ChurrosErrorInterface {
  message: String!
}

type ChurrosEvenSearchResult {
  event: ChurrosEvent!
  highlightedTitle: String!
  id: ID!
  rank: Float
  similarity: Float!
}

"""An event is a date, time and place, as well as an optional ticket"""
type ChurrosEvent implements ChurrosNode & ChurrosPictured & ChurrosReactable {
  articles: [ChurrosArticle!]!
  author: ChurrosUser
  authorId: ID
  bannedUsers: [ChurrosUser!]!
  beneficiary: ChurrosLydiaAccount
  bookings(after: String, before: String, first: Int, last: Int): ChurrosEventBookingsConnection!
  bookingsCounts: ChurrosRegistrationsCounts!
  """
  Renvoie un texte au format CSV contenant un export des réservations de l'évènement.
  """
  bookingsCsv: ChurrosEventBookingsCsvResult!
  """L'utilisateur·ice connecté·e peut modifier cet évènement"""
  canEdit: Boolean!
  """
  L'utilisateur·ice connecté·e peut ajouter, enlever ou modifier les droits des managers de cet évènement
  """
  canEditManagers: Boolean!
  """
  L'utilisateur·ice connecté·e peut scanner les réservations de cet évènement
  """
  canScanBookings: Boolean!
  """
  L'utilisateur·ice connecté·e peut voir les réservations de cet évènement
  """
  canSeeBookings: Boolean!
  """L'utilsateur·ice connecté·e peut voir les logs de cet évènement"""
  canSeeLogs: Boolean!
  capacity: Int!
  coOrganizers: [ChurrosGroup!]!
  contactMail: String!
  description: String!
  descriptionHtml: String!
  descriptionPreview: String!
  endsAt: DateTime!
  """Formulaires associés à l'événement"""
  forms: [ChurrosForm!]!
  frequency: ChurrosEventFrequency!
  group: ChurrosGroup!
  groupId: ID!
  id: ID!
  """Vrai si l'évènement doit apparaître dans le mode kiosque"""
  includeInKiosk: Boolean!
  links: [ChurrosLink!]!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  location: String!
  """
  Logs concernant cet évènement. Ne contient pas les logs concernant les réservations.
  """
  logs(after: String, before: String, first: Int, last: Int): ChurrosEventLogsConnection!
  lydiaAccountId: ID
  managers: [ChurrosEventManager!]!
  """Réservations faites par et/ou pour l'utilisateur.ice connecté.e"""
  myBookings: ChurrosEventMyBookingsResult!
  myReactions: ChurrosBooleanMap!
  mySoonestShotgunOpensAt: DateTime
  pictureFile: String!
  """Le nom du fichier de l'image, en thème sombre"""
  pictureFileDark: String!
  """L'URL publique de l'image"""
  pictureURL(
    """Utiliser l'image en thème sombre"""
    dark: Boolean! = false
  ): String!
  placesLeft: Int
  profitsBreakdown: ChurrosProfitsBreakdown!
  reacted(emoji: String!): Boolean!
  reactionCounts: ChurrosCounts!
  reactions(emoji: String!): Int!
  recurringUntil: DateTime
  searchBookings(q: String!): [ChurrosRegistrationSearchResult!]!
  """Vrai si le nombre de places restantes doit être affiché"""
  showPlacesLeft: Boolean!
  """Un nom lisible sans espaces, adaptés pour des URLs."""
  slug: String!
  startsAt: DateTime!
  ticket(slug: String!): ChurrosTicket
  ticketGroups: [ChurrosTicketGroup!]!
  tickets: [ChurrosTicket!]!
  title: String!
  uid: String! @deprecated(reason: "Use `slug` instead. This field was never universally unique.")
  visibility: ChurrosVisibility!
}

type ChurrosEventBookingsConnection {
  edges: [ChurrosEventBookingsConnectionEdge!]!
  nodes: [ChurrosRegistration!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosEventBookingsConnectionEdge {
  cursor: String!
  node: ChurrosRegistration!
}

union ChurrosEventBookingsCsvResult = ChurrosError | ChurrosEventBookingsCsvSuccess

type ChurrosEventBookingsCsvSuccess {
  data: String!
}

enum ChurrosEventFrequency {
  Biweekly
  Monthly
  Once
  Weekly
}

type ChurrosEventLogsConnection {
  edges: [ChurrosEventLogsConnectionEdge!]!
  nodes: [ChurrosLogEntry!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosEventLogsConnectionEdge {
  cursor: String!
  node: ChurrosLogEntry!
}

"""
An event manager is a user that can scan tickets, and may be able to manage the event
"""
type ChurrosEventManager {
  canEdit: Boolean!
  canEditPermissions: Boolean!
  canVerifyRegistrations: Boolean!
  event: ChurrosEvent!
  power: ChurrosEventManagerPowerLevel!
  user: ChurrosUser!
}

enum ChurrosEventManagerPowerLevel {
  Edit
  EditPermissions
  ReadOnly
  ScanTickets
}

union ChurrosEventMyBookingsResult = ChurrosError | ChurrosEventMyBookingsSuccess

type ChurrosEventMyBookingsSuccess {
  data: [ChurrosRegistration!]!
}

type ChurrosEventsByDay {
  date: DateTime!
  """Évènements qui ont lieu (commencent) à ce jour"""
  happening: [ChurrosEvent!]!
  """Évènements qui ont leur premier shotgun à ce jour"""
  shotgunning: [ChurrosEvent!]!
}

type ChurrosFamilyTree {
  nesting: String!
  users: [ChurrosUser!]!
}

scalar ChurrosFile

"""Un formulaire"""
type ChurrosForm implements ChurrosNode {
  """Nombre de réponses au formulaire"""
  answerCount: Int!
  """Réponses au formulaire"""
  answers(after: String, before: String, first: Int, last: Int): ChurrosFormAnswersConnection!
  """
  Réponses au formulaire, groupées par utilisateur·ice. Ne contient pas de réponses dont l'utilisateur·ice est inconnu·e.
  """
  answersByUser(
    after: String
    before: String
    first: Int
    last: Int
    """Recherche par utilisateur·ice"""
    q: String
  ): ChurrosFormAnswersByUserConnection!
  """Export des réponses au formulaires dans un format"""
  answersExport(
    """Format à utiliser"""
    format: ChurrosAnswersExportFormats! = CSV
  ): String!
  """Indique si l'utilisateur peut répondre au formulaire."""
  canAnswer: Boolean!
  """Indique si l'utilisateur peut éditer le formulaire."""
  canEdit: Boolean!
  """Indique si l'utilisateur·ice peut modifier ses réponses au formulaire."""
  canModifyAnswers: Boolean!
  """
  Indique si l'utilisateur peut voir les statistiques des réponses au formulaire.
  """
  canSeeAnswerStats: Boolean!
  """Indique si l'utilisateur peut voir les réponses au formulaire."""
  canSeeAnswers: Boolean!
  """
  Indique si l'utilisateur peut cocher ou décocher les cases à cocher à côté des réponses au formulaire.
  """
  canSetCheckboxes: Boolean!
  checkboxesAreEnabled: Boolean!
  """Date de fermeture du formulaire."""
  closesAt: DateTime
  """Date de création du formulaire"""
  createdAt: DateTime!
  """Utilisateur ayant créé le formulaire"""
  createdBy: ChurrosUser
  """Description en Markdown du formulaire."""
  description: String
  """Description en HTML du formulaire."""
  descriptionHtml: String!
  """Événement associé au formulaire"""
  event: ChurrosEvent
  """Groupe auquel le formulaire est associé"""
  group: ChurrosGroup
  """Vrai si le formulaire comporte des sections"""
  hasSections: Boolean!
  """Préfixe de l'identifiant: `form:`"""
  id: ID!
  """
  L'URL du Google Sheet des réponses lié à ce formulaire. Voir `createLinkedGoogleSheet` pour créer un Google Sheet lié au formulaire.
  """
  linkedGoogleSheetUrl: String
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  """Identifiant local du formulaire"""
  localId: String!
  """Réponses de l'utilisateur·ice connecté·e à ce formulaire"""
  myAnswers: [ChurrosAnswer!]!
  """Date d'ouverture du formulaire."""
  opensAt: DateTime
  """
  Questions du formulaire. Liste de toutes les questions, peut importe la section dans laquelle elles se trouvent.
  """
  questions(after: String, before: String, first: Int, last: Int): ChurrosFormQuestionsConnection!
  searchAnswers(
    """La recherche"""
    q: String!
    similarityCutoff: Float
  ): [ChurrosAnswerSearchResult!]!
  """Une section du formulaire."""
  section(
    """Identifiant (local ou global) de la section"""
    id: String
  ): ChurrosFormSection!
  """
  Sections du formulaire. Un formulaire contient toujours au moins une section (sauf s'il n'y a aucune question). Uniquement accessible par celleux qui peuvent modifier le formulaire. Utiliser `nextSection` pour afficher une section dans le but d'y répondre.
  """
  sections: [ChurrosFormSection!]!
  title: String!
  """Date de dernière mise à jour du formulaire"""
  updatedAt: DateTime!
  """Visibilité du formulaire"""
  visibility: ChurrosVisibility!
}

type ChurrosFormAnswersByUserConnection {
  edges: [ChurrosFormAnswersByUserConnectionEdge!]!
  nodes: [ChurrosAnswersOfUser!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosFormAnswersByUserConnectionEdge {
  cursor: String!
  node: ChurrosAnswersOfUser!
}

type ChurrosFormAnswersConnection {
  edges: [ChurrosFormAnswersConnectionEdge!]!
  nodes: [ChurrosAnswer!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosFormAnswersConnectionEdge {
  cursor: String!
  node: ChurrosAnswer!
}

type ChurrosFormQuestionsConnection {
  edges: [ChurrosFormQuestionsConnectionEdge!]!
  nodes: [ChurrosQuestion!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosFormQuestionsConnectionEdge {
  cursor: String!
  node: ChurrosQuestion!
}

type ChurrosFormSearchResult {
  form: ChurrosForm!
  highlightedDescription: String!
  id: ID!
  rank: Float
  similarity: Float!
}

"""
Une section d'un formulaire. Les sections sont utiles pour séparer les questions en plusieurs parties, dont certaines peuvent être affichées selon des réponses à des questions précédentes
"""
type ChurrosFormSection {
  """Réponses à cette section"""
  answers(after: String, before: String, first: Int, last: Int): ChurrosFormSectionAnswersConnection!
  """Description en Markdown de la section"""
  description: String!
  """Description en HTML de la section"""
  descriptionHtml: String!
  """Formulaire auquel appartient la section"""
  form: ChurrosForm!
  id: ID!
  """Identifiant local de la section du formulaire"""
  localId: String!
  """
  Section suivante dans le formulaire, si il y en a une. (Sinon, c'est que c'est la dernière section). Dépend du fait que des sections soit cachées à l'utilisateur (voir `restrictedToGroups`), ou que une répond à une question provoque le passaage à une autre section (voir `goToSection`) 
  """
  nextSection: ChurrosFormSection
  """Ordre de la section dans le formulaire"""
  order: Int!
  """Questions dans section"""
  questions: [ChurrosQuestion!]!
  """
  Si non vide, seul·e·s les membres des groupes spécifiés peuvent accéder à cette section. 
  """
  restrictedToGroups: [ChurrosGroup!]!
  """Titre de la section"""
  title: String!
}

type ChurrosFormSectionAnswersConnection {
  edges: [ChurrosFormSectionAnswersConnectionEdge!]!
  nodes: [ChurrosAnswer!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosFormSectionAnswersConnectionEdge {
  cursor: String!
  node: ChurrosAnswer!
}

"""
Requests to become someone's godchild. Gets deleted once the request has been accepted (or denied). godchild is the requester, godparent is the requested.
"""
type ChurrosGodparentRequest {
  createdAt: DateTime!
  godchild: ChurrosUser!
  godparent: ChurrosUser!
  id: ID!
  updatedAt: DateTime!
}

"""A group is a collection of users"""
type ChurrosGroup implements ChurrosNode & ChurrosPictured {
  address: String!
  """All the ancestors of this group, from the current group to the root."""
  ancestors: [ChurrosGroup!]!
  articles: [ChurrosArticle!]!
  boardMembers: [ChurrosGroupMember!]!
  """
  Vrai si l'utilisateur·ice connecté·e peut modifier les informations du groupe
  """
  canEditDetails: Boolean!
  """
  L'utilisateur·ice connecté·e peut éditer (créer ou modifier) les pages du groupe
  """
  canEditPages: Boolean!
  """L'utilisateur·ice connecté·e peut lister les pages du groupe"""
  canListPages: Boolean!
  children: [ChurrosGroup!]!
  coOrganizedEvents: [ChurrosEvent!]!
  color: String!
  description: String!
  email: String!
  events(after: String, before: String, first: Int, last: Int): ChurrosGroupEventsConnection!
  familyChildren: [ChurrosGroup!]!
  """
  Helper field to get a whole tree without processing all groups\nTo be set to the group's id itself for root groups.
  """
  familyId: ID
  """Formulaires associés au groupe"""
  forms: [ChurrosForm!]!
  groupId: ID!
  id: ID!
  ldapUid: String!
  links: [ChurrosLink!]!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  longDescription: String!
  longDescriptionHtml: String!
  """Comptes Lydia du groupe"""
  lydiaAccounts: [ChurrosLydiaAccount!]!
  mailingList: String!
  members: [ChurrosGroupMember!]!
  name: String!
  ownEvents: [ChurrosEvent!]!
  """La page associée au groupe"""
  page(
    """
    Le chemin de la page. Ce n'est pas le chemin complet, mais celui qui est local au groupe. Voir `Page` pour plus d'informations.
    """
    path: String!
  ): ChurrosPage
  """Les pages associées au groupe"""
  pages(after: String, before: String, first: Int, last: Int): ChurrosPagesConnection!
  """Parent group, from which this group inherits its permissions"""
  parent: ChurrosGroup
  parentId: ID
  pictureFile: String!
  pictureFileDark: String!
  """L'URL publique de l'image"""
  pictureURL(
    """Utiliser l'image en thème sombre"""
    dark: Boolean! = false
  ): String!
  president: ChurrosGroupMember
  """Related clubs"""
  related: [ChurrosGroup!]!
  roomIsOpen: Boolean!
  """Family root, only created for performance reasons"""
  root: ChurrosGroup
  secretaries: [ChurrosGroupMember!]!
  selfJoinable: Boolean!
  services: [ChurrosService!]!
  """Article de la boutique du groupe"""
  shopItem(id: ChurrosLocalID!): ChurrosShopItem
  shopItems(after: String, before: String, first: Int, last: Int): ChurrosGroupShopItemsConnection!
  shopOrders: [ChurrosShopPayment!]!
  studentAssociation: ChurrosStudentAssociation
  treasurers: [ChurrosGroupMember!]!
  type: ChurrosGroupType!
  uid: String!
  vicePresidents: [ChurrosGroupMember!]!
  website: String!
}

type ChurrosGroupEventsConnection {
  edges: [ChurrosGroupEventsConnectionEdge!]!
  nodes: [ChurrosEvent!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosGroupEventsConnectionEdge {
  cursor: String!
  node: ChurrosEvent!
}

"""The intermediate model between users and groups"""
type ChurrosGroupMember {
  canEditArticles: Boolean!
  canEditMembers: Boolean!
  canScanEvents: Boolean!
  createdAt: DateTime!
  group: ChurrosGroup!
  groupId: ID!
  isDeveloper: Boolean!
  member: ChurrosUser!
  memberId: ID!
  president: Boolean!
  secretary: Boolean!
  title: String!
  treasurer: Boolean!
  vicePresident: Boolean!
}

type ChurrosGroupSearchResult {
  group: ChurrosGroup!
  highlightedDescription: String!
  id: ID!
  rank: Float
  similarity: Float!
}

type ChurrosGroupShopItemsConnection {
  edges: [ChurrosGroupShopItemsConnectionEdge!]!
  nodes: [ChurrosShopItem!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosGroupShopItemsConnectionEdge {
  cursor: String!
  node: ChurrosShopItem!
}

enum ChurrosGroupType {
  Association
  Club
  Group
  Integration
  List
  StudentAssociationSection
}

"""Results of a health self-check"""
type ChurrosHealthCheck {
  database: ChurrosDatabaseHealthCheck!
  ldap: ChurrosLdapHealthCheck!
  mail: ChurrosMailHealthCheck!
  redis: ChurrosRedisHealthCheck!
}

"""A Gitlab issue"""
type ChurrosIssue {
  body: String!
  bodyHtml: String!
  comments: [ChurrosIssueComment!]!
  deployedIn: String!
  """Expressed from 0 to 1"""
  difficulty: Float
  duplicatedFrom: Int
  """Expressed from 0 to 1"""
  importance: Float
  number: Int!
  state: ChurrosIssueState!
  """The date at which the issue was submitted"""
  submittedAt: DateTime!
  title: String!
  url: String!
}

"""A Gitlab issue comment"""
type ChurrosIssueComment {
  """The date at which the comment was added"""
  addedAt: DateTime!
  authorAvatarUrl: String!
  authorGitlabUrl: String!
  authorName: String!
  body: String!
  bodyHtml: String!
}

enum ChurrosIssueState {
  Closed
  Deployed
  Open
}

type ChurrosLdapHealthCheck {
  """Whether the LDAP internal client is ready"""
  internal: Boolean!
  """Whether the LDAP school client is ready"""
  school: Boolean!
}

"""A single external link"""
type ChurrosLink implements ChurrosNode {
  computedValue: String!
  createdAt: DateTime!
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  name: String!
  value: String!
}

input ChurrosLinkInput {
  name: String!
  value: String!
}

"""
Un identifiant, dont le préfixe (par exemple, `a:` dans `a:627dgfd87ccc`) est optionnel.
"""
scalar ChurrosLocalID

"""A log entry is a log of an action that happened on the website"""
type ChurrosLogEntry implements ChurrosNode {
  action: String!
  area: String!
  happenedAt: DateTime!
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  message: String!
  target: String
  user: ChurrosUser
}

enum ChurrosLogoSourceType {
  ExternalLink
  GroupLogo
  Icon
  InternalLink
}

"""A Lydia account"""
type ChurrosLydiaAccount {
  events: [ChurrosEvent!]!
  group: ChurrosGroup
  groupId: ID
  id: ID!
  name: String!
  studentAssociation: ChurrosStudentAssociation
  studentAssociationId: ID
}

type ChurrosMailHealthCheck {
  """Whether the SMTP client is ready"""
  smtp: Boolean!
}

"""A school syllabus"""
type ChurrosMajor {
  id: ID!
  ldapSchool: ChurrosSchool
  minors: [ChurrosMinor!]!
  name: String!
  schools: [ChurrosSchool!]!
  shortName: String!
  subjects(forApprentices: Boolean, yearTier: Int): [ChurrosSubject!]!
  uid: String!
}

input ChurrosManagerOfEventInput {
  canEdit: Boolean!
  canEditPermissions: Boolean!
  canVerifyRegistrations: Boolean!
  userUid: String!
}

type ChurrosMinor implements ChurrosNode {
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  majors: [ChurrosMajor!]!
  name: String!
  shortName: String!
  """Un nom lisible sans espaces, adaptés pour des URLs."""
  slug: String!
  subjects: [ChurrosSubject!]!
  uid: String! @deprecated(reason: "Use `slug` instead. This field was never universally unique.")
  users: [ChurrosUser!]!
  yearTier: Int!
}

union ChurrosMutationAcceptRegistrationResult = ChurrosError | ChurrosMutationAcceptRegistrationSuccess

type ChurrosMutationAcceptRegistrationSuccess {
  data: ChurrosUser!
}

union ChurrosMutationAddFileToPageResult = ChurrosError | ChurrosMutationAddFileToPageSuccess | ChurrosZodError

type ChurrosMutationAddFileToPageSuccess {
  data: ChurrosPage!
}

union ChurrosMutationAddGroupMemberResult = ChurrosError | ChurrosMutationAddGroupMemberSuccess

type ChurrosMutationAddGroupMemberSuccess {
  data: ChurrosGroupMember!
}

union ChurrosMutationAnswerFormSectionResult = ChurrosError | ChurrosMutationAnswerFormSectionSuccess

type ChurrosMutationAnswerFormSectionSuccess {
  data: [ChurrosAnswer!]!
}

union ChurrosMutationAuthorizeResult = ChurrosError | ChurrosMutationAuthorizeSuccess | ChurrosOAuth2Error

type ChurrosMutationAuthorizeSuccess {
  data: String!
}

union ChurrosMutationCancelRegistrationResult = ChurrosError | ChurrosMutationCancelRegistrationSuccess

type ChurrosMutationCancelRegistrationSuccess {
  data: Boolean!
}

union ChurrosMutationCompleteRegistrationResult = ChurrosError | ChurrosMutationCompleteRegistrationSuccess | ChurrosZodError

type ChurrosMutationCompleteRegistrationSuccess {
  data: ChurrosCompleteSignupResult!
}

union ChurrosMutationContributeResult = ChurrosError | ChurrosMutationContributeSuccess

type ChurrosMutationContributeSuccess {
  data: Boolean!
}

union ChurrosMutationCreatePasswordResetResult = ChurrosError | ChurrosMutationCreatePasswordResetSuccess

type ChurrosMutationCreatePasswordResetSuccess {
  data: Boolean!
}

union ChurrosMutationDeletePageResult = ChurrosError | ChurrosMutationDeletePageSuccess | ChurrosZodError

type ChurrosMutationDeletePageSuccess {
  data: ChurrosPage!
}

union ChurrosMutationDeleteShopItemResult = ChurrosError | ChurrosMutationDeleteShopItemSuccess

type ChurrosMutationDeleteShopItemSuccess {
  data: Boolean!
}

union ChurrosMutationFinishPaypalRegistrationPaymentResult = ChurrosError | ChurrosMutationFinishPaypalRegistrationPaymentSuccess

type ChurrosMutationFinishPaypalRegistrationPaymentSuccess {
  data: Boolean!
}

union ChurrosMutationLoginResult = ChurrosAwaitingValidationError | ChurrosError | ChurrosMutationLoginSuccess

type ChurrosMutationLoginSuccess {
  data: ChurrosCredential!
}

union ChurrosMutationMailFormAnswersResult = ChurrosError | ChurrosMutationMailFormAnswersSuccess

type ChurrosMutationMailFormAnswersSuccess {
  data: String!
}

union ChurrosMutationOpposeRegistrationResult = ChurrosError | ChurrosMutationOpposeRegistrationSuccess

type ChurrosMutationOpposeRegistrationSuccess {
  data: Boolean!
}

union ChurrosMutationPaidRegistrationResult = ChurrosError | ChurrosMutationPaidRegistrationSuccess

type ChurrosMutationPaidRegistrationSuccess {
  data: String!
}

union ChurrosMutationPaidShopPaymentResult = ChurrosError | ChurrosMutationPaidShopPaymentSuccess

type ChurrosMutationPaidShopPaymentSuccess {
  data: ChurrosShopPayment!
}

union ChurrosMutationRegisterGoogleCredentialResult = ChurrosError | ChurrosMutationRegisterGoogleCredentialSuccess

type ChurrosMutationRegisterGoogleCredentialSuccess {
  data: Boolean!
}

union ChurrosMutationRemoveFileFromPageResult = ChurrosError | ChurrosMutationRemoveFileFromPageSuccess | ChurrosZodError

type ChurrosMutationRemoveFileFromPageSuccess {
  data: ChurrosPage!
}

union ChurrosMutationRequestEmailChangeResult = ChurrosError | ChurrosMutationRequestEmailChangeSuccess

type ChurrosMutationRequestEmailChangeSuccess {
  data: Boolean!
}

union ChurrosMutationResetPasswordResult = ChurrosError | ChurrosMutationResetPasswordSuccess

type ChurrosMutationResetPasswordSuccess {
  data: Boolean!
}

union ChurrosMutationStartRegistrationResult = ChurrosError | ChurrosMutationStartRegistrationSuccess | ChurrosZodError

type ChurrosMutationStartRegistrationSuccess {
  data: Boolean!
}

union ChurrosMutationUpdateUserCandidateResult = ChurrosError | ChurrosMutationUpdateUserCandidateSuccess | ChurrosZodError

type ChurrosMutationUpdateUserCandidateSuccess {
  data: Boolean!
}

union ChurrosMutationUpdateUserResult = ChurrosError | ChurrosMutationUpdateUserSuccess

type ChurrosMutationUpdateUserSuccess {
  data: ChurrosUser!
}

union ChurrosMutationUpsertAnnouncementResult = ChurrosError | ChurrosMutationUpsertAnnouncementSuccess | ChurrosZodError

type ChurrosMutationUpsertAnnouncementSuccess {
  data: ChurrosAnnouncement!
}

union ChurrosMutationUpsertArticleResult = ChurrosError | ChurrosMutationUpsertArticleSuccess | ChurrosZodError

type ChurrosMutationUpsertArticleSuccess {
  data: ChurrosArticle!
}

union ChurrosMutationUpsertBarWeekResult = ChurrosError | ChurrosMutationUpsertBarWeekSuccess

type ChurrosMutationUpsertBarWeekSuccess {
  data: ChurrosBarWeek!
}

union ChurrosMutationUpsertDocumentResult = ChurrosError | ChurrosMutationUpsertDocumentSuccess

type ChurrosMutationUpsertDocumentSuccess {
  data: ChurrosDocument!
}

union ChurrosMutationUpsertEventResult = ChurrosError | ChurrosMutationUpsertEventSuccess

type ChurrosMutationUpsertEventSuccess {
  data: ChurrosEvent!
}

input ChurrosMutationUpsertFormInput {
  closesAt: DateTime
  description: String! = ""
  """Identifiant de l'événement à associer au formulaire"""
  eventId: ID
  """UID du groupe auquel le formulaire est associé."""
  group: String
  """
  Identifiant du formulaire à mettre à jour. Si non fourni, un nouveau formulaire sera créé.
  """
  id: ID
  opensAt: DateTime
  title: String!
  visibility: ChurrosVisibility! = Unlisted
}

input ChurrosMutationUpsertFormSectionInput {
  description: String! = ""
  """
  Identifiant du formulaire auquel associer la section. Il n'es pas possible de changer le formulaire auquel une section est associée, si id est fourni, ce paramètre est ignoré. L'ID peut être local
  """
  formId: String!
  """
  Identifiant de la section à mettre à jour. Si non fourni, une nouvelle section sera créée.
  """
  id: ID
  """
  Position de la section dans le formulaire. Si non spécifié, la section est ajoutée à la fin du formulaire
  """
  order: Int
  title: String!
}

union ChurrosMutationUpsertGodparentRequestResult = ChurrosError | ChurrosMutationUpsertGodparentRequestSuccess

type ChurrosMutationUpsertGodparentRequestSuccess {
  data: ChurrosGodparentRequest!
}

union ChurrosMutationUpsertGroupResult = ChurrosError | ChurrosMutationUpsertGroupSuccess | ChurrosZodError

type ChurrosMutationUpsertGroupSuccess {
  data: ChurrosGroup!
}

union ChurrosMutationUpsertPageResult = ChurrosError | ChurrosMutationUpsertPageSuccess | ChurrosZodError

type ChurrosMutationUpsertPageSuccess {
  data: ChurrosPage!
}

input ChurrosMutationUpsertQuestionInput {
  """
  Indique si la question doit avoir une option "Autre"
  """
  allowOptionOther: Boolean! = false
  """Types de fichiers autorisés pour les questions de type `FileUpload`"""
  allowedFiletypes: [String!]
  """Indique si les réponses à la question sont anonymes"""
  anonymous: Boolean!
  """
  Valeur par défaut de la question. Voir `AnswerInput.answer` pour le format.
  """
  default: [String!]! = []
  description: String! = ""
  """
  Identifiant du formulaire auquel associer la question. Il n'es pas possible de changer le formulaire auquel une question est associée, si id est fourni, ce paramètre est ignoré.
  """
  formId: ID
  """
  Identifiant de la question à mettre à jour. Si non fourni, une nouvelle question sera créée.
  """
  id: ID
  """Indique si la question est obligatoire"""
  mandatory: Boolean!
  options: [ChurrosQuestionOptionInput!]
  """
  Position de la question dans la section. Si non spécifié, rajoute la question à la fin de la section.
  """
  order: Int
  scale: ChurrosQuestionScaleInput
  """
  Identifiant de la section de formulaire à laquelle associer la question. Si non fourni, la question est rajoutée à une section à titre vide, qui est créée au besoin. Pratique pour les formulaires plus simples sans section.
  """
  sectionId: ID
  title: String!
  type: ChurrosQuestionKind!
}

union ChurrosMutationUpsertRegistrationResult = ChurrosError | ChurrosMutationUpsertRegistrationSuccess

type ChurrosMutationUpsertRegistrationSuccess {
  data: ChurrosRegistration!
}

union ChurrosMutationUpsertServiceResult = ChurrosError | ChurrosMutationUpsertServiceSuccess

type ChurrosMutationUpsertServiceSuccess {
  data: ChurrosService!
}

union ChurrosMutationUpsertShopItemResult = ChurrosError | ChurrosMutationUpsertShopItemSuccess

type ChurrosMutationUpsertShopItemSuccess {
  data: ChurrosShopItem!
}

union ChurrosMutationUpsertShopPaymentResult = ChurrosError | ChurrosMutationUpsertShopPaymentSuccess

type ChurrosMutationUpsertShopPaymentSuccess {
  data: ChurrosShopPayment!
}

union ChurrosMutationUsePasswordResetResult = ChurrosError | ChurrosMutationUsePasswordResetSuccess

type ChurrosMutationUsePasswordResetSuccess {
  data: Boolean!
}

union ChurrosMutationValidateEmailResult = ChurrosError | ChurrosMutationValidateEmailSuccess

type ChurrosMutationValidateEmailSuccess {
  data: Boolean!
}

union ChurrosMutationVerifyBookingResult = ChurrosError | ChurrosMutationVerifyBookingSuccess

type ChurrosMutationVerifyBookingSuccess {
  data: ChurrosRegistrationVerificationResult!
}

interface ChurrosNode {
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
}

"""An error raised when a resource does not exist."""
type ChurrosNotFoundError implements ChurrosErrorInterface {
  message: String!
}

"""A notification is a push notification that was sent to a user"""
type ChurrosNotification implements ChurrosNode {
  actions: [ChurrosLink!]!
  body: String!
  channel: ChurrosNotificationChannel!
  createdAt: DateTime!
  goto: String!
  group: ChurrosGroup
  groupId: ID
  id: ID!
  imageFile: String!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  subscription: ChurrosNotificationSubscription!
  subscriptionId: ID!
  timestamp: DateTime
  title: String!
  updatedAt: DateTime!
  vibrate: [Int!]!
}

enum ChurrosNotificationChannel {
  Articles
  Comments
  GodparentRequests
  GroupBoard
  Other
  Permissions
  Shotguns
}

"""
A NotificationSubscription stores a user's subscription to push notifications on a user agent
"""
type ChurrosNotificationSubscription {
  createdAt: DateTime!
  endpoint: String!
  expiresAt: DateTime
  id: ID!
  name: String!
  owner: ChurrosUser!
  ownerId: ID!
  updatedAt: DateTime!
}

input ChurrosNotificationSubscriptionKeysInput {
  auth: String!
  p256dh: String!
}

type ChurrosOAuth2Error {
  code: ChurrosOAuth2ErrorCode!
  message: String!
}

"""OAuth2 error codes, see RFC 6749 § 4.1.2.1"""
enum ChurrosOAuth2ErrorCode {
  access_denied
  invalid_request
  invalid_scope
  server_error
  temporarily_unavailable
  unauthorized_client
  unsupported_response_type
}

"""
Une page écrite par un·e utilisateur·rice, servant par exemple à présenter les partenariats d'une AE sur une page dédiée.
"""
type ChurrosPage {
  """Contenu de la page. Supporte la syntaxe Markdown."""
  body: String!
  """Contenu de la page, converti en HTML. Protégé contre les attaques XSS."""
  bodyHtml: String!
  """L'utilisateur·ice connecté·e peut modifier ou supprimer cette page"""
  canBeEdited: Boolean!
  createdAt: DateTime!
  """
  Chemin vers les fichiers inclus sur la page, par exmple des images. Voir filesURLs pour obtenir les URLs de ces fichiers.
  """
  files: [String!]!
  """URLs vers les fichiers inclus sur la page."""
  filesURLs: [String!]!
  """
  Groupe auquel appartient la page. Peut être null si la page n'appartient à aucun groupe.
  """
  group: ChurrosGroup
  id: ID!
  """
  Dernier·ère utilisateur·rice ayant modifié la page. Peut être null si la page n'a jamais été modifiée, ou que l'utilisateur·ice en question a été supprimé·e.
  """
  lastAuthor: ChurrosUser
  """
  Chemin vers la page. Doit être unique _par AE ou groupe_. L'URL finale sera donc préfixée d'une certaine manière pour éviter les collisions.
  """
  path: String!
  """
  Association étudiante à laquelle appartient la page. Peut être null si la page n'appartient à aucune association.
  """
  studentAssociation: ChurrosStudentAssociation
  """Titre de la page."""
  title: String!
  updatedAt: DateTime!
}

type ChurrosPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type ChurrosPagesConnection {
  edges: [ChurrosPagesEdge!]!
  nodes: [ChurrosPage!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosPagesEdge {
  cursor: String!
  node: ChurrosPage!
}

enum ChurrosPaymentMethod {
  Card
  Cash
  Check
  Lydia
  Other
  PayPal
  Transfer
}

type ChurrosPicture {
  id: ID!
  path: String!
  position: Int!
}

"""Une ressource qui possède une image associée"""
interface ChurrosPictured {
  """Le nom du fichier de l'image"""
  pictureFile: String!
  """Le nom du fichier de l'image, en thème sombre"""
  pictureFileDark: String!
  """L'URL publique de l'image"""
  pictureURL(
    """Utiliser l'image en thème sombre"""
    dark: Boolean! = false
  ): String!
}

type ChurrosProfitsBreakdown {
  byPaymentMethod: ChurrosProfitsBreakdownByPaymentMethod!
  byTicket: [ChurrosProfitsBreakdownByTicket!]!
  total: Float!
}

type ChurrosProfitsBreakdownByPaymentMethod {
  Card: Float!
  Cash: Float!
  Check: Float!
  Lydia: Float!
  Other: Float!
  PayPal: Float!
  Transfer: Float!
}

type ChurrosProfitsBreakdownByTicket {
  amount: Float!
  id: ID!
}

enum ChurrosPromotionType {
  SIMPPS
}

type ChurrosQRCode {
  path: String!
  viewbox: String!
}

"""
- **Rate limit par défault:** 1200/minute (par utilisateur·ice et par query)
"""
type Query {
  group(uid: String!): ChurrosGroup!
  """- **Rate limit:** 6000/minute"""
  me: ChurrosUser!
  user(id: ID, uid: String): ChurrosUser!
}

type ChurrosQueryAllFormsConnection {
  edges: [ChurrosQueryAllFormsConnectionEdge!]!
  nodes: [ChurrosForm!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryAllFormsConnectionEdge {
  cursor: String!
  node: ChurrosForm!
}

type ChurrosQueryAllUsersConnection {
  edges: [ChurrosQueryAllUsersConnectionEdge!]!
  nodes: [ChurrosUser!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryAllUsersConnectionEdge {
  cursor: String!
  node: ChurrosUser!
}

type ChurrosQueryAnnouncementsConnection {
  edges: [ChurrosQueryAnnouncementsConnectionEdge!]!
  nodes: [ChurrosAnnouncement!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryAnnouncementsConnectionEdge {
  cursor: String!
  node: ChurrosAnnouncement!
}

union ChurrosQueryCodeContributorsResult = ChurrosError | ChurrosQueryCodeContributorsSuccess

type ChurrosQueryCodeContributorsSuccess {
  data: [ChurrosUser!]!
}

union ChurrosQueryCombinedChangelogResult = ChurrosError | ChurrosQueryCombinedChangelogSuccess

type ChurrosQueryCombinedChangelogSuccess {
  data: [ChurrosChangelogRelease!]!
}

type ChurrosQueryDocumentsConnection {
  edges: [ChurrosQueryDocumentsConnectionEdge!]!
  nodes: [ChurrosDocument!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryDocumentsConnectionEdge {
  cursor: String!
  node: ChurrosDocument!
}

type ChurrosQueryEventsByDayConnection {
  edges: [ChurrosQueryEventsByDayConnectionEdge!]!
  nodes: [ChurrosEventsByDay!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryEventsByDayConnectionEdge {
  cursor: String!
  node: ChurrosEventsByDay!
}

type ChurrosQueryEventsConnection {
  edges: [ChurrosQueryEventsConnectionEdge!]!
  nodes: [ChurrosEvent!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryEventsConnectionEdge {
  cursor: String!
  node: ChurrosEvent!
}

type ChurrosQueryFormsConnection {
  edges: [ChurrosQueryFormsConnectionEdge!]!
  nodes: [ChurrosForm!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryFormsConnectionEdge {
  cursor: String!
  node: ChurrosForm!
}

union ChurrosQueryGroupMembersCsvResult = ChurrosError | ChurrosQueryGroupMembersCsvSuccess

type ChurrosQueryGroupMembersCsvSuccess {
  data: String!
}

type ChurrosQueryHomepageConnection {
  edges: [ChurrosQueryHomepageConnectionEdge!]!
  nodes: [ChurrosArticle!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryHomepageConnectionEdge {
  cursor: String!
  node: ChurrosArticle!
}

type ChurrosQueryLogsConnection {
  edges: [ChurrosQueryLogsConnectionEdge!]!
  nodes: [ChurrosLogEntry!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryLogsConnectionEdge {
  cursor: String!
  node: ChurrosLogEntry!
}

type ChurrosQueryMinorsConnection {
  edges: [ChurrosQueryMinorsConnectionEdge!]!
  nodes: [ChurrosMinor!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryMinorsConnectionEdge {
  cursor: String!
  node: ChurrosMinor!
}

type ChurrosQueryNotificationsConnection {
  edges: [ChurrosQueryNotificationsConnectionEdge!]!
  nodes: [ChurrosNotification!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryNotificationsConnectionEdge {
  cursor: String!
  node: ChurrosNotification!
}

type ChurrosQueryPagesConnection {
  edges: [ChurrosQueryPagesConnectionEdge!]!
  nodes: [ChurrosPage!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryPagesConnectionEdge {
  cursor: String!
  node: ChurrosPage!
}

type ChurrosQueryQuickSignupsConnection {
  edges: [ChurrosQueryQuickSignupsConnectionEdge!]!
  nodes: [ChurrosQuickSignup!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryQuickSignupsConnectionEdge {
  cursor: String!
  node: ChurrosQuickSignup!
}

type ChurrosQueryReactionsConnection {
  edges: [ChurrosQueryReactionsConnectionEdge!]!
  nodes: [ChurrosReaction!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryReactionsConnectionEdge {
  cursor: String!
  node: ChurrosReaction!
}

union ChurrosQueryRegistrationResult = ChurrosError | ChurrosQueryRegistrationSuccess

type ChurrosQueryRegistrationSuccess {
  data: ChurrosRegistration!
}

type ChurrosQueryRegistrationsOfUserConnection {
  edges: [ChurrosQueryRegistrationsOfUserConnectionEdge!]!
  nodes: [ChurrosRegistration!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryRegistrationsOfUserConnectionEdge {
  cursor: String!
  node: ChurrosRegistration!
}

union ChurrosQueryUpcomingChangelogResult = ChurrosError | ChurrosQueryUpcomingChangelogSuccess

type ChurrosQueryUpcomingChangelogSuccess {
  data: ChurrosChangelogRelease!
}

type ChurrosQueryUserCandidatesConnection {
  edges: [ChurrosQueryUserCandidatesConnectionEdge!]!
  nodes: [ChurrosUserCandidate!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQueryUserCandidatesConnectionEdge {
  cursor: String!
  node: ChurrosUserCandidate!
}

"""Une question dans un formulaire"""
interface ChurrosQuestion {
  """
  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question
  """
  anonymous: Boolean!
  answers(
    after: String
    before: String
    """Récupérer uniquement les réponses d'un utilisateur, par son uid."""
    by: String
    first: Int
    last: Int
  ): ChurrosQuestionAnswersConnection!
  """
  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide
  """
  defaultAnswer: ChurrosAnswer
  """Description en Markdown de la question"""
  description: String!
  """Description en HTML de la question"""
  descriptionHtml: String!
  """Préfixe d'identifiant: question:"""
  id: ID!
  """Indique si la question est obligatoire"""
  mandatory: Boolean!
  """La réponse de l'utilisateur·ice connecté·e à cette question"""
  myAnswer: ChurrosAnswer
  """Ordre de la question dans la section"""
  order: Int!
  """Section du formulaire dans laquelle est la question"""
  section: ChurrosFormSection!
  """Titre de la question"""
  title: String!
  """Nombre total de réponses à cette question"""
  totalAnswers: Int!
  """Type de la question"""
  type: ChurrosQuestionKind!
}

type ChurrosQuestionAnswersConnection {
  edges: [ChurrosQuestionAnswersConnectionEdge!]!
  nodes: [ChurrosAnswer!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosQuestionAnswersConnectionEdge {
  cursor: String!
  node: ChurrosAnswer!
}

"""Question de type `FileUpload`"""
type ChurrosQuestionFileUpload implements ChurrosQuestion {
  """
  Types de fichiers autorisés pour les questions de type `File`. Null si la question n'est pas de type `File`.
  """
  allowedFileTypes: [String!]
  """
  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question
  """
  anonymous: Boolean!
  answers(
    after: String
    before: String
    """Récupérer uniquement les réponses d'un utilisateur, par son uid."""
    by: String
    first: Int
    last: Int
  ): ChurrosQuestionAnswersConnection!
  """
  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide
  """
  defaultAnswer: ChurrosAnswer
  """Description en Markdown de la question"""
  description: String!
  """Description en HTML de la question"""
  descriptionHtml: String!
  """Préfixe d'identifiant: question:"""
  id: ID!
  """Indique si la question est obligatoire"""
  mandatory: Boolean!
  """La réponse de l'utilisateur·ice connecté·e à cette question"""
  myAnswer: ChurrosAnswer
  """Ordre de la question dans la section"""
  order: Int!
  """Section du formulaire dans laquelle est la question"""
  section: ChurrosFormSection!
  """Titre de la question"""
  title: String!
  """Nombre total de réponses à cette question"""
  totalAnswers: Int!
  """Type de la question"""
  type: ChurrosQuestionKind!
}

"""Le type de question"""
enum ChurrosQuestionKind {
  """La réponse est une date, sans heure associée."""
  Date
  """La réponse est un fichier mis en ligne par l'utilisateur·ice."""
  FileUpload
  """La réponse est un texte long."""
  LongText
  """La réponse est un nombre, potentiellement à virgule."""
  Number
  """La réponse est un nombre entier entre deux bornes"""
  Scale
  """La réponse est une ou plusieurs options parmi une liste."""
  SelectMultiple
  """La réponse est une des options parmi une liste."""
  SelectOne
  """La réponse est un texte court."""
  Text
  """
  La réponse est un temps  (heures, minute et seconde), sans date associée.
  """
  Time
}

"""Choix pour les questions de type `SelectOne` ou `SelectMultiple`"""
input ChurrosQuestionOptionInput {
  """ID de la question vers laquelle sauter si ce choix est sélectionné"""
  jump: ID
  """Choix"""
  value: String!
}

"""Question de type `Text`, `Number`, `Date`, `Time` ou `LongText`"""
type ChurrosQuestionScalar implements ChurrosQuestion {
  """
  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question
  """
  anonymous: Boolean!
  answers(
    after: String
    before: String
    """Récupérer uniquement les réponses d'un utilisateur, par son uid."""
    by: String
    first: Int
    last: Int
  ): ChurrosQuestionAnswersConnection!
  """
  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide
  """
  defaultAnswer: ChurrosAnswer
  """Description en Markdown de la question"""
  description: String!
  """Description en HTML de la question"""
  descriptionHtml: String!
  """Préfixe d'identifiant: question:"""
  id: ID!
  """Indique si la question est obligatoire"""
  mandatory: Boolean!
  """La réponse de l'utilisateur·ice connecté·e à cette question"""
  myAnswer: ChurrosAnswer
  """Ordre de la question dans la section"""
  order: Int!
  """Section du formulaire dans laquelle est la question"""
  section: ChurrosFormSection!
  """Titre de la question"""
  title: String!
  """Nombre total de réponses à cette question"""
  totalAnswers: Int!
  """Type de la question"""
  type: ChurrosQuestionKind!
}

"""Question de type `Scale`"""
type ChurrosQuestionScale implements ChurrosQuestion {
  """
  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question
  """
  anonymous: Boolean!
  """
  Compte le nombre total de réponses pour chaque option. Retourne un `StringToIntMapping` où les clés sont les options et les valeurs sont le nombre de réponses pour l'option.
  """
  answerCounts: [ChurrosStringToIntMapping!]!
  answers(
    after: String
    before: String
    """Récupérer uniquement les réponses d'un utilisateur, par son uid."""
    by: String
    first: Int
    last: Int
  ): ChurrosQuestionAnswersConnection!
  """
  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide
  """
  defaultAnswer: ChurrosAnswer
  """Description en Markdown de la question"""
  description: String!
  """Description en HTML de la question"""
  descriptionHtml: String!
  """Préfixe d'identifiant: question:"""
  id: ID!
  """Liste des labels pour les valeurs possibles"""
  labels: [String!]!
  """Indique si la question est obligatoire"""
  mandatory: Boolean!
  """Valeur maximale"""
  maximum: Int!
  """Label de la valeur maximale"""
  maximumLabel: String!
  """Valeur minimale"""
  minimum: Int!
  """Label de la valeur minimale"""
  minimumLabel: String!
  """La réponse de l'utilisateur·ice connecté·e à cette question"""
  myAnswer: ChurrosAnswer
  """Liste des valeurs possibles"""
  options: [Int!]!
  """Ordre de la question dans la section"""
  order: Int!
  """Section du formulaire dans laquelle est la question"""
  section: ChurrosFormSection!
  """Titre de la question"""
  title: String!
  """Nombre total de réponses à cette question"""
  totalAnswers: Int!
  """Type de la question"""
  type: ChurrosQuestionKind!
}

"""Options supplémentaires pour les questions de type `Scale`"""
input ChurrosQuestionScaleInput {
  """Valeur maximale"""
  maximum: Int!
  """Label de la valeur maximale"""
  maximumLabel: String
  """Valeur minimale"""
  minimum: Int!
  """Label de la valeur minimale"""
  minimumLabel: String
}

"""Question de type `SelectMultiple`"""
type ChurrosQuestionSelectMultiple implements ChurrosQuestion {
  """
  Indique si la question de type `SelectOne` ou `SelectMultiple` permet une option "Autre", que l'utilisateur·ice peut remplir sans contrainte.
  """
  allowOptionsOther: Boolean!
  """
  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question
  """
  anonymous: Boolean!
  """
  Compte le nombre total de réponses pour chaque option. Retourne un `StringToIntMapping` où les clés sont les options et les valeurs sont le nombre de réponses pour l'option.
  """
  answerCounts: [ChurrosStringToIntMapping!]!
  answers(
    after: String
    before: String
    """Récupérer uniquement les réponses d'un utilisateur, par son uid."""
    by: String
    first: Int
    last: Int
  ): ChurrosQuestionAnswersConnection!
  """
  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide
  """
  defaultAnswer: ChurrosAnswer
  """Description en Markdown de la question"""
  description: String!
  """Description en HTML de la question"""
  descriptionHtml: String!
  """Préfixe d'identifiant: question:"""
  id: ID!
  """Indique si la question est obligatoire"""
  mandatory: Boolean!
  """La réponse de l'utilisateur·ice connecté·e à cette question"""
  myAnswer: ChurrosAnswer
  """
  Uniquement pertinent pour les questions de type `SelectOne` ou `SelectMultiple`
  """
  options: [String!]!
  """Ordre de la question dans la section"""
  order: Int!
  """Section du formulaire dans laquelle est la question"""
  section: ChurrosFormSection!
  """Titre de la question"""
  title: String!
  """Nombre total de réponses à cette question"""
  totalAnswers: Int!
  """Type de la question"""
  type: ChurrosQuestionKind!
}

"""Question de type `SelectOne`"""
type ChurrosQuestionSelectOne implements ChurrosQuestion {
  """
  Indique si la question de type `SelectOne` ou `SelectMultiple` permet une option "Autre", que l'utilisateur·ice peut remplir sans contrainte.
  """
  allowOptionsOther: Boolean!
  """
  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question
  """
  anonymous: Boolean!
  """
  Compte le nombre total de réponses pour chaque option. Retourne un `StringToIntMapping` où les clés sont les options et les valeurs sont le nombre de réponses pour l'option.
  """
  answerCounts: [ChurrosStringToIntMapping!]!
  answers(
    after: String
    before: String
    """Récupérer uniquement les réponses d'un utilisateur, par son uid."""
    by: String
    first: Int
    last: Int
  ): ChurrosQuestionAnswersConnection!
  """
  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide
  """
  defaultAnswer: ChurrosAnswer
  """Description en Markdown de la question"""
  description: String!
  """Description en HTML de la question"""
  descriptionHtml: String!
  """
  Dans le même ordre que `options`, contient le groupe si l'option porte exactement le nom du groupe, ou null si aucun groupe ne correspond. Pratique pour les questions où l'on demande à choisir entre plusieurs groupes (comme les votes de listes par ex.)
  """
  groups: [ChurrosGroup]!
  """Préfixe d'identifiant: question:"""
  id: ID!
  """
  Correspondances entre les réponses à cette question et les sections du formulaire à sauter vers. Dans le même ordre que `options`. Quand un élément est null, la section suivante n'est pas modifiée
  """
  jumps: [ChurrosFormSection]!
  """Indique si la question est obligatoire"""
  mandatory: Boolean!
  """La réponse de l'utilisateur·ice connecté·e à cette question"""
  myAnswer: ChurrosAnswer
  """
  Uniquement pertinent pour les questions de type `SelectOne` ou `SelectMultiple`
  """
  options: [String!]!
  """Ordre de la question dans la section"""
  order: Int!
  """Section du formulaire dans laquelle est la question"""
  section: ChurrosFormSection!
  """Titre de la question"""
  title: String!
  """Nombre total de réponses à cette question"""
  totalAnswers: Int!
  """Type de la question"""
  type: ChurrosQuestionKind!
}

"""
Lien d'inscription rapide, qui permet de créer un compte étudiant sans adresse mail étudiante et sans validation manuelle
"""
type ChurrosQuickSignup implements ChurrosNode {
  code: String!
  createdAt: DateTime!
  """Vrai si le lien est expiré"""
  expired: Boolean!
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  school: ChurrosSchool!
  schoolId: ID!
  updatedAt: DateTime!
  validUntil: DateTime!
}

"""
Une resource pouvant recevoir des réactions (likes, etc) par les utilisateur·ice·s
"""
interface ChurrosReactable {
  """L’identifiant de la resource"""
  id: ID!
  """Vrai si l’utilisateur·ice connecté·e a réagi avec cet emoji"""
  reacted(emoji: String!): Boolean!
  """Nombre total de réactions avec cet emoji"""
  reactions(emoji: String!): Int!
}

type ChurrosReaction implements ChurrosNode {
  author: ChurrosUser
  authorId: ID
  comment: ChurrosComment
  commentId: ID
  createdAt: DateTime!
  document: ChurrosDocument
  documentId: ID
  emoji: String!
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  updatedAt: DateTime!
}

type ChurrosRedisHealthCheck {
  """Whether the Redis publisher client is ready"""
  publish: Boolean!
  """Whether the Redis subscriber client is ready"""
  subscribe: Boolean!
}

"""A reservation is a user's registration for a ticket"""
type ChurrosRegistration implements ChurrosNode {
  author: ChurrosUser
  authorEmail: String!
  authorId: ID
  authorIsBeneficiary: Boolean!
  beneficiary: String!
  beneficiaryUser: ChurrosUser
  cancelled: Boolean!
  cancelledAt: DateTime
  cancelledBy: ChurrosUser
  code: String!
  createdAt: DateTime!
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  opposed: Boolean!
  opposedAt: DateTime
  opposedBy: ChurrosUser
  paid: Boolean!
  paymentMethod: ChurrosPaymentMethod
  ticket: ChurrosTicket!
  ticketId: ID!
  updatedAt: DateTime!
  verified: Boolean!
  verifiedAt: DateTime
  verifiedBy: ChurrosUser
}

type ChurrosRegistrationSearchResult {
  highlightedBeneficiary: String!
  id: ID!
  rank: Float
  registration: ChurrosRegistration!
  similarity: Float!
}

type ChurrosRegistrationVerificationResult {
  registration: ChurrosRegistration
  state: ChurrosRegistrationVerificationState!
}

enum ChurrosRegistrationVerificationState {
  AlreadyVerified
  NotFound
  NotPaid
  Ok
  Opposed
  OtherEvent
}

type ChurrosRegistrationsCounts {
  cancelled: Float!
  paid: Float!
  total: Float!
  unpaidLydia: Float!
  verified: Float!
}

"""A change in the changelog"""
type ChurrosReleaseChange {
  """The authors of the change"""
  authors: [String!]!
  html: String!
  """Issues linked to the change"""
  issues: [Int!]!
  """Merge requests linked to the change"""
  mergeRequests: [Int!]!
  """People who created the issues (gave the idea, reported the bug, etc.)"""
  reporters: [String!]!
  """The text of the change"""
  text: String!
}

"""Changes in the changelog, grouped by category"""
type ChurrosReleaseChangesMaps {
  """New features"""
  added: [ChurrosReleaseChange!]!
  """What was fixed"""
  fixed: [ChurrosReleaseChange!]!
  """What was improved"""
  improved: [ChurrosReleaseChange!]!
  """Miscalleanous changes"""
  other: [ChurrosReleaseChange!]!
  """Security changes"""
  security: [ChurrosReleaseChange!]!
  """Technical changes"""
  technical: [ChurrosReleaseChange!]!
}

type ChurrosSchool implements ChurrosPictured {
  address: String!
  aliasMailDomains: [String!]!
  color: String!
  description: String!
  id: ID!
  majors: [ChurrosMajor!]!
  name: String!
  pictureFile: String!
  """Le nom du fichier de l'image, en thème sombre"""
  pictureFileDark: String!
  """L'URL publique de l'image"""
  pictureURL(
    """Utiliser l'image en thème sombre"""
    dark: Boolean! = false
  ): String!
  services: [ChurrosService!]!
  slug: String!
  studentAssociations: [ChurrosStudentAssociation!]!
  studentMailDomain: String!
  uid: String!
}

type ChurrosSchoolGroup {
  majors: [ChurrosMajor!]!
  names: [String!]!
}

input ChurrosSchoolInput {
  color: String!
  id: ID
  name: String!
}

"""A service"""
type ChurrosService implements ChurrosNode {
  description: String!
  group: ChurrosGroup
  id: ID!
  importance: Int!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  logo: String!
  logoSourceType: ChurrosLogoSourceType!
  name: String!
  school: ChurrosSchool
  studentAssociation: ChurrosStudentAssociation
  url: String!
}

type ChurrosShopItem implements ChurrosNode {
  createdAt: DateTime!
  description: String!
  descriptionHtml: String!
  endsAt: DateTime
  group: ChurrosGroup!
  id: ID!
  itemOptions: [ChurrosShopItemOption!]!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  lydiaAccount: ChurrosLydiaAccount
  max: Int!
  name: String!
  paymentMethods: [ChurrosPaymentMethod!]!
  pictures: [ChurrosPicture!]!
  price: Float!
  shopPayments: [ChurrosShopPayment!]!
  """Un nom lisible sans espaces, adaptés pour des URLs."""
  slug: String!
  startsAt: DateTime
  stock: Int!
  stockLeft: Int!
  uid: String! @deprecated(reason: "Use `slug` instead. This field was never universally unique.")
  updatedAt: DateTime!
  visibility: ChurrosVisibility!
}

type ChurrosShopItemAnswer {
  id: ID!
  options: [String!]!
  shopPayment: ChurrosShopPayment!
  shopPaymentId: String!
}

type ChurrosShopItemOption {
  id: ID!
  name: String!
  options: [String!]!
  otherToggle: Boolean!
  required: Boolean!
  shopItem: ChurrosShopItem!
}

input ChurrosShopItemOptionInput {
  id: String!
  name: String!
  options: [String!]!
  otherToggle: Boolean!
  required: Boolean!
}

type ChurrosShopPayment {
  createdAt: DateTime!
  id: ID!
  paid: Boolean!
  paymentMethod: ChurrosPaymentMethod!
  quantity: Int!
  shopItem: ChurrosShopItem!
  shopItemAnswer: ChurrosShopItemAnswer
  totalPrice: Float!
  updatedAt: DateTime!
  user: ChurrosUser!
}

enum ChurrosSortDirection {
  Ascending
  Descending
}

"""Associe une clé à une valeur de type nombre entier"""
type ChurrosStringToIntMapping {
  """Clé de la paire"""
  key: String!
  """Valeur de la paire"""
  value: Int!
}

"""There is one student association per school"""
type ChurrosStudentAssociation implements ChurrosPictured {
  """
  Si l'utilsateur·ice courant·e peut créer des groupes rattachés à cette AE
  """
  canCreateGroups(
    """
    Quel type de groupe l'on souhaiterait créer. Si non spécifié, renvoie vrai si l'on peut créer au moins un type de groupe
    """
    type: ChurrosGroupType
  ): Boolean!
  """
  L'utilisateur·ice connecté·e peut éditer (créer ou modifier) les pages de l'AE
  """
  canEditPages: Boolean!
  """L'utilisateur·ice connecté·e peut lister les pages de l'AE"""
  canListPages: Boolean!
  contributionOptions: [ChurrosContributionOption!]!
  createdAt: DateTime!
  description: String!
  groups(after: String, before: String, first: Int, last: Int, types: [ChurrosGroupType!]): ChurrosStudentAssociationGroupsConnection!
  """Nombre de groupes reliés à cette AE"""
  groupsCount: Int!
  id: ID!
  links: [ChurrosLink!]!
  name: String!
  """La page associée à l'AE"""
  page(
    """
    Le chemin de la page. Ce n'est pas le chemin complet, mais celui qui est local à l'AE. Voir `Page` pour plus d'informations.
    """
    path: String!
  ): ChurrosPage
  """Les pages associées à l'AE"""
  pages(after: String, before: String, first: Int, last: Int): ChurrosPagesConnection!
  pictureFile: String!
  """Le nom du fichier de l'image, en thème sombre"""
  pictureFileDark: String!
  """L'URL publique de l'image"""
  pictureURL(
    """Utiliser l'image en thème sombre"""
    dark: Boolean! = false
  ): String!
  school: ChurrosSchool!
  schoolId: ID!
  uid: String
  updatedAt: DateTime!
}

type ChurrosStudentAssociationGroupsConnection {
  edges: [ChurrosStudentAssociationGroupsConnectionEdge!]!
  nodes: [ChurrosGroup!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosStudentAssociationGroupsConnectionEdge {
  cursor: String!
  node: ChurrosGroup!
}

type ChurrosSubject {
  apogeeCode: String
  documents(after: String, before: String, first: Int, last: Int): ChurrosSubjectDocumentsConnection!
  documentsCount: Int!
  emoji: String!
  forApprentices: Boolean!
  id: ID!
  links: [ChurrosLink!]!
  majors: [ChurrosMajor!]!
  minors: [ChurrosMinor!]!
  name: String!
  nextExamAt: DateTime
  semester: Int
  shortName: String!
  """Un nom lisible sans espaces, adaptés pour des URLs."""
  slug: String!
  uid: String! @deprecated(reason: "Use `slug` instead. This field was never universally unique.")
  unit: ChurrosTeachingUnit
  unitId: ID
  yearTier: Int
}

type ChurrosSubjectDocumentsConnection {
  edges: [ChurrosSubjectDocumentsConnectionEdge!]!
  nodes: [ChurrosDocument!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosSubjectDocumentsConnectionEdge {
  cursor: String!
  node: ChurrosDocument!
}

"""
Permet de faire des requêtes de données temps-réel, via des _websockets_.
L'endpoint pour le temps réel est `ws://localhost:4000/graphql`. 

Pour un client JavaScript, il y a par exemple [GraphQL-WebSocket](https://the-guild.dev/graphql/ws/get-started#use-the-client)

- **Rate limit par défault:** 600 / 10 minutes (par utilisateur·ice et par query)
"""
type Subscription {
  announcementsNow: [ChurrosAnnouncement!]!
  article(id: ChurrosLocalID!): ChurrosArticle!
  event(group: ChurrosUID, id: ChurrosLocalID, slug: String): ChurrosEvent!
  """
  Récupère un formulaire. On peut utiliser une subscription pour avoir la mise à jour en temps réel des réponses au formulaire.
  """
  form(
    """Identifiant local (sans le préfixe `form:`) du formulaire"""
    localId: String!
  ): ChurrosForm
  """Gets the homepage articles, customized if the user is logged in."""
  homepage(after: String, before: String, first: Int, last: Int): ChurrosQueryHomepageConnection!
  kioskReload: Boolean!
  registration(id: ID!): ChurrosSubscriptionRegistrationResult!
  thirdPartyApp(
    """The third party app's client_id. The 'app:' id prefix is optional."""
    id: ID!
  ): ChurrosThirdPartyApp!
}

union ChurrosSubscriptionRegistrationResult = ChurrosError | ChurrosSubscriptionRegistrationSuccess

type ChurrosSubscriptionRegistrationSuccess {
  data: ChurrosRegistration!
}

type ChurrosTeachingUnit {
  apogeeCode: String
  id: ID!
  name: String!
  shortName: String!
  subjects: [ChurrosSubject!]!
}

"""A third-party OAuth2 client"""
type ChurrosThirdPartyApp {
  active: Boolean!
  allowedRedirectUris: [String!]!
  apiUsage(after: String, before: String, first: Int, last: Int): ChurrosThirdPartyAppApiUsageConnection!
  clientId: String!
  createdAt: DateTime!
  description: String!
  faviconUrl: String!
  id: ID!
  """
  Logs de connexion de l'application tierce, utile pour débugger des problèmes. Mise à jour en temps réel disponible via une subscription sur la query `thirdPartyApp`.
  """
  logs(after: String, before: String, first: Int, last: Int): ChurrosThirdPartyAppLogsConnection!
  name: String!
  owner: ChurrosGroup!
  rateLimitHits(after: String, before: String, first: Int, last: Int): ChurrosThirdPartyAppRateLimitHitsConnection!
  secretLength: Int!
  updatedAt: DateTime
  users(after: String, before: String, first: Int, last: Int): ChurrosThirdPartyAppUsersConnection!
  usersCount: Int!
  website: String!
}

type ChurrosThirdPartyAppApiUsageConnection {
  edges: [ChurrosThirdPartyAppApiUsageConnectionEdge!]!
  nodes: [ChurrosApiUsage!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosThirdPartyAppApiUsageConnectionEdge {
  cursor: String!
  node: ChurrosApiUsage!
}

type ChurrosThirdPartyAppLogsConnection {
  edges: [ChurrosThirdPartyAppLogsConnectionEdge!]!
  nodes: [ChurrosLogEntry!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosThirdPartyAppLogsConnectionEdge {
  cursor: String!
  node: ChurrosLogEntry!
}

type ChurrosThirdPartyAppRateLimitHitsConnection {
  edges: [ChurrosThirdPartyAppRateLimitHitsConnectionEdge!]!
  nodes: [ChurrosApiRateLimitHits!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosThirdPartyAppRateLimitHitsConnectionEdge {
  cursor: String!
  node: ChurrosApiRateLimitHits!
}

type ChurrosThirdPartyAppRegistrationResponse {
  client_id: String!
  client_secret: String!
}

type ChurrosThirdPartyAppUsersConnection {
  edges: [ChurrosThirdPartyAppUsersConnectionEdge!]!
  nodes: [ChurrosUser!]!
  pageInfo: ChurrosPageInfo!
  totalCount: Int!
}

type ChurrosThirdPartyAppUsersConnectionEdge {
  cursor: String!
  node: ChurrosUser!
}

"""
A ticket is a way to register for an event. May include a price and conditions.
"""
type ChurrosTicket implements ChurrosNode {
  allowedPaymentMethods: [ChurrosPaymentMethod!]!
  autojoinGroups: [ChurrosGroup!]!
  basePrice: Float!
  capacity: Int!
  closesAt: DateTime
  description: String!
  descriptionHtml: String!
  event: ChurrosEvent!
  eventId: ID!
  """Full name, including the ticket group's name if any"""
  fullName: String!
  godsonLimit: Int!
  group: ChurrosTicketGroup
  id: ID!
  links: [ChurrosLink!]!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  name: String!
  onlyManagersCanProvide: Boolean!
  openToAlumni: Boolean
  openToApprentices: Boolean
  openToContributors: Boolean
  openToExternal: Boolean
  openToGroups: [ChurrosGroup!]!
  openToMajors: [ChurrosMajor!]!
  openToPromotions: [Int!]!
  openToSchools: [ChurrosSchool!]!
  opensAt: DateTime
  """
  Nombre de places restantes. Null si l'information n'est pas disponible. N'est jamais null quand il n'y a plus de places disponibles (0)
  """
  placesLeft: Int
  price: Float!
  registrations: [ChurrosRegistration!]!
  remainingGodsons: Int!
  """Un nom lisible sans espaces, adaptés pour des URLs."""
  slug: String!
  ticketGroupId: ID
  uid: String! @deprecated(reason: "Use `slug` instead. This field was never universally unique.")
}

"""
A ticket group allows for conditions on multiple tickets, such as an upper limit on the sum of registrations in the sub-tickets
"""
type ChurrosTicketGroup implements ChurrosNode {
  capacity: Int!
  event: ChurrosEvent!
  eventId: ID!
  id: ID!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  name: String!
  tickets: [ChurrosTicket!]!
}

input ChurrosTicketGroupInput {
  capacity: Int!
  id: ID
  name: String!
}

input ChurrosTicketInput {
  allowedPaymentMethods: [ChurrosPaymentMethod!]!
  autojoinGroups: [String!]!
  capacity: Int!
  closesAt: DateTime
  description: String!
  godsonLimit: Int!
  groupName: String
  id: ID
  links: [ChurrosLinkInput!]!
  name: String!
  onlyManagersCanProvide: Boolean!
  openToAlumni: Boolean
  openToApprentices: Boolean
  openToContributors: Boolean
  openToExternal: Boolean
  openToGroups: [String!]!
  openToMajors: [String!]!
  openToPromotions: [Int!]!
  openToSchools: [String!]!
  opensAt: DateTime
  price: Float!
}

"""A field whose value matches /^[\w-]{3,255}$/."""
scalar ChurrosUID

input ChurrosUpsertGroupInput {
  address: String!
  color: String
  description: String!
  email: String
  links: [ChurrosLinkInput!]!
  longDescription: String!
  mailingList: String
  name: String!
  parent: ChurrosUID
  related: [String!]!
  school: ChurrosUID
  selfJoinable: Boolean!
  studentAssociation: ChurrosUID
  type: ChurrosGroupType!
  """
  Ne sert qu'à la création du groupe. Il est impossible de modifier un uid existant
  """
  uid: ChurrosUID
  website: String!
}

"""Users are the people who use the app"""
type ChurrosUser implements ChurrosNode & ChurrosPictured {
  address: String!
  admin: Boolean!
  """
  Vrai si cette personne est administratrice de l'association étudiante donnée
  """
  adminOf(
    """UID de l'association étudiante"""
    studentAssociation: String!
  ): Boolean!
  allowedApps: [ChurrosThirdPartyApp!]! @deprecated(reason: "Use `authorizedApps` instead")
  """Formulaires complètement répondus par l'utilisateur"""
  answeredForms(after: String, before: String, first: Int, last: Int): ChurrosUserAnsweredFormsConnection!
  apprentice: Boolean!
  articles(after: String, before: String, first: Int, last: Int): ChurrosUserArticlesConnection!
  """Applications tierces autorisées à accéder à ce compte utilisateur"""
  authorizedApps: [ChurrosThirdPartyApp!]!
  birthday: DateTime
  """Les affiliations de l'utilisateur à des groupes dont iel est au bureau"""
  boardMemberships: [ChurrosGroupMember!]!
  booking(beneficiary: String, event: ID!): ChurrosRegistration!
  bookings(after: String, before: String, first: Int, forUserOnly: Boolean, last: Int): ChurrosUserBookingsConnection!
  """
  Vrai si cet utilisateur est un bot (i.e. ne représente pas une personne physique)
  """
  bot: Boolean!
  canAccessDocuments: Boolean!
  canBeEdited: Boolean!
  """Groupes sur lesquels l'utilisateur·ice peut créer des posts"""
  canCreatePostsOn: [ChurrosGroup!]!
  """Vrai si cette personne peut éditer le groupe donné"""
  canEditGroup(
    """UID du groupe"""
    uid: String!
  ): Boolean!
  """Vrai si cette personne peut éditer des groupes"""
  canEditGroups: Boolean!
  cededImageRightsToTVn7: Boolean!
  contributesTo: [ChurrosStudentAssociation!]!
  contributesWith: [ChurrosContributionOption!]!
  createdAt: DateTime!
  credentials: [ChurrosCredential!]!
  description: String!
  descriptionHtml: String!
  email: String!
  emailChangeRequests: [ChurrosEmailChange!]!
  enabledNotificationChannels: [ChurrosNotificationChannel!]!
  external: Boolean!
  familyTree: ChurrosFamilyTree!
  firstName: String!
  fullName: String!
  godchildren: [ChurrosUser!]!
  godparent: ChurrosUser
  graduationYear: Int!
  groups: [ChurrosGroupMember!]!
  id: ID!
  incomingGodparentRequests: [ChurrosGodparentRequest!]!
  lastName: String!
  latestVersionSeenInChangelog: String!
  links: [ChurrosLink!]!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  major: ChurrosMajor
  majorId: ID
  managedEvents: [ChurrosEventManager!]!
  minor: ChurrosMinor
  nickname: String!
  otherEmails: [String!]!
  outgoingGodparentRequests: [ChurrosGodparentRequest!]!
  """Formulaires partiellement répondus par l'utilisateur"""
  partiallyAnsweredForms(after: String, before: String, first: Int, last: Int): ChurrosUserPartiallyAnsweredFormsConnection!
  pendingContributions: [ChurrosContributionOption!]!
  phone: String!
  pictureFile: String!
  """Le nom du fichier de l'image, en thème sombre"""
  pictureFileDark: String!
  """L'URL publique de l'image"""
  pictureURL(
    """Utiliser l'image en thème sombre"""
    dark: Boolean! = false
  ): String!
  schoolUid: String
  """
  Vrai si cette personne est administratrice d'au moins une association étudiante
  """
  studentAssociationAdmin: Boolean!
  uid: String!
  yearTier: Int!
}

type ChurrosUserAnsweredFormsConnection {
  edges: [ChurrosUserAnsweredFormsConnectionEdge!]!
  nodes: [ChurrosForm!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosUserAnsweredFormsConnectionEdge {
  cursor: String!
  node: ChurrosForm!
}

type ChurrosUserArticlesConnection {
  edges: [ChurrosUserArticlesConnectionEdge!]!
  nodes: [ChurrosArticle!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosUserArticlesConnectionEdge {
  cursor: String!
  node: ChurrosArticle!
}

type ChurrosUserBookingsConnection {
  edges: [ChurrosUserBookingsConnectionEdge!]!
  nodes: [ChurrosRegistration!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosUserBookingsConnectionEdge {
  cursor: String!
  node: ChurrosRegistration!
}

"""UserCandidates are users in the registration process"""
type ChurrosUserCandidate implements ChurrosNode {
  address: String!
  apprentice: Boolean!
  birthday: DateTime
  cededImageRightsToTVn7: Boolean!
  createdAt: DateTime
  email: String!
  """Vrai si l'email est une adresse email d'étudiant."""
  emailIsSchoolEmail: Boolean!
  emailValidated: Boolean!
  firstName: String!
  fullName: String!
  graduationYear: Int!
  id: ID!
  lastName: String!
  """L'identifiant local de la ressource (sans préfixe)"""
  localID: ChurrosLocalID!
  major: ChurrosMajor
  majorId: ID
  """
  Vrai si l'utilisateur aura besoin d'une validation manuelle à la fin de l'inscription. Null si la notion n'a pas encore de sens. Si la filière n'a pas encore été renseignée, retourne vrai seulement si l'inscription devra être validée manuellement si une filière (peut importe laquelle) est choisie. Voir `needsManualValidationForMajor` pour être plus précis
  """
  needsManualValidation: Boolean
  """
  Vrai si l'utilisateur aura besoin d'une validation manuelle à la fin de l'inscription si iel choisi cette filière. Null si la notion n'a pas encore de sens.
  """
  needsManualValidationForMajor(
    """L'UID de la filière"""
    major: String!
  ): Boolean
  phone: String!
  schoolEmail: String
  schoolServer: String
  schoolUid: String
  suggestedUid: String!
  uid: String!
  """Vrai si l'utilisateur a été créé via un lien d'inscription rapide."""
  usingQuickSignup: Boolean!
}

type ChurrosUserPartiallyAnsweredFormsConnection {
  edges: [ChurrosUserPartiallyAnsweredFormsConnectionEdge!]!
  nodes: [ChurrosForm!]!
  pageInfo: ChurrosPageInfo!
}

type ChurrosUserPartiallyAnsweredFormsConnectionEdge {
  cursor: String!
  node: ChurrosForm!
}

type ChurrosUserSearchResult {
  highlightedDescription: String!
  id: ID!
  rank: Float
  similarity: Float!
  user: ChurrosUser!
}

enum ChurrosVisibility {
  GroupRestricted
  Private
  Public
  SchoolRestricted
  Unlisted
}

"""A validation error, as a list of field errors."""
type ChurrosZodError implements ChurrosErrorInterface {
  fieldErrors: [ChurrosZodFieldError!]!
  message: String!
}

"""A validation issue for a field."""
type ChurrosZodFieldError {
  message: String!
  path: [String!]!
}