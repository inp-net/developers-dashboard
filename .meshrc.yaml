serve:
  browser: false
sources:
  - name: Churros
    handler:
      graphql:
        endpoint: http://localhost:4000/graphql
    transforms:
      - filterSchema:
          filters:
            - Query.{me,user,group}
            - Mutation.!*
      - prefix:
          value: Churros
  - name: Authentik
    handler:
      openapi:
        source: http://localhost:9001/api/v3/schema/
        fallbackFormat: yaml
        endpoint: http://localhost:9001/api/v3/
        operationHeaders:
          Authorization: "{context.headers.authorization}"
    transforms:
      - filterSchema:
          filters:
            - Query.{providers_all,flows,core_applications}*
            - Mutation.{providers_all,flows,core_applications}*
      - rename:
          renames:
            - from: { type: "Query", field: core_applications_list }
              to: { type: "Query", field: applications }
            - from: { type: "Query", field: core_applications_retrieve }
              to: { type: "Query", field: application }
            - from: { type: "Query", field: core_applications_metrics_list }
              to: { type: "Query", field: applicationMetrics }
            - from: { type: "Query", field: providers_all_list }
              to: { type: "Query", field: providers }
            - from: { type: "Query", field: providers_all_retrieve }
              to: { type: "Query", field: provider }
            - from: { type: "Application", field: "group" }
              to: { type: "Application", field: "groupSlug" }
            # - from: { type: "QueryCoreApplicationsListOneOf_0ResultsItemsSlug" }
            #   to: { type: "String" }
      - namingConvention:
          typeNames: pascalCase
          enumValues: upperCase
          fieldNames: camelCase
          fieldArgumentNames: camelCase

additionalTypeDefs: |
  extend type Provider {
    application: CoreApplicationsRetrieveResponse @resolveTo(
      sourceName: "Authentik"
      sourceTypeName: "Query"
      sourceFieldName: "application",
      requiredSelectionSet: "{ assignedApplicationSlug }",
      sourceArgs: {
        slug: "{root.assignedApplicationSlug}"
      }
    )
  }

  extend type Application {
    churrosGroup: ChurrosGroup! @resolveTo(
      sourceName: "Churros",
      sourceTypeName: "Query",
      sourceFieldName: "group",
      requiredSelectionSet: "{ groupSlug }",
      sourceArgs: {
        uid: "{root.groupSlug}"
      }
    )

    metrics: [CoreApplicationsMetricsListResponse] @resolveTo(
      sourceName: "Authentik"
      sourceTypeName: "Query"
      sourceFieldName: "applicationMetrics",
      requiredSelectionSet: "{ slug }",
      sourceArgs: {
        slug: "{root.slug}"
      }
    )
  }
